/*
SQLyog Ultimate v12.09 (64 bit)
MySQL - 5.7.31 : Database - lan108
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`lan108` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `lan108`;

/*Table structure for table `lan_ad` */

DROP TABLE IF EXISTS `lan_ad`;

CREATE TABLE `lan_ad` (
  `id` int(2) NOT NULL AUTO_INCREMENT COMMENT '唯一标识符',
  `lan_ad_image` text NOT NULL COMMENT '广告图片',
  `lan_ad_link` text NOT NULL COMMENT '广告跳转链接',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;

/*Data for the table `lan_ad` */

insert  into `lan_ad`(`id`,`lan_ad_image`,`lan_ad_link`) values (1,'http://108lan.com:8001/images/2020/09/25/52651f98c94442289606b80a53e203af.png','https://www.baidu.com'),(2,'http://108lan.com:8001/images/2020/09/16/045e0495b1644eb6bccb5a07779e0d6a.jpg','https://www.baidu.com'),(3,'http://108lan.com:8001/images/2020/09/16/29682594842c4c4eb58b4d73db0657cb.jpg','https://www.baidu.com'),(8,'http://108lan.com:8001/images/2020/09/25/6e84630e81164c21b0ed9710d681887f.png',''),(9,'http://108lan.com:8001/images/2020/10/18/6f2c8364fcd44827b92e08e252bf2635.png',''),(10,'http://108lan.com:8001/images/2020/09/25/5ea61d4c74794826aa11243e2ac15c28.png',''),(11,'http://108lan.com:8001/images/2020/09/16/2bab200a77d54820b76ae67fdc2a81aa.jpg\r\n',''),(12,'http://108lan.com:8001/images/2020/09/25/a053a70bb57d4b6da84cad4375220c32.png',''),(14,'http://108lan.com:8001/images/2020/09/25/50e7d02a67564d26b58d35295da4620d.png',''),(15,'http://108lan.com:8001/images/2020/10/18/d8f6f87c2e194c7d8a8445613b18afb5.png','');

/*Table structure for table `lan_admin` */

DROP TABLE IF EXISTS `lan_admin`;

CREATE TABLE `lan_admin` (
  `id` int(20) NOT NULL AUTO_INCREMENT COMMENT '唯一标识',
  `user_id` int(20) NOT NULL COMMENT '用户id',
  `role_id` int(20) NOT NULL COMMENT '用户角色ID',
  `admin_creat_data` datetime NOT NULL COMMENT '创建时间',
  `admin_is_delete` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否删除',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Data for the table `lan_admin` */

insert  into `lan_admin`(`id`,`user_id`,`role_id`,`admin_creat_data`,`admin_is_delete`) values (1,5,1,'2020-09-01 16:09:43',0),(2,17,13,'2020-09-01 16:09:43',0),(3,19,3,'2020-09-17 22:18:18',0),(4,21,56,'2020-09-18 08:14:18',0),(5,18,4,'2020-09-18 10:44:21',0),(6,22,2,'2020-09-20 16:03:59',0);

/*Table structure for table `lan_author` */

DROP TABLE IF EXISTS `lan_author`;

CREATE TABLE `lan_author` (
  `id` int(20) NOT NULL AUTO_INCREMENT COMMENT '作者唯一标识符',
  `author_show_name` varchar(200) NOT NULL COMMENT '展示名称',
  `author_create_data` datetime NOT NULL COMMENT '创建时间',
  `author_phone` varchar(20) DEFAULT NULL COMMENT '电话号码',
  `author_email` varchar(50) NOT NULL COMMENT '联系邮件',
  `author_is_delete` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否删除',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Data for the table `lan_author` */

insert  into `lan_author`(`id`,`author_show_name`,`author_create_data`,`author_phone`,`author_email`,`author_is_delete`) values (1,'黄耀辉','2020-08-28 15:33:55','18872593225','persistenthuang@163.com',0),(2,'hyh','2020-09-12 20:52:59','1312','121212121',0),(3,'121','2020-09-17 22:51:13','18872593225','persistenthuang@163.com',0),(4,'1325866027@qq.com','2020-09-18 20:37:48','15623828752','1325866027@qq.com',0),(5,'黄耀辉','2020-09-20 16:03:04','18872593225','1727449083@qq.com',0),(6,'叶梓','2020-10-15 17:47:35','18570421750','1367786538@qq.com',0);

/*Table structure for table `lan_blogs` */

DROP TABLE IF EXISTS `lan_blogs`;

CREATE TABLE `lan_blogs` (
  `id` int(20) NOT NULL AUTO_INCREMENT COMMENT '唯一标识符',
  `blogs_author_id` int(10) NOT NULL COMMENT '作者ID',
  `blogs_create_data` datetime NOT NULL COMMENT '创建时间',
  `blogs_title` text NOT NULL COMMENT '文章标题',
  `blogs_summary` varchar(200) NOT NULL COMMENT '文章摘要',
  `blogs_cover` text COMMENT '文章封面',
  `blogs_html` longtext NOT NULL COMMENT '编译好的html',
  `blogs_content` longtext NOT NULL COMMENT '文章内容',
  `blogs_column` int(4) NOT NULL COMMENT '文章分类',
  `blogs_password` varchar(40) NOT NULL COMMENT '文章密码',
  `blogs_status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '文章状态',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8;

/*Data for the table `lan_blogs` */

insert  into `lan_blogs`(`id`,`blogs_author_id`,`blogs_create_data`,`blogs_title`,`blogs_summary`,`blogs_cover`,`blogs_html`,`blogs_content`,`blogs_column`,`blogs_password`,`blogs_status`) values (4,1,'2020-09-14 21:51:16','why 108lan ?','这是一篇介绍网站的建设的文章，包含为什么搭建，搭建理念，以及网站的成员分类，网站组成，使用的一些介绍。\r\n以及我想表的的一些建设理念，希望您能认真的看下去。','http://108lan.com:8001/images/2020/09/12/3321a107681a465482ad336824194317.png','<p><img src=\"http://108lan.com:8001/images/2020/09/12/3321a107681a465482ad336824194317.png\" alt=\"108lanlogo.png\" /></p>\n<p><h3>目录</h3><ul><li><a href=\"#_5\">想法</a></li><li><a href=\"#_71\">组成</a></li><li><a href=\"#_97\">管理</a></li></ul></p>\n<h1><a id=\"_5\"></a>想法</h1>\n<p>为什么会想起来搭建这个网站呢？</p>\n<p>原因很简单：作为一个未来将要改变世界的男人，怎么能没有一个自己的个人博客网站呢。</p>\n<p>于是我就开始了我的搭建个人博客网站学习</p>\n<p>一开始也就是网上找找教程，看一看，学一学，但是感觉差点什么，找到的博客网站，要么很好看，但是很泛滥，要么就是很难看的模板。</p>\n<p>怎么办呢？</p>\n<p><img src=\"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1025202481,2312544487&amp;fm=26&amp;gp=0.jpg\" alt=\"11\" /></p>\n<p><strong>自己写一个吧</strong></p>\n<p>这个小小的想法就是这么简单，然后花了点时间，学习了一下技术，就开启了我的搭建个人网站的进程！</p>\n<p>搭着搭着，就觉得个人博客。。。。</p>\n<p>嗯。。。，有点太简单了，没意思</p>\n<p>怎么办呢，换个有意思的呗。</p>\n<p>正好那几天，也不知道是怎么了，对垃圾游戏、土味视频、标题党文章产生了一种非非非非非非非非非常厌恶的感觉。</p>\n<p>你知道的每个男人每个月总有那么几天，对各种小事都很敏感。</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1599907696645&amp;di=5dcfcbd812331676d4e0a3c406739793&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F19%2F20180819210134_jbnmr.thumb.700_0.jpeg\" alt=\"2\" /></p>\n<p><strong>所以我要建立一圈栅栏，把我围起来</strong></p>\n<p>对，就是一圈栅栏，把这个世界的无用信息阻挡在外。</p>\n<p>我想和这个世界的有趣的灵魂对话，而不是公知；</p>\n<p>我想听到独到的见解想法，而不是先入为主的引导；</p>\n<p>我想浏览用心的创作，而不是明显效应带来的无聊作品；</p>\n<p>我想知道一件事情从产生到发展到结束的所以流程，而不是只言片语；</p>\n<p>我想尽可能的关注到个个方面，而不是根据你喜欢推荐。</p>\n<p>这个就是我建立现在你正在浏览的网站的初衷。</p>\n<p>文字：你好啊</p>\n<p>图片：</p>\n<p><img src=\"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3604141556,397355164&amp;fm=26&amp;gp=0.jpg\" alt=\"3\" /></p>\n<p>视频：</p>\n<iframe src=\"//player.bilibili.com/player.html?aid=371100608&bvid=BV1SZ4y1H7RD&cid=202789161&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"800px\" height=\"600px\"> </iframe>\n<p>声音：</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=423015580&auto=0&height=66\"></iframe>\n<p>这些该是我们传递信息，论述道理，表达想法的媒介，每一种都有着自己的好处，每一个都能独立的构造，结合起来有时候也有意想不到的效果。</p>\n<h1><a id=\"_71\"></a>组成</h1>\n<p>所以我构建了这个《108lan》网站</p>\n<p>正如其名，网站由108个专栏构成，这108个专栏，有着108个使命</p>\n<p>网站用户可以分为三类：</p>\n<ul>\n<li>读者</li>\n<li>作者</li>\n<li>管理者</li>\n</ul>\n<p>身份是层层递进的</p>\n<p>就是说：你想浏览这个网站，你要先注册成为读者</p>\n<p>突然，你有了灵感，想表达一些想法、才能、观点、作品，你可以在个人中心注册成为作者，写下你的东西。投稿给这个方面的专栏。</p>\n<p>有一天，你发现，你想写的东西不属于已经存在的专栏中的任何一个，那么你可以个人中心查看申请条件申请成为一个管理者，开设一个专栏</p>\n<p>当然，专栏是有限的，我的设定是108个，我觉得108个可以涵盖所有的方面。每个专栏的领域界限不一定要非常的清晰。</p>\n<p>这108个专栏，也不是不可替代，如果你觉得不好，取而代之即可，当然，不能随心所欲的代替，你一定要比现有的管理者强才可以。</p>\n<p>通过管理者审核的作品将在首页显示，被所有读者所看到。</p>\n<h1><a id=\"_97\"></a>管理</h1>\n<p>目前网站属于初始阶段，可以说是啥都没有</p>\n<p>如果你有技术，欢迎加入开发；<br />\n如果你有想法，欢迎加入投稿；<br />\n如果你有见解，欢迎加入管理。</p>\n<p>如果你想和我取得联系：请发邮件到(persistenthuang@163.com)<br />\n我会在每天晚上查收，并回复。</p>\n','![108lanlogo.png](http://108lan.com:8001/images/2020/09/12/3321a107681a465482ad336824194317.png)\n\n\n@[toc](目录)\n\n# 想法\n\n为什么会想起来搭建这个网站呢？ \n\n原因很简单：作为一个未来将要改变世界的男人，怎么能没有一个自己的个人博客网站呢。\n\n于是我就开始了我的搭建个人博客网站学习\n\n一开始也就是网上找找教程，看一看，学一学，但是感觉差点什么，找到的博客网站，要么很好看，但是很泛滥，要么就是很难看的模板。\n\n怎么办呢？ \n\n![11](https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1025202481,2312544487&fm=26&gp=0.jpg)\n\n\n**自己写一个吧**\n\n这个小小的想法就是这么简单，然后花了点时间，学习了一下技术，就开启了我的搭建个人网站的进程！\n\n搭着搭着，就觉得个人博客。。。。\n\n嗯。。。，有点太简单了，没意思\n\n怎么办呢，换个有意思的呗。\n\n正好那几天，也不知道是怎么了，对垃圾游戏、土味视频、标题党文章产生了一种非非非非非非非非非常厌恶的感觉。\n\n你知道的每个男人每个月总有那么几天，对各种小事都很敏感。\n\n\n![2](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1599907696645&di=5dcfcbd812331676d4e0a3c406739793&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F19%2F20180819210134_jbnmr.thumb.700_0.jpeg)\n\n\n**所以我要建立一圈栅栏，把我围起来**\n\n对，就是一圈栅栏，把这个世界的无用信息阻挡在外。\n\n我想和这个世界的有趣的灵魂对话，而不是公知；\n\n我想听到独到的见解想法，而不是先入为主的引导；\n\n我想浏览用心的创作，而不是明显效应带来的无聊作品；\n\n我想知道一件事情从产生到发展到结束的所以流程，而不是只言片语；\n\n我想尽可能的关注到个个方面，而不是根据你喜欢推荐。\n\n这个就是我建立现在你正在浏览的网站的初衷。\n\n文字：你好啊\n\n图片：\n\n![3](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3604141556,397355164&fm=26&gp=0.jpg)\n\n视频：\n\n<iframe src=\"//player.bilibili.com/player.html?aid=371100608&bvid=BV1SZ4y1H7RD&cid=202789161&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"800px\" height=\"600px\"> </iframe>\n\n声音：\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=423015580&auto=0&height=66\"></iframe>\n\n\n这些该是我们传递信息，论述道理，表达想法的媒介，每一种都有着自己的好处，每一个都能独立的构造，结合起来有时候也有意想不到的效果。\n\n# 组成\n\n所以我构建了这个《108lan》网站\n\n正如其名，网站由108个专栏构成，这108个专栏，有着108个使命\n\n网站用户可以分为三类：\n- 读者\n- 作者\n- 管理者\n\n身份是层层递进的\n\n就是说：你想浏览这个网站，你要先注册成为读者\n\n突然，你有了灵感，想表达一些想法、才能、观点、作品，你可以在个人中心注册成为作者，写下你的东西。投稿给这个方面的专栏。\n\n有一天，你发现，你想写的东西不属于已经存在的专栏中的任何一个，那么你可以个人中心查看申请条件申请成为一个管理者，开设一个专栏\n\n当然，专栏是有限的，我的设定是108个，我觉得108个可以涵盖所有的方面。每个专栏的领域界限不一定要非常的清晰。\n\n这108个专栏，也不是不可替代，如果你觉得不好，取而代之即可，当然，不能随心所欲的代替，你一定要比现有的管理者强才可以。\n\n通过管理者审核的作品将在首页显示，被所有读者所看到。\n\n\n# 管理\n\n目前网站属于初始阶段，可以说是啥都没有\n\n如果你有技术，欢迎加入开发；\n如果你有想法，欢迎加入投稿；\n如果你有见解，欢迎加入管理。\n\n如果你想和我取得联系：请发邮件到(persistenthuang@163.com)\n我会在每天晚上查收，并回复。\n',1,'123456',0),(7,5,'2020-09-18 19:59:02','创建型模式（单例模式+工厂模式+建造者模式+原型模式）','设计模式（创建型模式）','http://108lan.com:8001/images/2020/09/18/721c1a2b13be4894b000d4ae6c067776.png','<p><h3>目录</h3><ul><li><a href=\"#_2\">面向对象七大原则</a></li><li><a href=\"#_12\">创建型模式</a></li><ul><li><a href=\"#_18\">单例模式</a></li><ul><li><a href=\"#_19\">饿汉式单例</a></li><li><a href=\"#_38\">懒汉式单例</a></li><li><a href=\"#_79\">静态内部类实现单例</a></li><li><a href=\"#_100\">枚举单例</a></li></ul><li><a href=\"#Factory_113\">工厂模式(Factory)</a></li><ul><li><a href=\"#_117\">简单（静态）工厂模式</a></li><li><a href=\"#_146\">工厂方法模式</a></li></ul><li><a href=\"#_186\">抽象工厂模式</a></li><li><a href=\"#Builder_230\">建造者模式(Builder)</a></li><ul><li><a href=\"#_341\">改进建造者模式</a></li></ul><li><a href=\"#Prototyte_386\">原型模式(Prototyte)</a></li></ul></ul></p>\n<h1><a id=\"_2\"></a>面向对象七大原则</h1>\n<ul>\n<li><strong>开闭原则</strong>：对扩展开放，对修改关闭</li>\n<li><strong>里氏替换原</strong>则：继承必须确保父类所拥有的性质在子类中依然成立</li>\n<li><strong>依赖倒置原则</strong>：要面向接口编程，不要面向实现编程</li>\n<li><strong>单一职责原则</strong>：控制类的粒度大小、将对象解耦、提高其内聚性</li>\n<li><strong>接口隔离原则</strong>：要为各个类建立它们需要的专用接口</li>\n<li><strong>迪米特法则</strong>：只与你的直接朋友交谈，不跟陌生人说话</li>\n<li>** 合成复用原则**： 尽量先使用组合或者聚合等关联关系来实现，其次再考虑使用继承关系来实现</li>\n</ul>\n<h1><a id=\"_12\"></a>创建型模式</h1>\n<h2><a id=\"_18\"></a>单例模式</h2>\n<h3><a id=\"_19\"></a>饿汉式单例</h3>\n<ul>\n<li>构造器私有</li>\n<li>一开始就加载对象</li>\n<li>可能会浪费空间</li>\n</ul>\n<pre><code class=\"lang-java\">public class Hungry{\n	//一开始就加载对象\n	private finall static Hungry hungry = new Hungry();\n	\n	//构造器私有\n	private Hungry(){\n	}\n	//通过方法获取对象\n	public static Hungry getHungry(){\n		return hungry;\n	}\n}\n</code></pre>\n<h3><a id=\"_38\"></a>懒汉式单例</h3>\n<ul>\n<li>要用的时候再加载</li>\n<li>单线程可以，多线程的时候要加锁</li>\n</ul>\n<pre><code class=\"lang-java\">//懒汉式\npublic class Lazy{\n	//先定义对象，并不实例化\n	private volatile static Lazy lazy;\n	\n	//构造器私有\n	private Lazy(){\n		synchronized(Lazy.class){\n			if(lazy!=null){\n				throw RuntimeException(&quot;要试图通过反射去破坏单例&quot;)\n			}\n		}\n	}\n	\n	//通过方法获取对象：双重检测锁模式，DCL懒汉式\n	public static Lazy getLazy(){\n		if(lazy==null){\n			synchronized (Lazy.class) {\n				if(lazy==null){\n					lazy=new Lazy();	\n					/**\n					 * 不是一个原子性操作\n					 * 1. 分配内存空间\n					 * 2. 执行构造方法，初始化对象\n					 * 3. 把这个对象指向空间\n					 * 可能指令重排，所以在对象前加：volatile\n					 **/\n				}\n			}\n		}\n	\n		return lazy;\n	}\n}\n</code></pre>\n<h3><a id=\"_79\"></a>静态内部类实现单例</h3>\n<ul>\n<li>通过静态内部类实现</li>\n</ul>\n<pre><code class=\"lang-java\">public class StaSign{\n	private StaSign(){\n	}\n	public static StaSign getInstance(){\n		return InnerClass.STASIGN\n	}\n	public static class InnerClass{\n		private static finall StaSign STASIGN= new StaSign();\n	}\n}\n</code></pre>\n<ul>\n<li>上面的两种方法都可以通过java反射破解</li>\n</ul>\n<h3><a id=\"_100\"></a>枚举单例</h3>\n<ul>\n<li>枚举里面没有无参构造，只有有参构造</li>\n<li>使用枚举可以解决java反射破解</li>\n</ul>\n<pre><code class=\"lang-java\">public enum EnumSingle{\n	INSTANCE;\n	public EnumSingle getInstance(){\n		return INSTANCE;\n	}\n}\n</code></pre>\n<h2><a id=\"Factory_113\"></a>工厂模式(Factory)</h2>\n<ul>\n<li>创建对象统一管理和控制，<mark>创建者和调用者分离</mark></li>\n<li>实例化对象不使用new，用工厂方法代替</li>\n</ul>\n<h3><a id=\"_117\"></a>简单（静态）工厂模式</h3>\n<ul>\n<li>用来生产同一级结构中的任意产品</li>\n<li>增加一个新产品，如果不修改代码，做不到，不满足闭合原则</li>\n</ul>\n<pre><code class=\"lang-java\">public interface Car{\n	void getName();\n}\npublic class Car1 import Car{\n	void getName(){\n		System.out.println(&quot;car1&quot;);\n	}\n}\npublic class Car2 import Car{\n	void getName(){\n		System.out.println(&quot;car2&quot;);\n	}\n}\n//建立一个工厂\npublic class CarFactory{\n	public static Car getCar1(){\n		return new Car1();\n	}\n	public static Car getCar2(){\n		return new Car2();\n	}\n}\n</code></pre>\n<h3><a id=\"_146\"></a>工厂方法模式</h3>\n<ul>\n<li>用来生产同一级结构中的固定产品</li>\n<li>把工厂提取出一个抽象类</li>\n<li>为每一个对象创建一个工厂：变的复杂了</li>\n<li>这个新增功能的时候，就不用修改原来的代码。满足开闭原则</li>\n</ul>\n<pre><code class=\"lang-java\">public interface Car{\n	void getName();\n}\npublic class Car1 import Car{\n	@verride\n	void getName(){\n		System.out.println(&quot;car1&quot;);\n	}\n}\npublic class Car2 import Car{\n	@verride\n	void getName(){\n		System.out.println(&quot;car2&quot;);\n	}\n}\n//工厂方法模式\npublic interface CarFactory{\n	Car getCar();\n}\npublic class Car1Factory import CarFactory{\n	@Verride\n	Car getCar(){\n		return new Car1();\n	} \n}\npublic class Car2Factory import CarFactory{\n	@Verride\n	Car getCar(){\n		return new Car2();\n	} \n}\n</code></pre>\n<h2><a id=\"_186\"></a>抽象工厂模式</h2>\n<ul>\n<li>围绕一个超级工厂创建其他工厂</li>\n<li>不能增加产品，但是可以增加产品族</li>\n<li>规定了所有可能被创建的产品的集合，产品族中扩展新的产品很困难</li>\n<li>增加了系统的抽象性和理解难度</li>\n</ul>\n<pre><code class=\"lang-java\">//抽象工厂模式\n\npublic interface Car{\n	void start();\n	void run();\n	void stop();\n}\n\npublic class WuLin import Car{\n	@verride\n	void start(){\n		System.out.println(&quot;start&quot;);\n	}\n	\n	@verride\n	void run(){\n		System.out.println(&quot;run&quot;);\n	}\n	\n	@verride\n	void stop(){\n		System.out.println(&quot;stop&quot;);\n	}\n}\n\npublic interface CarFactory{\n	public CarFactory getCarFactory();\n}\n\npublic class WuLinFactory import CarFactory{\n	@Verride\n	public CarFactory getWuLinCar(){\n		return new WuLin();\n	}\n}\n</code></pre>\n<h2><a id=\"Builder_230\"></a>建造者模式(Builder)</h2>\n<ul>\n<li>建造者模式也属于创建模式，它提供一种创建对象的最佳方式</li>\n<li>定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</li>\n<li>作用：在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象</li>\n<li>用户只需要给出指定对象的类型和内容，建造者模式负责顺序创建复杂对象（把内部的建造过程和细节隐藏起来）</li>\n</ul>\n<p><mark>产品</mark>：</p>\n<pre><code class=\"lang-java\">public class Protect {\n    String A;\n    String B;\n    String C;\n    String D;\n    public String getA() {\n        return A;\n    }\n    public void setA(String a) {\n        A = a;\n    }\n    public String getB() {\n        return B;\n    }\n    public void setB(String b) {\n        B = b;\n    }\n    public String getC() {\n        return C;\n    }\n    public void setC(String c) {\n        C = c;\n    }\n    public String getD() {\n        return D;\n    }\n    public void setD(String d) {\n        D = d;\n    }\n    @Override\n    public String toString() {\n        return &quot;protect{&quot; +\n                &quot;A=\'&quot; + A + \'\\\'\' +\n                &quot;, B=\'&quot; + B + \'\\\'\' +\n                &quot;, C=\'&quot; + C + \'\\\'\' +\n                &quot;, D=\'&quot; + D + \'\\\'\' +\n                \'}\';\n    }\n}\n\n</code></pre>\n<p><mark>生产者</mark>：</p>\n<pre><code class=\"lang-java\">public interface Builder {\n    Builder builderA();\n    Builder builderB();\n    Builder builderC();\n    Builder builderD();\n    Protect getProtect();\n}\n\npublic class Worker implements Builder{\n    Protect protect = new Protect();\n    public Protect getProtect(){\n        return protect;\n    }\n    public Builder builderA() {\n        protect.setA(&quot;A&quot;);\n        return this;\n    }\n    public Builder builderB() {\n        protect.setB(&quot;B&quot;);\n        return this;\n    }\n    public Builder builderC() {\n        protect.setC(&quot;C&quot;);\n        return this;\n    }\n    public Builder builderD() {\n        protect.setD(&quot;D&quot;);\n        return this;\n    }\n}\n</code></pre>\n<p><mark>指挥者</mark>：</p>\n<ul>\n<li>我们可以在指挥者里改变顺序</li>\n</ul>\n<pre><code class=\"lang-java\">public class Director {\n    public Protect BuildProtect(Builder builder){\n        builder.builderA();\n        builder.builderB();\n        builder.builderC();\n        builder.builderD();\n        return builder.getProtect();\n    }\n}\n</code></pre>\n<p><mark>测试</mark>：</p>\n<ul>\n<li>只用调用指挥者</li>\n</ul>\n<pre><code class=\"lang-java\">class Test {\n    public static void main(String[] args) {\n        Director director=new Director();\n        Protect protect = director.BuildProtect(new Worker());\n        System.out.println(protect.toString());\n    }\n}\n</code></pre>\n<h3><a id=\"_341\"></a>改进建造者模式</h3>\n<ul>\n<li>\n<p>通常用户就是指挥者，指挥者可以去掉</p>\n</li>\n<li>\n<p>给产品一个默认值</p>\n</li>\n</ul>\n<pre><code class=\"lang-java\">    String A=&quot;A&quot;;\n    String B=&quot;B&quot;;\n    String C=&quot;C&quot;;\n    String D=&quot;D&quot;;\n</code></pre>\n<ul>\n<li>接口传入赋值参数，如果不赋值，就是默认值</li>\n</ul>\n<pre><code class=\"lang-java\">public interface Builder {\n    Builder builderA(String msg);\n    Builder builderB(String msg);\n    Builder builderC(String msg);\n    Builder builderD(String msg);\n    Protect getProtect();\n}\n</code></pre>\n<ul>\n<li>测试</li>\n</ul>\n<pre><code class=\"lang-java\">class Test {\n    public static void main(String[] args) {\n        Worker worker=new Worker();\n        worker.builderA(&quot;D&quot;)\n                .builderB(&quot;C&quot;)\n                .builderC(&quot;B&quot;)\n                .builderD(&quot;A&quot;);\n        Protect protect = worker.getProtect();\n        System.out.println(protect.toString());\n    }\n}\n\n</code></pre>\n<ul>\n<li>应用场景：\n<ul>\n<li>需要生成的产品对象有复杂的内部结构，这些产品对象具备共性</li>\n<li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品</li>\n<li>适用于一个具有较多的零件（属性）的产品（对象）的创建过程</li>\n</ul>\n</li>\n</ul>\n<h2><a id=\"Prototyte_386\"></a>原型模式(Prototyte)</h2>\n<ul>\n<li>克隆对象（clone()）</li>\n<li>实现一个接口：Cloneable</li>\n<li>重写一个方法：clone</li>\n</ul>\n<pre><code class=\"lang-java\">//实现一个接口：Cloneable\n//重写一个方法：clone\npublic class Video implements Cloneable {\n    private String name;\n    private Date data;\n\n    @Override\n    public Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public Date getData() {\n        return data;\n    }\n    public void setData(Date data) {\n        this.data = data;\n    }\n    public Video(String name, Date data) {\n        this.name = name;\n        this.data = data;\n    }\n    @Override\n    public String toString() {\n        return &quot;demo{&quot; +\n                &quot;name=\'&quot; + name + \'\\\'\' +\n                &quot;, data=&quot; + data +\n                \'}\';\n    }\n}\n</code></pre>\n<ul>\n<li>测试：直接调用clone方法就可以实现了</li>\n</ul>\n<pre><code class=\"lang-java\">public static void main(String[] args) throws CloneNotSupportedException {\n        Date date=new Date();\n        Video v1=new Video(&quot;huang&quot;,date);\n        System.out.println(v1.toString());\n        Video clone =(Video) v1.clone();\n        System.out.println(clone.toString());\n    }\n</code></pre>\n<p><mark>以上方法只是浅克隆，对象里面的data对象，指向的还是同一个</mark></p>\n<ul>\n<li>类似于C++里面的浅拷贝深拷贝的概念</li>\n<li>要实现深克隆，改变clone方法</li>\n</ul>\n<pre><code class=\"lang-java\"> @Override\n    public Object clone() throws CloneNotSupportedException {\n        Object clone = super.clone();\n        Video video=(Video) clone;\n\n        //将这个对象的属性也进行克隆\n        video.data= (Date) this.data.clone();\n\n        return clone;\n    }\n</code></pre>\n<ul>\n<li>spring Bean使用的单例模式+原型模式</li>\n<li>原型模式+工厂模式：在工厂创建对象的时候使用克隆更快</li>\n</ul>\n','@[toc](目录)\n\n# 面向对象七大原则\n\n- **开闭原则**：对扩展开放，对修改关闭\n- **里氏替换原**则：继承必须确保父类所拥有的性质在子类中依然成立\n- **依赖倒置原则**：要面向接口编程，不要面向实现编程\n- **单一职责原则**：控制类的粒度大小、将对象解耦、提高其内聚性\n- **接口隔离原则**：要为各个类建立它们需要的专用接口\n- **迪米特法则**：只与你的直接朋友交谈，不跟陌生人说话\n- ** 合成复用原则**： 尽量先使用组合或者聚合等关联关系来实现，其次再考虑使用继承关系来实现\n\n# 创建型模式\n\n\n\n\n\n## 单例模式\n### 饿汉式单例\n- 构造器私有\n- 一开始就加载对象\n- 可能会浪费空间\n\n```java\npublic class Hungry{\n	//一开始就加载对象\n	private finall static Hungry hungry = new Hungry();\n	\n	//构造器私有\n	private Hungry(){\n	}\n	//通过方法获取对象\n	public static Hungry getHungry(){\n		return hungry;\n	}\n}\n```\n### 懒汉式单例\n- 要用的时候再加载\n- 单线程可以，多线程的时候要加锁\n\n```java\n//懒汉式\npublic class Lazy{\n	//先定义对象，并不实例化\n	private volatile static Lazy lazy;\n	\n	//构造器私有\n	private Lazy(){\n		synchronized(Lazy.class){\n			if(lazy!=null){\n				throw RuntimeException(\"要试图通过反射去破坏单例\")\n			}\n		}\n	}\n	\n	//通过方法获取对象：双重检测锁模式，DCL懒汉式\n	public static Lazy getLazy(){\n		if(lazy==null){\n			synchronized (Lazy.class) {\n				if(lazy==null){\n					lazy=new Lazy();	\n					/**\n					 * 不是一个原子性操作\n					 * 1. 分配内存空间\n					 * 2. 执行构造方法，初始化对象\n					 * 3. 把这个对象指向空间\n					 * 可能指令重排，所以在对象前加：volatile\n					 **/\n				}\n			}\n		}\n	\n		return lazy;\n	}\n}\n```\n\n### 静态内部类实现单例\n- 通过静态内部类实现\n\n```java\npublic class StaSign{\n	private StaSign(){\n	}\n	public static StaSign getInstance(){\n		return InnerClass.STASIGN\n	}\n	public static class InnerClass{\n		private static finall StaSign STASIGN= new StaSign();\n	}\n}\n```\n\n\n\n- 上面的两种方法都可以通过java反射破解\n\n\n### 枚举单例\n- 枚举里面没有无参构造，只有有参构造\n- 使用枚举可以解决java反射破解\n```java\npublic enum EnumSingle{\n	INSTANCE;\n	public EnumSingle getInstance(){\n		return INSTANCE;\n	}\n}\n```\n\n\n## 工厂模式(Factory)\n- 创建对象统一管理和控制，==创建者和调用者分离==\n- 实例化对象不使用new，用工厂方法代替\n\n### 简单（静态）工厂模式\n- 用来生产同一级结构中的任意产品\n- 增加一个新产品，如果不修改代码，做不到，不满足闭合原则\n\n```java\npublic interface Car{\n	void getName();\n}\npublic class Car1 import Car{\n	void getName(){\n		System.out.println(\"car1\");\n	}\n}\npublic class Car2 import Car{\n	void getName(){\n		System.out.println(\"car2\");\n	}\n}\n//建立一个工厂\npublic class CarFactory{\n	public static Car getCar1(){\n		return new Car1();\n	}\n	public static Car getCar2(){\n		return new Car2();\n	}\n}\n```\n\n### 工厂方法模式\n- 用来生产同一级结构中的固定产品\n- 把工厂提取出一个抽象类\n- 为每一个对象创建一个工厂：变的复杂了\n- 这个新增功能的时候，就不用修改原来的代码。满足开闭原则\n\n```java\npublic interface Car{\n	void getName();\n}\npublic class Car1 import Car{\n	@verride\n	void getName(){\n		System.out.println(\"car1\");\n	}\n}\npublic class Car2 import Car{\n	@verride\n	void getName(){\n		System.out.println(\"car2\");\n	}\n}\n//工厂方法模式\npublic interface CarFactory{\n	Car getCar();\n}\npublic class Car1Factory import CarFactory{\n	@Verride\n	Car getCar(){\n		return new Car1();\n	} \n}\npublic class Car2Factory import CarFactory{\n	@Verride\n	Car getCar(){\n		return new Car2();\n	} \n}\n```\n\n## 抽象工厂模式\n- 围绕一个超级工厂创建其他工厂\n- 不能增加产品，但是可以增加产品族\n- 规定了所有可能被创建的产品的集合，产品族中扩展新的产品很困难\n- 增加了系统的抽象性和理解难度\n\n```java\n//抽象工厂模式\n\npublic interface Car{\n	void start();\n	void run();\n	void stop();\n}\n\npublic class WuLin import Car{\n	@verride\n	void start(){\n		System.out.println(\"start\");\n	}\n	\n	@verride\n	void run(){\n		System.out.println(\"run\");\n	}\n	\n	@verride\n	void stop(){\n		System.out.println(\"stop\");\n	}\n}\n\npublic interface CarFactory{\n	public CarFactory getCarFactory();\n}\n\npublic class WuLinFactory import CarFactory{\n	@Verride\n	public CarFactory getWuLinCar(){\n		return new WuLin();\n	}\n}\n```\n\n## 建造者模式(Builder)\n- 建造者模式也属于创建模式，它提供一种创建对象的最佳方式\n- 定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示\n- 作用：在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象\n- 用户只需要给出指定对象的类型和内容，建造者模式负责顺序创建复杂对象（把内部的建造过程和细节隐藏起来）\n\n==产品==：\n\n```java\npublic class Protect {\n    String A;\n    String B;\n    String C;\n    String D;\n    public String getA() {\n        return A;\n    }\n    public void setA(String a) {\n        A = a;\n    }\n    public String getB() {\n        return B;\n    }\n    public void setB(String b) {\n        B = b;\n    }\n    public String getC() {\n        return C;\n    }\n    public void setC(String c) {\n        C = c;\n    }\n    public String getD() {\n        return D;\n    }\n    public void setD(String d) {\n        D = d;\n    }\n    @Override\n    public String toString() {\n        return \"protect{\" +\n                \"A=\'\" + A + \'\\\'\' +\n                \", B=\'\" + B + \'\\\'\' +\n                \", C=\'\" + C + \'\\\'\' +\n                \", D=\'\" + D + \'\\\'\' +\n                \'}\';\n    }\n}\n\n```\n\n==生产者==：\n\n```java\npublic interface Builder {\n    Builder builderA();\n    Builder builderB();\n    Builder builderC();\n    Builder builderD();\n    Protect getProtect();\n}\n\npublic class Worker implements Builder{\n    Protect protect = new Protect();\n    public Protect getProtect(){\n        return protect;\n    }\n    public Builder builderA() {\n        protect.setA(\"A\");\n        return this;\n    }\n    public Builder builderB() {\n        protect.setB(\"B\");\n        return this;\n    }\n    public Builder builderC() {\n        protect.setC(\"C\");\n        return this;\n    }\n    public Builder builderD() {\n        protect.setD(\"D\");\n        return this;\n    }\n}\n```\n==指挥者==：\n- 我们可以在指挥者里改变顺序\n~~~java\npublic class Director {\n    public Protect BuildProtect(Builder builder){\n        builder.builderA();\n        builder.builderB();\n        builder.builderC();\n        builder.builderD();\n        return builder.getProtect();\n    }\n}\n~~~\n\n==测试==：\n- 只用调用指挥者\n~~~java\nclass Test {\n    public static void main(String[] args) {\n        Director director=new Director();\n        Protect protect = director.BuildProtect(new Worker());\n        System.out.println(protect.toString());\n    }\n}\n~~~\n\n### 改进建造者模式\n- 通常用户就是指挥者，指挥者可以去掉\n\n- 给产品一个默认值\n\n```java\n    String A=\"A\";\n    String B=\"B\";\n    String C=\"C\";\n    String D=\"D\";\n```\n- 接口传入赋值参数，如果不赋值，就是默认值\n```java\npublic interface Builder {\n    Builder builderA(String msg);\n    Builder builderB(String msg);\n    Builder builderC(String msg);\n    Builder builderD(String msg);\n    Protect getProtect();\n}\n```\n- 测试\n\n```java\nclass Test {\n    public static void main(String[] args) {\n        Worker worker=new Worker();\n        worker.builderA(\"D\")\n                .builderB(\"C\")\n                .builderC(\"B\")\n                .builderD(\"A\");\n        Protect protect = worker.getProtect();\n        System.out.println(protect.toString());\n    }\n}\n\n```\n\n- 应用场景：\n  - 需要生成的产品对象有复杂的内部结构，这些产品对象具备共性\n  - 隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品\n  - 适用于一个具有较多的零件（属性）的产品（对象）的创建过程\n\n\n\n## 原型模式(Prototyte)\n- 克隆对象（clone()）\n- 实现一个接口：Cloneable\n- 重写一个方法：clone\n\n```java\n//实现一个接口：Cloneable\n//重写一个方法：clone\npublic class Video implements Cloneable {\n    private String name;\n    private Date data;\n\n    @Override\n    public Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public Date getData() {\n        return data;\n    }\n    public void setData(Date data) {\n        this.data = data;\n    }\n    public Video(String name, Date data) {\n        this.name = name;\n        this.data = data;\n    }\n    @Override\n    public String toString() {\n        return \"demo{\" +\n                \"name=\'\" + name + \'\\\'\' +\n                \", data=\" + data +\n                \'}\';\n    }\n}\n```\n\n- 测试：直接调用clone方法就可以实现了\n```java\npublic static void main(String[] args) throws CloneNotSupportedException {\n        Date date=new Date();\n        Video v1=new Video(\"huang\",date);\n        System.out.println(v1.toString());\n        Video clone =(Video) v1.clone();\n        System.out.println(clone.toString());\n    }\n```\n\n==以上方法只是浅克隆，对象里面的data对象，指向的还是同一个==\n\n- 类似于C++里面的浅拷贝深拷贝的概念\n- 要实现深克隆，改变clone方法\n\n```java\n @Override\n    public Object clone() throws CloneNotSupportedException {\n        Object clone = super.clone();\n        Video video=(Video) clone;\n\n        //将这个对象的属性也进行克隆\n        video.data= (Date) this.data.clone();\n\n        return clone;\n    }\n```\n\n- spring Bean使用的单例模式+原型模式\n- 原型模式+工厂模式：在工厂创建对象的时候使用克隆更快',2,'123456',0),(8,5,'2020-09-19 21:03:58','结构型模式（适配器模式+桥接模式+代理模式）','设计模式（结构性模式）','http://108lan.com:8001/images/2020/09/18/0b5c3fcd80f54c5898495be18a59d031.png','<p><h3>目录</h3><ul><li><a href=\"#_2\">结构性模式</a></li><ul><li><a href=\"#Adapter_4\">适配器模式（Adapter)</a></li><li><a href=\"#bridge_75\">桥接模式（bridge）</a></li><li><a href=\"#proxy_167\">代理模式（proxy）</a></li><ul><li><a href=\"#_178\">静态代理</a></li><li><a href=\"#_251\">动态代理</a></li></ul></ul></ul></p>\n<h1><a id=\"_2\"></a>结构性模式</h1>\n<h2><a id=\"Adapter_4\"></a>适配器模式（Adapter)</h2>\n<ul>\n<li>将一个类的接口转换成客户端的另外一个接口。Adapter模式使得原来本由于接口不兼容而不能在一起工作的哪些类可以在一起工作</li>\n<li>通过包装一个不适配的对象，把原接口转换成目标对象</li>\n</ul>\n<p><mark>例子：电脑，网线，适配器</mark></p>\n<ul>\n<li>电脑</li>\n</ul>\n<pre><code class=\"lang-java\">//客户端类：要连上网线\npublic class Computer {\n    public void getNet(Adapter adapter){\n        //找一个转接头\n        adapter.handleResquest();\n    }\n}\n</code></pre>\n<ul>\n<li>网线</li>\n</ul>\n<pre><code class=\"lang-java\">//被适配的类：网线\npublic class NetLine {\n    public void request(){\n        System.out.println(&quot;连接网线上网&quot;);\n    }\n}\n</code></pre>\n<ul>\n<li>适配器</li>\n</ul>\n<pre><code class=\"lang-java\">//接口转换器的接口\npublic interface Adapter {\n    //处理请求\n    public void handleResquest();\n}\n\n//适配器\npublic class MacAdapter implements Adapter {\n    /**\n     * 使用组合的，不推荐使用继承\n     * 这种把对象注入进来的，叫对象适配器\n     * 可以适配一个适配者的子类，由于适配者和适配器之间是关联关系，根据&quot;里氏代换原则&quot;适配者的子类也可以通过该适配器进行适配\n     * 还可以使用继承的方式，但是java不支持多继承，不推荐使用\n     */    private NetLine netLine;\n    public MacAdapter(NetLine netLine) {\n        this.netLine = netLine;\n    }\n    public void handleResquest() {\n        netLine.request();\n    }\n}\n</code></pre>\n<ul>\n<li>测试</li>\n</ul>\n<pre><code class=\"lang-java\">class Test {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        //上网：电脑+网线+适配器\n        Computer computer=new Computer();\n        NetLine netLine=new NetLine();\n        Adapter adapter=new MacAdapter(netLine);\n\n        computer.getNet(adapter);\n\n    }\n}\n</code></pre>\n<h2><a id=\"bridge_75\"></a>桥接模式（bridge）</h2>\n<ul>\n<li>将抽象部分与他的实现部分分离，使他们都独立的变化</li>\n<li>它是一种对象结构型模式吗，又称为柄体模式（Handle and Body）或接口模式（Interfce）</li>\n<li>好处：\n<ul>\n<li>桥接模式有点类似于多继承方案，但是多继承方案违背了单一职责原则复用性比较差</li>\n<li>桥接模式极大的减少了子类的个数，降低管理和维护成本</li>\n<li>提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有的系统。符合开闭原则</li>\n</ul>\n</li>\n<li>缺点：\n<ul>\n<li>增加系统的理解与设计难度，要对抽象进行编程</li>\n<li>桥接模式要求正确识别出系统中两个独立变化的维度，使用范围有一定的局限性</li>\n</ul>\n</li>\n</ul>\n<p><mark>例子：电脑和品牌</mark><br />\n<img src=\"https://img-blog.csdnimg.cn/20200918151308843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"1212\" /></p>\n<ul>\n<li>品牌类</li>\n</ul>\n<pre><code class=\"lang-java\">//品牌\npublic interface Brand {\n    void info();\n}\n\npublic class Apple implements Brand {\n    public void info() {\n        System.out.println(&quot;苹果&quot;);\n    }\n}\n\npublic class Lenove implements Brand{\n    public void info() {\n        System.out.println(&quot;联想&quot;);\n    }\n}\n</code></pre>\n<ul>\n<li>电脑：使用组合的方式把品牌组合进电脑</li>\n</ul>\n<pre><code class=\"lang-java\">//电脑抽象类\npublic class Computer {\n    //组合品牌\n    protected Brand brand;\n    public Computer(Brand brand) {\n        this.brand = brand;\n    }\n    public void info(){\n        brand.info();   //自带品牌\n    }\n}\n\n\n//台式机类\npublic class Desktop extends Computer{\n    public Desktop(Brand brand) {\n        super(brand);\n    }\n    @Override\n    public void info() {\n        super.info();\n        System.out.println(&quot;台式机&quot;);\n    }\n}\n\n//笔记本\npublic class Laptop extends Computer{\n    public Laptop(Brand brand) {\n        super(brand);\n    }\n\n    @Override\n    public void info() {\n        super.info();\n        System.out.println(&quot;笔记本&quot;);\n    }\n}\n\n</code></pre>\n<ul>\n<li>测试类</li>\n</ul>\n<pre><code class=\"lang-java\">class Test {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        //电脑\n        Computer computer= new Laptop(new Apple());\n        computer.info();\n    }\n}\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200918151210331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"1212121\" /></p>\n<h2><a id=\"proxy_167\"></a>代理模式（proxy）</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/20200727164532867.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"23\" /></p>\n<ul>\n<li>分类：\n<ul>\n<li>静态代理</li>\n<li>动态代理</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"_178\"></a>静态代理</h3>\n<ul>\n<li>角色\n<ul>\n<li>抽象角色：一般会使用接口或者抽象类来解决</li>\n<li>真实角色：被代理的角色</li>\n<li>代理角色：代理真实角色，代理真实角色后，一般会做一些附属操作</li>\n<li>客户角色：访问代理对象的人</li>\n</ul>\n</li>\n</ul>\n<p>== 例子：租房子==</p>\n<pre><code class=\"lang-java\">//租房接口\npublic interface Rent {\n    void rent();\n}\n\n\n//房东\npublic class Host implements Rent {\n    public void rent() {\n        System.out.println(&quot;房东要出租房子&quot;);\n    }\n}\n\n\n//中介\npublic class Proxy implements Rent {\n    private Host host;\n\n    public Proxy(Host host) {\n        this.host = host;\n    }\n\n\n    public void rent() {\n        System.out.println(&quot;代理找房子&quot;);\n        host.rent();\n        this.showHose();\n        this.finese();\n    }\n    private void showHose(){\n        System.out.println(&quot;中介带你看房&quot;);\n    }\n    private void finese(){\n        System.out.println(&quot;签合同&quot;);\n    }\n}\n\n\n//客户\npublic class Client {\n    public static void main(String[] args) {\n        Host host =new Host();\n        Proxy proxy=new Proxy(host);\n        proxy.rent();\n    }\n}\n\n</code></pre>\n<ul>\n<li>代理模式的好处：\n<ul>\n<li>可以使用真实角色的操作更加纯粹，不用去关注一些公共业务</li>\n<li>公共业务也就交给了代理角色！实现了业务的分工</li>\n<li>公共业务发生扩展的时候，方便集中管理</li>\n</ul>\n</li>\n<li>缺点：\n<ul>\n<li>一个真实角色就会产生一个代理角色，代码量会翻倍，开发效率会变低</li>\n<li>动态代理好处：\n<ul>\n<li>一个动态代理代理的是一类接口，一般就是对应的一类业务</li>\n<li>一个动态代理可以代理多个类，只要实现了同一个接口即可</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"_251\"></a>动态代理</h3>\n<ul>\n<li>\n<p>角色：动态代理和静态代理的角色是一样</p>\n</li>\n<li>\n<p>动态代理的代理类是动态生成的</p>\n</li>\n<li>\n<p>动态代理分为两大类：基于接口的动态代理，基于类的动态代理</p>\n<ul>\n<li>基于接口：JDK动态代理</li>\n<li>基于类：cgLib</li>\n<li>Java字节码实现：javasist</li>\n</ul>\n</li>\n<li>\n<p>了解两个类：</p>\n<ul>\n<li>Proxy：代理</li>\n<li>InvocationHandler：调用处理程序</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>InvocationHandler是由代理实例的调用处理程序实现的接口。<br />\n每个代理实例都有一个关联的调用处理程序。 在代理实例上调用方法时，方法调用将被编码并调度到其调用处理程序的invoke方法。</p>\n</blockquote>\n<ul>\n<li>实现一个万能代理类生成类：</li>\n</ul>\n<pre><code class=\"lang-java\">//使用这个类自动生成代理类\npublic class ProxyInvocationHandler implements InvocationHandler {\n    //被代理的接口\n    private Object target;\n    public void setTarget(Object target) {\n        this.target = target;\n    }\n    //生成代理对象\n    public Object getProxy(){\n        return Proxy.newProxyInstance(\n        		this.getClass().getClassLoader(),\n                target.getClass().getInterfaces(),\n                this); \n    }\n    //处理代理实类，并返回结果\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        //动态代理的本质，就是使用反射机制实现\n        Object result = method.invoke(target, args);\n        return result;\n    }\n}\n</code></pre>\n<ul>\n<li>测试使用：Host是一个继承Rent接口的实现类，Rent是一个接口</li>\n</ul>\n<pre><code class=\"lang-java\">public class Client {\n    public static void main(String[] args) {\n        //真实角色\n        Host host=new Host();\n        //代理角色：动态创建\n        ProxyInvocationHandler handler = new ProxyInvocationHandler();\n        //通过调用程序处理角色，来创建对象\n        handler.setTarget(host);\n        Rent proxy = (Rent)handler.getProxy();  //这里的proxy是动态生成的\n        proxy.rent();\n    }\n}\n</code></pre>\n','@[toc](目录)\n\n# 结构性模式\n\n## 适配器模式（Adapter)\n- 将一个类的接口转换成客户端的另外一个接口。Adapter模式使得原来本由于接口不兼容而不能在一起工作的哪些类可以在一起工作\n- 通过包装一个不适配的对象，把原接口转换成目标对象\n\n==例子：电脑，网线，适配器==\n\n- 电脑\n\n```java\n//客户端类：要连上网线\npublic class Computer {\n    public void getNet(Adapter adapter){\n        //找一个转接头\n        adapter.handleResquest();\n    }\n}\n```\n\n- 网线\n\n```java\n//被适配的类：网线\npublic class NetLine {\n    public void request(){\n        System.out.println(\"连接网线上网\");\n    }\n}\n```\n\n- 适配器\n\n```java\n//接口转换器的接口\npublic interface Adapter {\n    //处理请求\n    public void handleResquest();\n}\n\n//适配器\npublic class MacAdapter implements Adapter {\n    /**\n     * 使用组合的，不推荐使用继承\n     * 这种把对象注入进来的，叫对象适配器\n     * 可以适配一个适配者的子类，由于适配者和适配器之间是关联关系，根据\"里氏代换原则\"适配者的子类也可以通过该适配器进行适配\n     * 还可以使用继承的方式，但是java不支持多继承，不推荐使用\n     */    private NetLine netLine;\n    public MacAdapter(NetLine netLine) {\n        this.netLine = netLine;\n    }\n    public void handleResquest() {\n        netLine.request();\n    }\n}\n```\n\n- 测试\n\n```java\nclass Test {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        //上网：电脑+网线+适配器\n        Computer computer=new Computer();\n        NetLine netLine=new NetLine();\n        Adapter adapter=new MacAdapter(netLine);\n\n        computer.getNet(adapter);\n\n    }\n}\n```\n\n## 桥接模式（bridge）\n- 将抽象部分与他的实现部分分离，使他们都独立的变化\n- 它是一种对象结构型模式吗，又称为柄体模式（Handle and Body）或接口模式（Interfce）\n- 好处：\n  - 桥接模式有点类似于多继承方案，但是多继承方案违背了单一职责原则复用性比较差\n  - 桥接模式极大的减少了子类的个数，降低管理和维护成本\n  - 提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有的系统。符合开闭原则\n- 缺点：\n  - 增加系统的理解与设计难度，要对抽象进行编程\n  - 桥接模式要求正确识别出系统中两个独立变化的维度，使用范围有一定的局限性\n\n\n==例子：电脑和品牌==\n![1212](https://img-blog.csdnimg.cn/20200918151308843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n- 品牌类\n\n```java\n//品牌\npublic interface Brand {\n    void info();\n}\n\npublic class Apple implements Brand {\n    public void info() {\n        System.out.println(\"苹果\");\n    }\n}\n\npublic class Lenove implements Brand{\n    public void info() {\n        System.out.println(\"联想\");\n    }\n}\n```\n\n- 电脑：使用组合的方式把品牌组合进电脑\n\n```java\n//电脑抽象类\npublic class Computer {\n    //组合品牌\n    protected Brand brand;\n    public Computer(Brand brand) {\n        this.brand = brand;\n    }\n    public void info(){\n        brand.info();   //自带品牌\n    }\n}\n\n\n//台式机类\npublic class Desktop extends Computer{\n    public Desktop(Brand brand) {\n        super(brand);\n    }\n    @Override\n    public void info() {\n        super.info();\n        System.out.println(\"台式机\");\n    }\n}\n\n//笔记本\npublic class Laptop extends Computer{\n    public Laptop(Brand brand) {\n        super(brand);\n    }\n\n    @Override\n    public void info() {\n        super.info();\n        System.out.println(\"笔记本\");\n    }\n}\n\n```\n\n- 测试类\n\n~~~java\nclass Test {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        //电脑\n        Computer computer= new Laptop(new Apple());\n        computer.info();\n    }\n}\n~~~\n![1212121](https://img-blog.csdnimg.cn/20200918151210331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n## 代理模式（proxy）\n![23](https://img-blog.csdnimg.cn/20200727164532867.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n\n\n\n- 分类：\n  * 静态代理\n  * 动态代理\n\n### 静态代理\n- 角色\n  - 抽象角色：一般会使用接口或者抽象类来解决\n  - 真实角色：被代理的角色\n  - 代理角色：代理真实角色，代理真实角色后，一般会做一些附属操作\n  - 客户角色：访问代理对象的人\n\n== 例子：租房子==\n\n```java\n//租房接口\npublic interface Rent {\n    void rent();\n}\n\n\n//房东\npublic class Host implements Rent {\n    public void rent() {\n        System.out.println(\"房东要出租房子\");\n    }\n}\n\n\n//中介\npublic class Proxy implements Rent {\n    private Host host;\n\n    public Proxy(Host host) {\n        this.host = host;\n    }\n\n\n    public void rent() {\n        System.out.println(\"代理找房子\");\n        host.rent();\n        this.showHose();\n        this.finese();\n    }\n    private void showHose(){\n        System.out.println(\"中介带你看房\");\n    }\n    private void finese(){\n        System.out.println(\"签合同\");\n    }\n}\n\n\n//客户\npublic class Client {\n    public static void main(String[] args) {\n        Host host =new Host();\n        Proxy proxy=new Proxy(host);\n        proxy.rent();\n    }\n}\n\n```\n\n\n\n\n- 代理模式的好处：\n  * 可以使用真实角色的操作更加纯粹，不用去关注一些公共业务\n  * 公共业务也就交给了代理角色！实现了业务的分工\n  * 公共业务发生扩展的时候，方便集中管理\n- 缺点：\n  * 一个真实角色就会产生一个代理角色，代码量会翻倍，开发效率会变低\n  * 动态代理好处：\n    * 一个动态代理代理的是一类接口，一般就是对应的一类业务\n    * 一个动态代理可以代理多个类，只要实现了同一个接口即可\n\n\n### 动态代理\n- 角色：动态代理和静态代理的角色是一样\n- 动态代理的代理类是动态生成的\n- 动态代理分为两大类：基于接口的动态代理，基于类的动态代理\n  * 基于接口：JDK动态代理\n  * 基于类：cgLib\n  * Java字节码实现：javasist\n\n- 了解两个类：\n  * Proxy：代理\n  * InvocationHandler：调用处理程序\n> InvocationHandler是由代理实例的调用处理程序实现的接口。 \n每个代理实例都有一个关联的调用处理程序。 在代理实例上调用方法时，方法调用将被编码并调度到其调用处理程序的invoke方法。 \n\n- 实现一个万能代理类生成类：\n\n```java\n//使用这个类自动生成代理类\npublic class ProxyInvocationHandler implements InvocationHandler {\n    //被代理的接口\n    private Object target;\n    public void setTarget(Object target) {\n        this.target = target;\n    }\n    //生成代理对象\n    public Object getProxy(){\n        return Proxy.newProxyInstance(\n        		this.getClass().getClassLoader(),\n                target.getClass().getInterfaces(),\n                this); \n    }\n    //处理代理实类，并返回结果\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        //动态代理的本质，就是使用反射机制实现\n        Object result = method.invoke(target, args);\n        return result;\n    }\n}\n```\n- 测试使用：Host是一个继承Rent接口的实现类，Rent是一个接口\n\n```java\npublic class Client {\n    public static void main(String[] args) {\n        //真实角色\n        Host host=new Host();\n        //代理角色：动态创建\n        ProxyInvocationHandler handler = new ProxyInvocationHandler();\n        //通过调用程序处理角色，来创建对象\n        handler.setTarget(host);\n        Rent proxy = (Rent)handler.getProxy();  //这里的proxy是动态生成的\n        proxy.rent();\n    }\n}\n```',2,'123456',0),(9,5,'2020-09-20 16:07:48','开源即优秀','windows下的一些好的软件推荐','https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1600598263839&di=19495a3fe49a61b0b35fbb04a9efe1f3&imgtype=0&src=http%3A%2F%2Fpic.51yuansu.com%2Fpic3%2Fcover%2F03%2F65%2F24%2F5bdff5304ed51_610.jpg','<p><h3>目录</h3><ul><li><a href=\"#_3\">软件推荐</a></li><ul><li><a href=\"#geek_4\">卸载软件的软件：geek</a></li><li><a href=\"#markdowntypora_7\">markdown编辑器：typora</a></li><li><a href=\"#Notepad_11\">代码文本编辑器：Notepad++</a></li><li><a href=\"#drawio_13\">绘图软件：drawio</a></li><li><a href=\"#Captura_29\">录屏软件：Captura</a></li><li><a href=\"#handbrake_33\">视频转码工具：handbrake</a></li><li><a href=\"#mkvmp4_37\">mkv格式快速转mp4</a></li><li><a href=\"#PDFSumatraPDF_43\">PDF阅读器：SumatraPDF</a></li><li><a href=\"#7zip_51\">解压软件：7-zip</a></li><li><a href=\"#Snipaste_58\">截图工具：Snipaste</a></li><li><a href=\"#QuickLook_68\">快速预览工具：QuickLook</a></li><li><a href=\"#potplayer_75\">视频播放器：potplayer</a></li><li><a href=\"#FDMIDM_82\">多线程下载工具：FDM/IDM</a></li><li><a href=\"#DismCCleaner_95\">清理工具：Dism++/CCleaner</a></li><li><a href=\"#Edgechromium_107\">浏览器：Edge（chromium内核）</a></li><li><a href=\"#Team_Viewer_126\">远程控制软件：Team Viewer/快速助手</a></li><li><a href=\"#SpaceSniffer_140\">磁盘检测工具：SpaceSniffer</a></li><li><a href=\"#Autoruns_147\">启动项检测工具：Autoruns</a></li><li><a href=\"#trafficmonitor_155\">网速显示工具：trafficmonitor</a></li><li><a href=\"#Fiddler_162\">抓包工具：Fiddler</a></li><li><a href=\"#__167\">杀毒软件 ：火绒</a></li><li><a href=\"#WePE_174\">装机工具：WePE</a></li></ul></ul></p>\n<h1><a id=\"_3\"></a>软件推荐</h1>\n<h2><a id=\"geek_4\"></a>卸载软件的软件：geek</h2>\n<p><a href=\"https://geekuninstaller.com/\" target=\"_blank\">官网下载地址</a></p>\n<ul>\n<li>清理注册表，清理残留非常好</li>\n</ul>\n<h2><a id=\"markdowntypora_7\"></a>markdown编辑器：typora</h2>\n<p><a href=\"https://www.typora.io/\" target=\"_blank\">下载地址</a></p>\n<h2><a id=\"Notepad_11\"></a>代码文本编辑器：Notepad++</h2>\n<p><a href=\"https://notepad-plus-plus.org/\" target=\"_blank\">官网下载地址</a></p>\n<h2><a id=\"drawio_13\"></a>绘图软件：drawio</h2>\n<p><a href=\"https://app.diagrams.net/\" target=\"_blank\">在线版使用地址</a><br />\n<a href=\"https://github.com/jgraph/drawio-desktop/releases\" target=\"_blank\">离线版下载地址</a></p>\n<ul>\n<li>画流程图很好的软件</li>\n<li>不局限于流程图</li>\n<li>开源的  ProcessOn/迅捷绘图</li>\n<li>可以选择在线版和离线版</li>\n<li>底层基于JavaScript，可跨平台</li>\n<li>github开源</li>\n<li>建议使用，新版的Edge安装为应用<br />\n<img src=\"https://img-blog.csdnimg.cn/20200725092316859.png\" alt=\"1234\" /></li>\n</ul>\n<h2><a id=\"Captura_29\"></a>录屏软件：Captura</h2>\n<p><a href=\"https://mathewsachin.github.io/Captura/\" target=\"_blank\">官网下载地址</a></p>\n<ul>\n<li>小，开源</li>\n</ul>\n<h2><a id=\"handbrake_33\"></a>视频转码工具：handbrake</h2>\n<p><a href=\"https://handbrake.fr/downloads.php\" target=\"_blank\">下载地址</a></p>\n<ul>\n<li>跨平台</li>\n</ul>\n<h2><a id=\"mkvmp4_37\"></a>mkv格式快速转mp4</h2>\n<ul>\n<li>如果你需要剪辑视频，pr又不支持mkv格式，这个软件可以帮你快速转换格式，3G的视频大概只需要5分钟<br />\n<a href=\"https://github.com/gavinbeatty/mkvtomp4\" target=\"_blank\">github项目地址</a></li>\n</ul>\n<h2><a id=\"PDFSumatraPDF_43\"></a>PDF阅读器：SumatraPDF</h2>\n<p><a href=\"https://www.sumatrapdfreader.org/download-free-pdf-viewer.html\" target=\"_blank\">下载地址</a></p>\n<ul>\n<li>开源</li>\n<li>轻量（5-6M）</li>\n<li>反应快</li>\n</ul>\n<h2><a id=\"7zip_51\"></a>解压软件：7-zip</h2>\n<p><a href=\"https://sparanoid.com/lab/7z/\" target=\"_blank\">中文下载网站</a><br />\n<a href=\"https://www.7-zip.org/\" target=\"_blank\">官方下载网站</a></p>\n<ul>\n<li>用过这个解压工具后再也没换过了</li>\n<li>开源，无广告，体积小，支持格式多<br />\n<img src=\"https://img-blog.csdnimg.cn/20200530082059266.png\" alt=\"1\" /></li>\n</ul>\n<h2><a id=\"Snipaste_58\"></a>截图工具：Snipaste</h2>\n<p><a href=\"https://www.microsoft.com/en-us/p/snipaste/9p1wxpkb68kx?cid=snipaste&amp;activetab=pivot:overviewtab\" target=\"_blank\">微软官网</a></p>\n<ul>\n<li>体积小，快速</li>\n<li>被收录在微软商店里</li>\n<li>可以重微软商店中下载</li>\n<li>快捷键设置</li>\n<li>图片编辑方便</li>\n<li>和QQ的截屏工具类似<br />\n<img src=\"https://img-blog.csdnimg.cn/20200530085247131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70\" alt=\"2344\" /></li>\n</ul>\n<h2><a id=\"QuickLook_68\"></a>快速预览工具：QuickLook</h2>\n<ul>\n<li>MAC的空格预览替代品</li>\n<li>收录在微软商店中</li>\n<li>扩展功能访问Github</li>\n</ul>\n<p><a href=\"https://github.com/QL-Win/QuickLook\" target=\"_blank\">Github项目地址</a><br />\n<img src=\"https://img-blog.csdnimg.cn/20200530091351151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<h2><a id=\"potplayer_75\"></a>视频播放器：potplayer</h2>\n<ul>\n<li>好看，小</li>\n<li>吊打其他播放器</li>\n</ul>\n<p><a href=\"https://potplayer.en.softonic.com/\" target=\"_blank\">官网下载地址</a></p>\n<h2><a id=\"FDMIDM_82\"></a>多线程下载工具：FDM/IDM</h2>\n<p><strong>开源版-FDM</strong></p>\n<ul>\n<li>免费开源，多线程下载工具</li>\n</ul>\n<p><a href=\"https://www.freedownloadmanager.org/zh/\" target=\"_blank\">官网下载网址</a><br />\n<img src=\"https://img-blog.csdnimg.cn/20200530084700542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70\" alt=\"233\" /></p>\n<p><strong>付费版-IDM</strong><br />\n<a href=\"http://www.internetdownloadmanager.com/\" target=\"_blank\">官网下载网址</a></p>\n<ul>\n<li>可集成到浏览器等多种下载场景</li>\n<li>有试用时间，如果不愿意付费就使用上一个。</li>\n</ul>\n<h2><a id=\"DismCCleaner_95\"></a>清理工具：Dism++/CCleaner</h2>\n<ul>\n<li>启动快，体积小，功能强大</li>\n<li>功能比较强大<br />\n<a href=\"https://www.chuyu.me/zh-Hans/index.html\" target=\"_blank\">官网下载地址</a></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200530085627333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70\" alt=\"45\" /></p>\n<p><strong>CCleaner</strong><br />\n<a href=\"https://www.ccleaner.com/\" target=\"_blank\">官网下载地址</a></p>\n<h2><a id=\"Edgechromium_107\"></a>浏览器：Edge（chromium内核）</h2>\n<p><strong>扩展脚本推荐：</strong></p>\n<ol>\n<li>Tampermonkey：油猴脚本，浏览器必备</li>\n<li>AdBlock ：最佳广告拦截工具</li>\n<li>图片助手(ImageAssistant) 批量图片下载器</li>\n<li>eHelper(前端助手)</li>\n<li>GiteeTree</li>\n<li>JSON Beautifier &amp; Editor</li>\n<li>Regex Search</li>\n<li>User Agents for Microsoft Edge</li>\n</ol>\n<p><strong>基于Edge的：网易云</strong></p>\n<ul>\n<li>最近才发现的，网页版应用</li>\n<li>可以把一个网页作为应用安装</li>\n<li>轻量，便捷</li>\n<li>不跳转页面的网址才好用<br />\n<img src=\"https://img-blog.csdnimg.cn/2020053009285548.png\" alt=\"122\" /></li>\n</ul>\n<h2><a id=\"Team_Viewer_126\"></a>远程控制软件：Team Viewer/快速助手</h2>\n<p><strong>Team Viewer</strong><br />\n<a href=\"https://www.teamviewer.cn/cn/\" target=\"_blank\">官网下载地址</a></p>\n<ul>\n<li>相比其他远程软件，这个个人版是免费的</li>\n<li>而且体验很好，快捷键画面都没得说，文件传输，角色切换都很方便<br />\n<img src=\"https://img-blog.csdnimg.cn/20200530083443436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70\" alt=\"2\" /><br />\n<strong>快速助手</strong></li>\n<li>Windows自带远程协助工具，免安装</li>\n<li>体验还不错，但是角色切换不方便</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200530083827799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70\" alt=\"12\" /></p>\n<h2><a id=\"SpaceSniffer_140\"></a>磁盘检测工具：SpaceSniffer</h2>\n<p><a href=\"https://baike.baidu.com/item/SpaceSniffer/3498384?fr=aladdin\" target=\"_blank\">百度百科介绍</a><br />\n<a href=\"https://spacesniffer.en.softonic.com/\" target=\"_blank\">官网下载工具</a></p>\n<ul>\n<li>清理C盘必备<br />\n<img src=\"https://img-blog.csdnimg.cn/20200530084215833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70\" alt=\"45\" /></li>\n</ul>\n<h2><a id=\"Autoruns_147\"></a>启动项检测工具：Autoruns</h2>\n<p><a href=\"https://baike.baidu.com/item/AutoRuns/8449010?fr=aladdin\" target=\"_blank\">百度百科介绍</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/sysinternals/downloads/autoruns\" target=\"_blank\">微软官方下载网址</a></p>\n<ul>\n<li>它能用于显示在 Windows启动或登录时自动运行的程序，并且允许用户有选择地禁用或删除它们<br />\n<img src=\"https://img-blog.csdnimg.cn/20200530082554942.png\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<h2><a id=\"trafficmonitor_155\"></a>网速显示工具：trafficmonitor</h2>\n<ul>\n<li>开源，体积小</li>\n</ul>\n<p><a href=\"https://github.com/zhongyang219/TrafficMonitor\" target=\"_blank\">Github下载地址</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200530085912382.png\" alt=\"在这里插入图片描述\" /></p>\n<h2><a id=\"Fiddler_162\"></a>抓包工具：Fiddler</h2>\n<p><a href=\"https://baike.baidu.com/item/Fiddler/2868968?fr=aladdin\" target=\"_blank\">百度百科介绍</a><br />\n<a href=\"https://www.telerik.com/fiddler\" target=\"_blank\">官网下载工具</a><br />\n<img src=\"https://img-blog.csdnimg.cn/20200530090133754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70\" alt=\"23\" /></p>\n<h2><a id=\"__167\"></a>杀毒软件 ：火绒</h2>\n<ul>\n<li>没有必要装</li>\n</ul>\n<ol>\n<li>火绒<br />\n<a href=\"https://www.huorong.cn/\" target=\"_blank\">官网下载地址</a></li>\n</ol>\n<h2><a id=\"WePE_174\"></a>装机工具：WePE</h2>\n<p><a href=\"http://www.wepe.com.cn/download.html\" target=\"_blank\">下载地址</a></p>\n','\n@[toc](目录)\n\n# 软件推荐\n## 卸载软件的软件：geek\n[官网下载地址](https://geekuninstaller.com/)\n- 清理注册表，清理残留非常好\n## markdown编辑器：typora\n[下载地址](https://www.typora.io/) \n\n\n## 代码文本编辑器：Notepad++\n[官网下载地址](https://notepad-plus-plus.org/)\n## 绘图软件：drawio\n\n[在线版使用地址](https://app.diagrams.net/)\n[离线版下载地址](https://github.com/jgraph/drawio-desktop/releases)\n\n- 画流程图很好的软件\n- 不局限于流程图\n- 开源的  ProcessOn/迅捷绘图\n- 可以选择在线版和离线版\n- 底层基于JavaScript，可跨平台\n- github开源\n- 建议使用，新版的Edge安装为应用\n![1234](https://img-blog.csdnimg.cn/20200725092316859.png)\n\n\n\n## 录屏软件：Captura\n[官网下载地址](https://mathewsachin.github.io/Captura/)\n- 小，开源\n\n## 视频转码工具：handbrake\n[下载地址](https://handbrake.fr/downloads.php)\n- 跨平台\n\n## mkv格式快速转mp4\n- 如果你需要剪辑视频，pr又不支持mkv格式，这个软件可以帮你快速转换格式，3G的视频大概只需要5分钟\n[github项目地址](https://github.com/gavinbeatty/mkvtomp4)\n\n\n\n## PDF阅读器：SumatraPDF\n\n[下载地址](https://www.sumatrapdfreader.org/download-free-pdf-viewer.html)\n\n- 开源\n- 轻量（5-6M）\n- 反应快\n\n## 解压软件：7-zip\n[中文下载网站](https://sparanoid.com/lab/7z/)\n[官方下载网站](https://www.7-zip.org/)\n\n- 用过这个解压工具后再也没换过了\n- 开源，无广告，体积小，支持格式多\n![1](https://img-blog.csdnimg.cn/20200530082059266.png)\n## 截图工具：Snipaste\n[微软官网](https://www.microsoft.com/en-us/p/snipaste/9p1wxpkb68kx?cid=snipaste&activetab=pivot:overviewtab)\n\n- 体积小，快速\n- 被收录在微软商店里\n- 可以重微软商店中下载\n- 快捷键设置\n- 图片编辑方便\n- 和QQ的截屏工具类似\n![2344](https://img-blog.csdnimg.cn/20200530085247131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70)\n## 快速预览工具：QuickLook\n- MAC的空格预览替代品\n- 收录在微软商店中\n- 扩展功能访问Github\n\n[Github项目地址](https://github.com/QL-Win/QuickLook)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200530091351151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70)\n## 视频播放器：potplayer\n- 好看，小\n- 吊打其他播放器\n\n[官网下载地址](https://potplayer.en.softonic.com/)\n\n\n## 多线程下载工具：FDM/IDM\n**开源版-FDM**\n- 免费开源，多线程下载工具\n\n[官网下载网址](https://www.freedownloadmanager.org/zh/)\n![233](https://img-blog.csdnimg.cn/20200530084700542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70)\n\n**付费版-IDM**\n[官网下载网址](http://www.internetdownloadmanager.com/)\n\n- 可集成到浏览器等多种下载场景\n- 有试用时间，如果不愿意付费就使用上一个。\n\n## 清理工具：Dism++/CCleaner\n\n- 启动快，体积小，功能强大\n- 功能比较强大\n[官网下载地址](https://www.chuyu.me/zh-Hans/index.html) \n\n![45](https://img-blog.csdnimg.cn/20200530085627333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70)\n\n**CCleaner**\n[官网下载地址](https://www.ccleaner.com/)\n\n\n## 浏览器：Edge（chromium内核）\n\n**扩展脚本推荐：**\n1. Tampermonkey：油猴脚本，浏览器必备\n2. AdBlock ：最佳广告拦截工具\n3. 图片助手(ImageAssistant) 批量图片下载器\n4. eHelper(前端助手)\n5. GiteeTree\n6. JSON Beautifier & Editor\n7. Regex Search\n8. User Agents for Microsoft Edge\n\n\n**基于Edge的：网易云**\n- 最近才发现的，网页版应用\n- 可以把一个网页作为应用安装\n- 轻量，便捷\n- 不跳转页面的网址才好用\n![122](https://img-blog.csdnimg.cn/2020053009285548.png)\n## 远程控制软件：Team Viewer/快速助手\n**Team Viewer**\n[官网下载地址](https://www.teamviewer.cn/cn/)\n\n- 相比其他远程软件，这个个人版是免费的\n- 而且体验很好，快捷键画面都没得说，文件传输，角色切换都很方便\n![2](https://img-blog.csdnimg.cn/20200530083443436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70)\n**快速助手**\n- Windows自带远程协助工具，免安装\n- 体验还不错，但是角色切换不方便\n\n![12](https://img-blog.csdnimg.cn/20200530083827799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70)\n\n\n## 磁盘检测工具：SpaceSniffer\n[百度百科介绍](https://baike.baidu.com/item/SpaceSniffer/3498384?fr=aladdin)\n[官网下载工具](https://spacesniffer.en.softonic.com/)\n- 清理C盘必备\n![45](https://img-blog.csdnimg.cn/20200530084215833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70)\n\n\n## 启动项检测工具：Autoruns\n[百度百科介绍](https://baike.baidu.com/item/AutoRuns/8449010?fr=aladdin)\n\n[微软官方下载网址](https://docs.microsoft.com/zh-cn/sysinternals/downloads/autoruns)\n\n- 它能用于显示在 Windows启动或登录时自动运行的程序，并且允许用户有选择地禁用或删除它们\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200530082554942.png)\n\n## 网速显示工具：trafficmonitor\n- 开源，体积小\n\n\n[Github下载地址](https://github.com/zhongyang219/TrafficMonitor)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200530085912382.png)\n## 抓包工具：Fiddler\n[百度百科介绍](https://baike.baidu.com/item/Fiddler/2868968?fr=aladdin)\n[官网下载工具](https://www.telerik.com/fiddler)\n![23](https://img-blog.csdnimg.cn/20200530090133754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70)\n\n## 杀毒软件 ：火绒\n- 没有必要装\n\n1. 火绒\n[官网下载地址](https://www.huorong.cn/)\n\n\n## 装机工具：WePE\n[下载地址](http://www.wepe.com.cn/download.html)\n',2,'123456',0),(15,4,'2020-09-20 20:41:53','点集拓扑初探','讲了些最近刚学的点集拓扑学的基本概念','http://108lan.com:8001/images/2020/09/20/567af26bea1b4a39934e8ea18b88c1bc.jpg','<p><h3>目录</h3><ul><li><a href=\"#_1\">前言</a></li><li><a href=\"#_6\">拓扑</a></li><ul><li><a href=\"#def1_7\">def（定义）1</a></li></ul><li><a href=\"#_19\">点与点集</a></li><ul><li><a href=\"#def2_20\">def2</a></li><li><a href=\"#def3_31\">def3</a></li><li><a href=\"#def4_34\">def4</a></li><li><a href=\"#def5_39\">def5</a></li></ul><li><a href=\"#_42\">几种常见的拓扑空间</a></li><ul><li><a href=\"#_43\">距离空间</a></li><li><a href=\"#_47\">平庸拓扑空间</a></li><li><a href=\"#_49\">离散拓扑空间</a></li><li><a href=\"#_52\">余有限拓扑空间</a></li><li><a href=\"#_54\">余可数拓扑空间</a></li><li><a href=\"#_56\">余零度集空间</a></li></ul></ul></p>\n<h1><a id=\"_1\"></a>前言</h1>\n<p>选择点集拓扑的原因是我前几天从书架上随意抽了几本书，而点集拓扑是其中看起来最容易的。按照我个人的想法，点集拓扑作为一门连接数学分析和几何拓扑学（虽然我还没学）的桥梁学科，其内容是相对抽象的而繁琐的，由点类理论到空间类理论，对于只学过数分的同学（就是我）来说，无疑是打开了新世界的大门，从更高的层面来给出定义，而非仅局限于欧式空间。</p>\n<p>废话不多说，let’s go!</p>\n<h1><a id=\"_6\"></a>拓扑</h1>\n<h2><a id=\"def1_7\"></a>def（定义）1</h2>\n<p>如果非空集合X的子集族ζ={U<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span>X|U具有性质*}满足：<br />\n(1)<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ϕ</span></span></span></span>，X<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ<br />\n(2)<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">U_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">U_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ蕴含着<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">U_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">U_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ<br />\n(3)<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mi>α</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ蕴含<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋃</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcup</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋃</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mi>α</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi><mo>∈</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha\\in T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.0037em;\">α</span><span class=\"mrel\">∈</span><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">T</span></span></span></span>,T为指标集。<br />\n则称ζ为X上的一个<strong>拓扑</strong>，偶对（X,ζ）称为X上的一个<strong>拓扑空间</strong><br />\n称<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ为拓扑空间中的<strong>开集</strong><br />\n若<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>F</mi><mi>c</mi></msup></mrow><annotation encoding=\"application/x-tex\">F^c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">c</span></span></span></span></span></span></span></span></span></span></span>=X\\F<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ,则称F为该拓扑空间上的<strong>闭集</strong></p>\n<p>由（2）（3）看出可数个开集的交仍属于原拓扑，任意个开集的并也属于原拓扑。容易发现拓扑即为子集族，而拓扑空间则是全集与子集族的偶对（X,ζ）。用开集来定义拓扑空间是一件很自然的事情，如果要寻找一个有足够良好性质的空间来进行研究，肯定是要有空间的子集来满足开集的性质。当然，也可以用闭集族、闭包、邻域系（这两个定义在下面）来定义拓扑，其等价性证明在很多书上都可以找到，此处不作赘述。</p>\n<h1><a id=\"_19\"></a>点与点集</h1>\n<h2><a id=\"def2_20\"></a>def2</h2>\n<p>设A<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span>X,x<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>X,(X为全空间)，如果对x的任何开邻域（含x的开集）U必有</p>\n<div class=\"hljs-center\">\n<p>U<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span>(A-{x})=(U-{X})<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span>A<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>≠</mo></mrow><annotation encoding=\"application/x-tex\">\\neq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.716em;\"></span><span class=\"strut bottom\" style=\"height:0.9309999999999999em;vertical-align:-0.215em;\"></span><span class=\"base\"><span class=\"mrel\">≠</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ϕ</span></span></span></span></p>\n</div>\n<p>(即U中含A中任意异于x的点y),则称x为A的<strong>聚点</strong>，记A的聚点的全体为A’,称为<strong>导集</strong>，而<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mi>A</mi><mo>¯</mo></mover><mo>=</mo><msup><mi>A</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\bar A=A&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8201099999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8201099999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8201099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathit\">A</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"margin-left:0.27778em;\"><span>¯</span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span></span></span></span>,即为<strong>闭包</strong>。<br />\n若<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mi>A</mi><mo>¯</mo></mover><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">\\bar A=</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8201099999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8201099999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8201099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathit\">A</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"margin-left:0.27778em;\"><span>¯</span></span></span></span></span></span></span><span class=\"mrel\">=</span></span></span></span>A$，称A为X中的<strong>稠密集</strong>。</p>\n<h2><a id=\"def3_31\"></a>def3</h2>\n<p>称<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>N</mi><mi>x</mi><mi mathvariant=\"normal\">.</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">N_x^.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.93033em;vertical-align:-0.247em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.436892em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">x</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">.</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"></span></span></span></span></span></span></span></span>={U|U为x的开邻域}为点x<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>X的<strong>开邻域系</strong>。</p>\n<h2><a id=\"def4_34\"></a>def4</h2>\n<p>称<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>N</mi><mi>x</mi></msub></mrow><annotation encoding=\"application/x-tex\">N_x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>={V|<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"normal\">∃</mi></mrow></mrow><annotation encoding=\"application/x-tex\">{\\exists}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">∃</span></span></span></span></span>x的开邻域U,s.t.x<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>U<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span>V}为点x<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>X的<strong>邻域系</strong>。</p>\n<p>注意def4这中定义方式，用较小的集合来引出较大集合，实则是覆盖关系，将会在后面的笔记中多次接触。</p>\n<h2><a id=\"def5_39\"></a>def5</h2>\n<p>设（X,ζ）称为X上的一个拓扑空间，Y<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span>X为非空子集，记<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ζ</mi><mi>Y</mi></msub></mrow><annotation encoding=\"application/x-tex\">ζ_Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>={Y<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span>U|U<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ}为Y的子集族，可以证明<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ζ</mi><mi>Y</mi></msub></mrow><annotation encoding=\"application/x-tex\">ζ_Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>是Y上的一个拓扑，称为由<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ζ</mi></mrow><annotation encoding=\"application/x-tex\">ζ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span></span></span></span>诱导的<strong>拓扑</strong>或者<strong>子拓扑</strong>，（Y,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ζ</mi><mi>Y</mi></msub></mrow><annotation encoding=\"application/x-tex\">ζ_Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>）为（X,ζ）的<strong>诱导拓扑空间</strong>或者<strong>子拓扑空间</strong>。</p>\n<h1><a id=\"_42\"></a>几种常见的拓扑空间</h1>\n<h2><a id=\"_43\"></a>距离空间</h2>\n<p>我们熟悉的欧几里得空间则是一种特殊的距离空间。<br />\n此处定义的距离（度量）即为满足正定性，对称性，三角不等式的映射<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ρ</span></span></span></span>,称偶对（X,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ρ</span></span></span></span>）为X上的度量空间，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ρ</span></span></span></span>（x,y）为x,y间的距离。<br />\n称X是子集B(a;<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>)={x<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>X|<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ρ</span></span></span></span>(x,a)&lt;<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>}为以a为中心，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>为半径的开球，容易验证X的子集族为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ζ</mi><mi>ρ</mi></msub></mrow><annotation encoding=\"application/x-tex\">ζ_\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">ρ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span></span></span></span>={U|<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∀</mi></mrow><annotation encoding=\"application/x-tex\">\\forall</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathrm\">∀</span></span></span></span>a<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>U,存在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>δ</mi><mi>α</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\delta_\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>&gt;0，s.t.开球B(a;<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>δ</mi><mi>α</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\delta_\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>)<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span>U}为X上的一个拓扑，称为由<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ρ</span></span></span></span>诱导的拓扑。</p>\n<h2><a id=\"_47\"></a>平庸拓扑空间</h2>\n<p>设X为非空集合，ζ_平庸={<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ϕ</span></span></span></span>，X}为X上的拓扑，{X，ζ_平庸}为平庸拓扑空间。</p>\n<h2><a id=\"_49\"></a>离散拓扑空间</h2>\n<p>ζ_离散={U|U<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span>X},记作<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mi>X</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8413309999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span></span></span></span></span></span></span></span>,为X上的一个拓扑，称为离散拓扑，而{X，ζ_离散}为离散拓扑空间。<br />\n接下来的三种拓扑空间为举反例时经常要使用的拓扑空间，较为重要。</p>\n<h2><a id=\"_52\"></a>余有限拓扑空间</h2>\n<p>ζ_余有限={U|U=X\\C,C是X中有限子集}<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ϕ</span></span></span></span>为X上的一个拓扑，称为余有限拓扑，而{X，ζ_余有限}为余有限拓扑空间。</p>\n<h2><a id=\"_54\"></a>余可数拓扑空间</h2>\n<p>ζ_余可数={U|U=X\\C,C是X中可数子集}<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ϕ</span></span></span></span>为X上的一个拓扑，称为余可数拓扑，而{X，ζ_余可数}为余可数拓扑空间。</p>\n<h2><a id=\"_56\"></a>余零度集空间</h2>\n<p>N为自然数集，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ζ</mi><mi>N</mi></msub></mrow><annotation encoding=\"application/x-tex\">ζ_N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>=<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ϕ</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span>{U|U=N\\C},C满足<img src=\"http://108lan.com:8001/images/2020/09/20/fec0c9ed7eac42b08342c2b77cd4c946.png\" alt=\"``XD6UCTIVWL9681.png\" /><br />\n（称C为零密度集，#表示取集合中的个数）<br />\n为X上的一个拓扑。</p>\n','  @[toc](目录)\n# 前言\n选择点集拓扑的原因是我前几天从书架上随意抽了几本书，而点集拓扑是其中看起来最容易的。按照我个人的想法，点集拓扑作为一门连接数学分析和几何拓扑学（虽然我还没学）的桥梁学科，其内容是相对抽象的而繁琐的，由点类理论到空间类理论，对于只学过数分的同学（就是我）来说，无疑是打开了新世界的大门，从更高的层面来给出定义，而非仅局限于欧式空间。\n\n  废话不多说，let\'s go!\n\n# 拓扑\n## def（定义）1\n  如果非空集合X的子集族ζ={U$\\subset$X|U具有性质*}满足：\n  (1)$\\phi$，X$\\in$ζ\n   (2)$U_1$,$U_2$$\\in$ζ蕴含着$U_1$$\\bigcap$$U_2$$\\in$ζ\n   (3)$U_\\alpha$$\\in$ζ蕴含$\\bigcup$$U_\\alpha$$\\in$ζ,$\\alpha\\in T$,T为指标集。\n则称ζ为X上的一个**拓扑**，偶对（X,ζ）称为X上的一个**拓扑空间**\n称$U$$\\in$ζ为拓扑空间中的**开集**\n若$F^c$=X\\F$\\in$ζ,则称F为该拓扑空间上的**闭集**\n  \n由（2）（3）看出可数个开集的交仍属于原拓扑，任意个开集的并也属于原拓扑。容易发现拓扑即为子集族，而拓扑空间则是全集与子集族的偶对（X,ζ）。用开集来定义拓扑空间是一件很自然的事情，如果要寻找一个有足够良好性质的空间来进行研究，肯定是要有空间的子集来满足开集的性质。当然，也可以用闭集族、闭包、邻域系（这两个定义在下面）来定义拓扑，其等价性证明在很多书上都可以找到，此处不作赘述。\n\n\n# 点与点集\n## def2\n设A$\\subset$X,x$\\in$X,(X为全空间)，如果对x的任何开邻域（含x的开集）U必有\n::: hljs-center\n\n U$\\bigcap$(A-{x})=(U-{X})$\\bigcap$A$\\neq$$\\phi$\n\n\n:::\n(即U中含A中任意异于x的点y),则称x为A的**聚点**，记A的聚点的全体为A\',称为**导集**，而$\\bar A=A\'$$\\bigcap$$A$,即为**闭包**。\n若$\\bar A=$A$，称A为X中的**稠密集**。\n\n## def3\n称$N_x^.$={U|U为x的开邻域}为点x$\\in$X的**开邻域系**。\n\n## def4\n称$N_x$={V|${\\exists}$x的开邻域U,s.t.x$\\in$U$\\subset$V}为点x$\\in$X的**邻域系**。\n\n注意def4这中定义方式，用较小的集合来引出较大集合，实则是覆盖关系，将会在后面的笔记中多次接触。\n\n## def5\n设（X,ζ）称为X上的一个拓扑空间，Y$\\subset$X为非空子集，记\n$ζ_Y$={Y$\\bigcap$U|U$\\in$ζ}为Y的子集族，可以证明$ζ_Y$是Y上的一个拓扑，称为由$ζ$诱导的**拓扑**或者**子拓扑**，（Y,$ζ_Y$）为（X,ζ）的**诱导拓扑空间**或者**子拓扑空间**。\n# 几种常见的拓扑空间\n## 距离空间\n   我们熟悉的欧几里得空间则是一种特殊的距离空间。\n   此处定义的距离（度量）即为满足正定性，对称性，三角不等式的映射$\\rho$,称偶对（X,$\\rho$）为X上的度量空间，$\\rho$（x,y）为x,y间的距离。\n  称X是子集B(a;$\\delta$)={x$\\in$X|$\\rho$(x,a)<$\\delta$}为以a为中心，$\\delta$为半径的开球，容易验证X的子集族为$ζ_\\rho$={U|$\\forall$a$\\in$U,存在$\\delta_\\alpha$>0，s.t.开球B(a;$\\delta_\\alpha$)$\\subset$U}为X上的一个拓扑，称为由$\\rho$诱导的拓扑。\n## 平庸拓扑空间\n设X为非空集合，$ζ_平庸$={$\\phi$，X}为X上的拓扑，{X，$ζ_平庸$}为平庸拓扑空间。\n## 离散拓扑空间\n$ζ_离散$={U|U$\\subset$X},记作$2^X$,为X上的一个拓扑，称为离散拓扑，而{X，$ζ_离散$}为离散拓扑空间。\n接下来的三种拓扑空间为举反例时经常要使用的拓扑空间，较为重要。\n## 余有限拓扑空间\n$ζ_余有限$={U|U=X\\C,C是X中有限子集}$\\bigcap$$\\phi$为X上的一个拓扑，称为余有限拓扑，而{X，$ζ_余有限$}为余有限拓扑空间。\n## 余可数拓扑空间\n$ζ_余可数$={U|U=X\\C,C是X中可数子集}$\\bigcap$$\\phi$为X上的一个拓扑，称为余可数拓扑，而{X，$ζ_余可数$}为余可数拓扑空间。\n## 余零度集空间\nN为自然数集，$ζ_N$=$\\phi$$\\bigcap${U|U=N\\C},C满足![``XD6UCTIVWL9681.png](http://108lan.com:8001/images/2020/09/20/fec0c9ed7eac42b08342c2b77cd4c946.png)\n（称C为零密度集，#表示取集合中的个数）\n为X上的一个拓扑。',3,'123456',0),(16,5,'2020-09-23 22:21:58','初识汇编','学习汇编记录','http://108lan.com:8001/images/2020/09/23/9e314ba563dd4d0fb42c550dccbea7fd.png','<p><h3>文章目录</h3><ul><li><a href=\"#_2\">汇编</a></li><ul><li><a href=\"#_4\">计算机语言</a></li><li><a href=\"#_22\">数据宽度</a></li><li><a href=\"#_42\">位运算</a></li><li><a href=\"#_98\">汇编</a></li><ul><li><a href=\"#_102\">寄存器</a></li><li><a href=\"#_117\">内存</a></li></ul></ul></ul></p>\n<h1><a id=\"_2\"></a>汇编</h1>\n<h2><a id=\"_4\"></a>计算机语言</h2>\n<ul>\n<li>计算机是个傻子，只认识0和1，它没有思考，只是按照我们输入的01跑</li>\n<li>最早的编程人员，用着穿孔卡带和计算机交流。</li>\n<li>一串一串的01，让我们怎么也记不住。</li>\n<li>助记符的产生，是那么的合理。</li>\n<li>这些助记符就是汇编语言了，一般用于底层，单片机的编写</li>\n</ul>\n<blockquote>\n<p>加：INC<br />\n减：DEC<br />\n乘：MUL<br />\n除：DIV</p>\n</blockquote>\n<p>加密程序：使用自己定义的进制：进制的加密<br />\n无论什么进制，本身都是有一套完美的运算体系，我们都可以通过列表的方式将他们计算出来<br />\n寄存器、内存、位！底层的每一位都有含义。</p>\n<h2><a id=\"_22\"></a>数据宽度</h2>\n<p>计算机：内存！给数据增加宽度</p>\n<ul>\n<li>bit：1位</li>\n<li>Byte：8位</li>\n<li>Word：16位</li>\n<li>DWord：32位</li>\n</ul>\n<p>C、C++、java都需要定义数据类型，计算机底层需要我们给这些数据定义宽度</p>\n<ul>\n<li>位 ：0 1</li>\n<li>字节：0-0xff</li>\n<li>字：0-0xffff</li>\n<li>双字：0-0xffffffff</li>\n</ul>\n<p>在计算机中，每一个数据都要定义类型，给它定义宽度，在内存中的宽度</p>\n<ul>\n<li>无符号数：都是数</li>\n<li>有符号数：最高位是符号位1（负数）、0（正数）</li>\n</ul>\n<h2><a id=\"_42\"></a>位运算</h2>\n<p>计算机可以存储所有的数字</p>\n<ol>\n<li>与（and，&amp;）：同为1才为1</li>\n<li>或（or，|）：有一个1取1</li>\n<li>非（not，!）：取反，单目运算符</li>\n<li>异或（xor，^）：不相同则为1</li>\n<li>左移（shl，&lt;&lt;）：高位丢弃，所有位左移</li>\n<li>右移（shr，&gt;&gt;）：地位丢弃，高位根据符号位补相同位</li>\n</ol>\n<p><mark>位运算实现加减乘除</mark><br />\n基本数学都是建立在加减乘除上</p>\n<ul>\n<li>计算机内部计算加法的过程</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">4+5=?\n\n0000 0100\n0000 0101 \n----------(加法，计算机不会加法)\n0000 1001\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 计算机只会与或非异或，把加法转换为位运算</span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 第一步：异或运算（如果不考虑进位，这里就实现了）</span>\n0000 0100\n0000 0101 \n----------（异或）\n0000 0001\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 第二步：与运算（判断进位，有进位则为1）</span>\n0000 0100\n0000 0101 \n-----------（与）\n0000 0100\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 第三步：进位左移（将进位数字与对应位对齐）</span>\n0000 0100\n-----------（左移）\n0000 1000\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 第四步：异或（将进位数字与加法数字异或得到结果）</span>\n0000 0001\n0000 1000\n-----------（异或）\n0000 1001\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 第五步：与运算（判断加进位后有没有再进位）</span>\n0000 0001\n0000 1000\n----------（与）\n0000 0000\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 如果不为0重复上述过程，最终结果为与运算为0的结果</span>\n</code></div></pre>\n<h2><a id=\"_98\"></a>汇编</h2>\n<ul>\n<li>OD界面：<br />\n<img src=\"https://img-blog.csdnimg.cn/20200920143219782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></li>\n</ul>\n<h3><a id=\"_102\"></a>寄存器</h3>\n<p>储存数据：CPU&gt;内存&gt;硬盘</p>\n<p><mark>通用寄存器</mark> ：可以存储任何的值</p>\n<ul>\n<li>32位的通用寄存器只有8个</li>\n<li>存值范围：0-FFFFFFFF</li>\n<li>计算机向寄存器中存值：对于二进制来说，直接存值，汇编中用mov指令（mov 地址 数据/地址）</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200920143702201.png#pic_center\" alt=\"1212\" /></p>\n<ul>\n<li>寄存器在不同位数计算机中对应的名称</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/2020092014472324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></p>\n<h3><a id=\"_117\"></a>内存</h3>\n<ul>\n<li>寄存器很小，不够用。所以数据要放到内存</li>\n<li>每个进程都有4G的内存空间</li>\n<li>程序真正运行的时候才会用到物理内存</li>\n</ul>\n<p>1B = 8bit<br />\n1kB = 1024B<br />\n1MB = 1024kB<br />\n1G = 1024MB</p>\n<p>计算机中内存地址很多，空间很大。</p>\n<p>== 内存地址==：</p>\n<ul>\n<li>给每个空间分配一个地址</li>\n<li>32位是8个16进制的值</li>\n<li>32位寻址能力是4G</li>\n</ul>\n<p>内存地址：<br />\n<img src=\"https://img-blog.csdnimg.cn/20200920150108448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"121\" /></p>\n<ul>\n<li>往内存中写东西：不是任意地址都可以写东西，要申请使用，只有程序申请过的内存地址我们才能使用</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 使用汇编忘内存中写入数据</span>\nmov 数据宽度 内存地址,数据\nmov byte/word/dword/qword ptr ds:[0019FF74],1\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> ptr ds:[0019FF74]：内存地址的一种固定写法</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 传递的值达大小一定要和数据宽度相等</span>\n</code></div></pre>\n<p>内存地址有很多写法：</p>\n<ul>\n<li>ds:[0019FF74]：直接写地址</li>\n<li>ds:[0019FF74+4]：内存地址偏移</li>\n<li>ds:[eax]：写寄存器地址</li>\n<li>ds:[eax+4]：寄存器偏移</li>\n<li>数组[]：\n<ul>\n<li>ds:p[reg+reg*{1,2,4,8}]</li>\n<li>ds:p[reg+reg*{1,2,4,8}+4]：偏移</li>\n</ul>\n</li>\n</ul>\n','@[toc](文章目录)\n\n# 汇编\n\n## 计算机语言\n\n- 计算机是个傻子，只认识0和1，它没有思考，只是按照我们输入的01跑\n- 最早的编程人员，用着穿孔卡带和计算机交流。\n- 一串一串的01，让我们怎么也记不住。\n- 助记符的产生，是那么的合理。\n- 这些助记符就是汇编语言了，一般用于底层，单片机的编写\n\n> 加：INC \n> 减：DEC\n> 乘：MUL\n> 除：DIV\n\n加密程序：使用自己定义的进制：进制的加密\n无论什么进制，本身都是有一套完美的运算体系，我们都可以通过列表的方式将他们计算出来\n寄存器、内存、位！底层的每一位都有含义。\n\n\n## 数据宽度\n计算机：内存！给数据增加宽度\n- bit：1位\n- Byte：8位\n- Word：16位\n- DWord：32位\n\nC、C++、java都需要定义数据类型，计算机底层需要我们给这些数据定义宽度\n\n- 位 ：0 1\n- 字节：0-0xff\n- 字：0-0xffff\n- 双字：0-0xffffffff\n\n在计算机中，每一个数据都要定义类型，给它定义宽度，在内存中的宽度\n\n- 无符号数：都是数\n- 有符号数：最高位是符号位1（负数）、0（正数）\n\n\n## 位运算\n计算机可以存储所有的数字\n\n1. 与（and，&）：同为1才为1\n2. 或（or，|）：有一个1取1\n3. 非（not，!）：取反，单目运算符\n4. 异或（xor，^）：不相同则为1\n5. 左移（shl，<<）：高位丢弃，所有位左移\n6. 右移（shr，>>）：地位丢弃，高位根据符号位补相同位\n\n==位运算实现加减乘除==\n基本数学都是建立在加减乘除上\n- 计算机内部计算加法的过程\n\n```shell\n4+5=?\n\n0000 0100\n0000 0101 \n----------(加法，计算机不会加法)\n0000 1001\n\n# 计算机只会与或非异或，把加法转换为位运算\n\n# 第一步：异或运算（如果不考虑进位，这里就实现了）\n0000 0100\n0000 0101 \n----------（异或）\n0000 0001\n\n# 第二步：与运算（判断进位，有进位则为1）\n0000 0100\n0000 0101 \n-----------（与）\n0000 0100\n\n# 第三步：进位左移（将进位数字与对应位对齐）\n0000 0100\n-----------（左移）\n0000 1000\n\n# 第四步：异或（将进位数字与加法数字异或得到结果）\n0000 0001\n0000 1000\n-----------（异或）\n0000 1001\n\n# 第五步：与运算（判断加进位后有没有再进位）\n0000 0001\n0000 1000\n----------（与）\n0000 0000\n\n# 如果不为0重复上述过程，最终结果为与运算为0的结果\n```\n\n## 汇编\n- OD界面：\n![12121](https://img-blog.csdnimg.cn/20200920143219782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n### 寄存器\n储存数据：CPU>内存>硬盘\n\n==通用寄存器== ：可以存储任何的值\n\n- 32位的通用寄存器只有8个\n- 存值范围：0-FFFFFFFF\n- 计算机向寄存器中存值：对于二进制来说，直接存值，汇编中用mov指令（mov 地址 数据/地址）\n\n![1212](https://img-blog.csdnimg.cn/20200920143702201.png#pic_center)\n\n- 寄存器在不同位数计算机中对应的名称\n\n![12121](https://img-blog.csdnimg.cn/2020092014472324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n### 内存\n\n- 寄存器很小，不够用。所以数据要放到内存\n- 每个进程都有4G的内存空间\n- 程序真正运行的时候才会用到物理内存\n\n\n1B = 8bit\n1kB = 1024B\n1MB = 1024kB\n1G = 1024MB\n\n计算机中内存地址很多，空间很大。\n\n== 内存地址==：\n- 给每个空间分配一个地址\n- 32位是8个16进制的值\n- 32位寻址能力是4G\n\n内存地址：\n![121](https://img-blog.csdnimg.cn/20200920150108448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n- 往内存中写东西：不是任意地址都可以写东西，要申请使用，只有程序申请过的内存地址我们才能使用\n\n~~~shell\n# 使用汇编忘内存中写入数据\nmov 数据宽度 内存地址,数据\nmov byte/word/dword/qword ptr ds:[0019FF74],1\n# ptr ds:[0019FF74]：内存地址的一种固定写法\n# 传递的值达大小一定要和数据宽度相等\n~~~\n\n内存地址有很多写法：\n- ds:[0019FF74]：直接写地址\n- ds:[0019FF74+4]：内存地址偏移\n- ds:[eax]：写寄存器地址\n- ds:[eax+4]：寄存器偏移\n- 数组[]：\n  - ds:p[reg+reg*{1,2,4,8}]\n  - ds:p[reg+reg*{1,2,4,8}+4]：偏移\n\n\n\n',2,'123456',0),(17,5,'2020-10-02 17:09:40','再识汇编','深入学习汇编语言','http://108lan.com:8001/images/2020/10/02/24c93c6221f04b2e806481a0d27f9ea6.png','<p><h3>目录</h3><ul><li><a href=\"#_1\">汇编</a></li><ul><li><a href=\"#_3\">绪论</a></li><ul><li><a href=\"#1__10\">1. 汇编语言的执行过程</a></li><li><a href=\"#2__12\">2. 计算机组成</a></li><li><a href=\"#3__18\">3. 指令和数据的表示</a></li><li><a href=\"#4__26\">4. 计算机中的储存单元</a></li><li><a href=\"#5__30\">5. 计算机中的总线</a></li><li><a href=\"#6_X86_40\">6. X86性能</a></li><li><a href=\"#7_CPU_44\">7. CPU对储存器的读写</a></li><li><a href=\"#8__51\">8. 内存地址空间</a></li><li><a href=\"#9_Dos_58\">9. 搭建汇编语言实践环境（Dos模拟器）</a></li></ul><li><a href=\"#_68\">访问寄存器和内存</a></li><ul><li><a href=\"#1_CPU_69\">1. CPU的组成</a></li><li><a href=\"#2_CPU_77\">2. 寄存器是CPU的内部信息存储单元</a></li><li><a href=\"#3_AXBXCXDX_81\">3. 通用寄存器：AX，BX，CX，DX</a></li><li><a href=\"#4_80868_89\">4. 8086上一代的寄存器是8位的</a></li><li><a href=\"#5_movadd_100\">5. mov和add指令</a></li><li><a href=\"#6__105\">6. 确定物理地址</a></li><li><a href=\"#7_CPU_119\">7. 内存的分段表示法：内存并没有分段，段的划分来自于CPU</a></li><li><a href=\"#8_DebugDOS_126\">8. Debug：DOS系统中著名的调试程序</a></li><li><a href=\"#9_CSIP_161\">9. CS/IP两个关键的寄存器</a></li><li><a href=\"#10_jmp_167\">10. jmp指令</a></li><li><a href=\"#11_DSaddress_175\">11. 段寄存器DS和[address]实现字的传送</a></li><li><a href=\"#12__202\">12. 栈及其栈操作</a></li><li><a href=\"#13__231\">13. 段总结</a></li></ul><li><a href=\"#_238\">汇编语言程序</a></li><ul><li><a href=\"#1__240\">1. 汇编语言编写源程序</a></li><li><a href=\"#2__261\">2. 编写第一个程序</a></li><li><a href=\"#3__285\">3. 源程序到程序运行</a></li><li><a href=\"#4_debug_301\">4. 使用debug跟踪程序的执行</a></li><li><a href=\"#5__308\">5. [...]与(...)的约定</a></li><li><a href=\"#6_Loop_317\">6. Loop指令</a></li><li><a href=\"#7__329\">7. 将数据、代码、栈放入不同段</a></li></ul><li><a href=\"#_376\">内存寻址方式</a></li><ul><li><a href=\"#1__379\">1. 处理字符串</a></li><li><a href=\"#2_bxidata_430\">2. [bx+idata]方式寻址</a></li><li><a href=\"#3_SIDI_445\">3. SI和DI寄存器（变址寄存器）</a></li><li><a href=\"#4_bxsibxdi_480\">4. [bx+si]和[bx+di]方式寻址</a></li><li><a href=\"#5_dup_492\">5. 用dup设置内存空间</a></li></ul><li><a href=\"#_500\">流程转移与子程序</a></li><ul><li><a href=\"#1_offset_501\">1. 操作符offset</a></li><li><a href=\"#2_jmp_526\">2. jmp指令</a></li><li><a href=\"#3_callret_595\">3. call指令和ret指令</a></li><li><a href=\"#4_DF_646\">4. DF标志和段传送指令</a></li></ul><li><a href=\"#_744\">中断及外部设备的操作</a></li><ul><li><a href=\"#1__745\">1. 移位指令</a></li><li><a href=\"#2__758\">2. 操作显示原理</a></li><li><a href=\"#3__804\">3. 描述内存单元的标号</a></li><li><a href=\"#4__811\">4. 直接定址表</a></li></ul><li><a href=\"#_816\">高级汇编语言技术（宏汇编）</a></li><ul><li><a href=\"#1__819\">1. 子程序的另一种写法</a></li><li><a href=\"#2__828\">2. 程序的多文件组织</a></li><li><a href=\"#3__839\">3. 汇编指令汇总</a></li><li><a href=\"#4__883\">4. 汇编伪操作汇总</a></li><li><a href=\"#5__918\">5. 汇编操作符汇总</a></li><li><a href=\"#6__928\">6. 汇编过程</a></li></ul></ul></ul></p>\n<h1><a id=\"_1\"></a>汇编</h1>\n<h2><a id=\"_3\"></a>绪论</h2>\n<ul>\n<li>程序语言的老祖宗</li>\n<li>汇编语言的效率无可替代</li>\n<li>用于底层：计算机及周围设备的驱动程序</li>\n<li>汇编语言的主体是汇编指令（助记符）</li>\n</ul>\n<h3><a id=\"1__10\"></a>1. 汇编语言的执行过程</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20200925145558594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"121212\" /></p>\n<h3><a id=\"2__12\"></a>2. 计算机组成</h3>\n<ul>\n<li>CPU：</li>\n<li>总线</li>\n<li>内存</li>\n<li>扩展槽（连接外部设备）</li>\n</ul>\n<h3><a id=\"3__18\"></a>3. 指令和数据的表示</h3>\n<ul>\n<li>计算机中的数据和指令，储存在内存或磁盘中</li>\n<li>数据和指令都是二进制信息</li>\n<li>数据的表示：二进制B、十六进制H、八进制O、十进制D</li>\n<li>数据量：B、KB、MB、GB、TB</li>\n</ul>\n<h3><a id=\"4__26\"></a>4. 计算机中的储存单元</h3>\n<ul>\n<li>存储器被划分为若干个存储单元，每个存储单元从0开始顺序编码</li>\n</ul>\n<h3><a id=\"5__30\"></a>5. 计算机中的总线</h3>\n<ul>\n<li>计算机中专门连接CPU和其他芯片的导线，通常成为总线</li>\n<li>物理上：一根根导线的集合</li>\n<li>逻辑上：\n<ul>\n<li>地址总线：CPU通过地址总线来指定储存单元，宽度决定可寻址的储存单元的大小（N根总线宽度为N，寻址空间为2^N）</li>\n<li>数据总线：CPU通过内存或其他器件之间数据传输是通过数据总线实现的，宽度觉得速度</li>\n<li>控制总线：CPU通过控制总线对外部器件进行控制，宽度决定对外部器件的控制能力</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"6_X86_40\"></a>6. X86性能</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20200925151208147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></p>\n<h3><a id=\"7_CPU_44\"></a>7. CPU对储存器的读写</h3>\n<p>CPU想要进行数据读写，必须要和外部器件进行三类信息的数据交换</p>\n<ul>\n<li>存储单元的地址（地址信息）</li>\n<li>器件的选择，读或写命令（控制信息）</li>\n<li>读或写的数据（数据信息）</li>\n</ul>\n<h3><a id=\"8__51\"></a>8. 内存地址空间</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20200925152038225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"1212121\" /></p>\n<ul>\n<li>把各类储存器看作一个逻辑存储–统一编址</li>\n<li>所有的物理存储器被看作一个由若干存储单元组成的逻辑存储器</li>\n<li>每个物理储存器在这个逻辑储存器中占有一个地址段<br />\n<img src=\"https://img-blog.csdnimg.cn/20200925152608578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"1212\" /></li>\n</ul>\n<h3><a id=\"9_Dos_58\"></a>9. 搭建汇编语言实践环境（Dos模拟器）</h3>\n<ul>\n<li>DOSBox：下载地址</li>\n</ul>\n<p>百度网盘 ：<a href=\"https://pan.baidu.com/s/17cOEc9MU2N7xrF8W43JeJA\" target=\"_blank\">https://pan.baidu.com/s/17cOEc9MU2N7xrF8W43JeJA</a><br />\n提取码 ：m06f</p>\n<h2><a id=\"_68\"></a>访问寄存器和内存</h2>\n<h3><a id=\"1_CPU_69\"></a>1. CPU的组成</h3>\n<ul>\n<li>运算器进行信息处理</li>\n<li>寄存器进行信息存储</li>\n<li>控制器协调各种器件进行工作</li>\n<li>内部总线协调各种器件之间的联系</li>\n</ul>\n<h3><a id=\"2_CPU_77\"></a>2. 寄存器是CPU的内部信息存储单元</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/2020092615221749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></p>\n<h3><a id=\"3_AXBXCXDX_81\"></a>3. 通用寄存器：AX，BX，CX，DX</h3>\n<ul>\n<li>一个16位寄存器储存一个16位的数据</li>\n<li>最大值2<sup>16</sup>-1（FFFF）</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/202009261525208.png#pic_center\" alt=\"1212\" /></p>\n<h3><a id=\"4_80868_89\"></a>4. 8086上一代的寄存器是8位的</h3>\n<ul>\n<li>通用寄存器可以分为两个独立的8八位寄存器独立使用</li>\n<li>AX分为AH，AL</li>\n<li>B分分为BH，BL</li>\n<li>CX分为CH，CL</li>\n<li>DX分为DH，DL</li>\n<li>这样可以保证程序的兼容性</li>\n<li>8086是16位CPU，8086的字长是16位</li>\n<li>一个字的高位存在高八位寄存器中，地位存在低八位寄存器中</li>\n</ul>\n<h3><a id=\"5_movadd_100\"></a>5. mov和add指令</h3>\n<p>mov ax bx：把bx的值赋值到ax<br />\nadd ax bx：把bx和ax加起来，结果存到ax中</p>\n<h3><a id=\"6__105\"></a>6. 确定物理地址</h3>\n<ul>\n<li>CPU访问内存单元时要给出内存单元的地址</li>\n<li>所有的内存单元构成的存储空间是一个一维的线性空间，每一个内存单元在这个空间中都有唯一的地址，这个唯一的地址叫物理地址</li>\n<li>8086有20位地址总线，可传送20位地址，寻址能力是1M</li>\n<li>8086是16位结构的CPU，运算器最多可以处理16位的数据寻址能力只有64KB</li>\n<li>8086CPU用两个16位地址（段地址、偏移地址）合成一个20位的物理地址</li>\n<li>物理地址 = 段地址（16位）x16（左移4位） +偏移地址\n<ul>\n<li>得到一个20位的地址，可以访问内存的1M的空间了</li>\n<li>CPU在访问时，用一个基础地址（段地址x16）和一个相对于基础地址的偏移地址相加，给出内存单元的物理地址</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200926155752261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"121213\" /></p>\n<h3><a id=\"7_CPU_119\"></a>7. 内存的分段表示法：内存并没有分段，段的划分来自于CPU</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20200926163144144.png#pic_center\" alt=\"12121\" /></p>\n<ul>\n<li>不同的段地址和偏移地址可以形成同一地址</li>\n<li>段地址很重要，用专门的寄存器存放段地址</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200926163555600.png#pic_center\" alt=\"1212\" /></p>\n<h3><a id=\"8_DebugDOS_126\"></a>8. Debug：DOS系统中著名的调试程序</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20200926163837154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></p>\n<ul>\n<li>可以查看CPU各种寄存器中的内容、内存的情况，并且在机器指令级跟踪程序的运行</li>\n</ul>\n<p><mark>R查看寄存器指令</mark></p>\n<ul>\n<li>R	- 查看寄存器的内容</li>\n<li>R 寄存器名	- 改变指定寄存器内容</li>\n</ul>\n<p><mark>D查看内存指令</mark></p>\n<ul>\n<li>D	- 列出预设地址内存处的128个字节的内容</li>\n<li>D 段地址：偏移地址	- 列出内存中指定地址处的内容</li>\n<li>D 段地址：偏移地址 结尾偏移地址	- 列出内存中指定地址范围的内容</li>\n</ul>\n<p><mark>E修改内存数据指令</mark></p>\n<ul>\n<li>E 段地址：偏移地址 数据1 数据2	- 改变内存中的内容</li>\n<li>E 段地址：偏移地址	- 逐个询问式修改，空格接受，回车结束</li>\n</ul>\n<p><mark>U将内存中的机器指令翻译成汇编指令</mark></p>\n<ul>\n<li>u 地址	- 查看代码</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200926170159615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12123\" /><br />\n<mark>用A命令以汇编指令的格式在内存中写入机器指令</mark></p>\n<ul>\n<li>a 地址 	- 写入汇编指令</li>\n</ul>\n<p><mark>用T命令执行机器指令</mark></p>\n<ul>\n<li>t -执行CS:IP处的指令</li>\n</ul>\n<p><mark>Q推出debug</mark></p>\n<h3><a id=\"9_CSIP_161\"></a>9. CS/IP两个关键的寄存器</h3>\n<ul>\n<li>CS：代码段寄存器</li>\n<li>IP：指令指针寄存器</li>\n<li>CS/IP：CPU将内存中CS：IP指向的内容当作指令来执行</li>\n</ul>\n<h3><a id=\"10_jmp_167\"></a>10. jmp指令</h3>\n<ul>\n<li>执行何处的指令取决于CS：IP</li>\n<li>可以通过CS：IP中的内容来控制CPU要执行的目标指令</li>\n<li>debug中r指令可以改变寄存器中的值rCS rip</li>\n<li>不能用moc cs 123 这种方法</li>\n<li>使用转移指令jmp：<mark>jmp CS：IP</mark>，用指令中给出的段地址修改CS，偏移地址修改IP</li>\n</ul>\n<h3><a id=\"11_DSaddress_175\"></a>11. 段寄存器DS和[address]实现字的传送</h3>\n<ul>\n<li>字单元：由两个地址连续的内存单元组成，存放一个字型数据（16位）</li>\n<li>在一个字单元中，低地址单元存放低位字节，高地址单元存放高位字节</li>\n</ul>\n<p>CPU要读取一个内存单元的时候，必须先给出这个内存单元的地址</p>\n<ul>\n<li>DS个[address]配合使用：\n<ul>\n<li>用寄存器DS存放要访问的段地址</li>\n<li>偏移地址用[…]的形式给出</li>\n</ul>\n</li>\n<li>8086不支持将数据直接放入段寄存器中的：数据–》一般寄存器–》段寄存器</li>\n</ul>\n<p><mark>DS与数据段</mark></p>\n<ul>\n<li>可以根据需要将一组内存单元定义位一个段\n<ul>\n<li>物理地址 = 段地址x16+偏移地址</li>\n<li>将一组长度为N（N&lt;64K）、地址连续、起始位置为16的倍数的内存单元当作专门存储数据的内存空间，从而定义一个数据段</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/2020092709292072.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></p>\n<ul>\n<li>字在内存中存放时，要用连个连续的内存单元来存放，字的地位字节存放在地位单元中，高位字节存放在高位地址单元中</li>\n<li>用mov指令要访问内存单元，可以在mov指令中只给出单元的偏移地址，段地址默认在DS寄存器中</li>\n<li>[address]表示一个偏移地址为address的内存单元</li>\n<li>在内存和寄存器之间传送字型数据时，高地址单元和高八位寄存器，低地址单元和低8位寄存器相对应</li>\n<li>mov、add、sub是具有两个操作对象的指令，访问内存中的数据段</li>\n<li>jmp具有一个操作对象的指令，对应内存中的代码段</li>\n<li>可以根据自己的推测，在Debug中实验指令的新格式</li>\n</ul>\n<h3><a id=\"12__202\"></a>12. 栈及其栈操作</h3>\n<ul>\n<li>只能在一段插入或删除操作的数据结构\n<ul>\n<li>入栈：将一个新的元素放到栈顶</li>\n<li>出栈：从栈顶取出一个元素</li>\n</ul>\n</li>\n<li>规则：后入先出LIFO（last in first out）</li>\n<li>CPU提供栈机制：如今的CPU都有栈的设计</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200927094609140.png#pic_center\" alt=\"1212121\" /></p>\n<ul>\n<li>8086中有两个与栈相关的寄存器：\n<ul>\n<li>栈段寄存器SS：存放栈顶的段地址</li>\n<li>栈顶指针寄存器SP：存放栈顶的偏移地址</li>\n<li>任意时刻，SS:SP指向栈顶元素</li>\n<li>push指令执行步骤：\n<ul>\n<li>SP=SP-2</li>\n<li>向SS:SP指向的字单元中传入数据</li>\n</ul>\n</li>\n<li>pop指令执行步骤：\n<ul>\n<li>从SS:SP指向的字单元中读取数据</li>\n<li>SP = SP - 2</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200927100455746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></p>\n<ul>\n<li>8086CPU不保证对栈的操作不会越界</li>\n<li>编程时要小心栈顶越界的问题</li>\n<li>push、pop实质上就是一种内存传送指令，可以在寄存器和内存之间传送数据，与mov指令不同的是，push和pop指令访问的内存单元的地址不是在指令中给出的而是SS:SP指出的</li>\n<li>执行push和pop指令时，SP中的内容自动改变</li>\n</ul>\n<h3><a id=\"13__231\"></a>13. 段总结</h3>\n<ul>\n<li>物理地址=段地址x16+偏移地址</li>\n<li>编程时，可以根据需要将一组内存单元定义为一个段</li>\n<li>可以将起始位置为16的倍数，长度为N（N&lt;64K）的一组地址连续的内存单元定义为一个段</li>\n<li>将一段内存定义为一个段，用一个段地址指示段，用偏移地址访问段内的单元</li>\n</ul>\n<h2><a id=\"_238\"></a>汇编语言程序</h2>\n<h3><a id=\"1__240\"></a>1. 汇编语言编写源程序</h3>\n<ul>\n<li>汇编程序：包含汇编程序和伪指令的文本</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/2020092710311341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"121212\" /><br />\n<mark>程序中的三种伪指令</mark></p>\n<ul>\n<li>\n<p>段定义</p>\n<ul>\n<li>一个汇编程序是由多个段组成，这些段用来存放代码、数据、或当作栈空间来使用</li>\n<li>一个有意义的汇编程序中至少有一个段，这个段用来存放代码</li>\n<li>定义程序中的段：每个段都需要有段名\n<ul>\n<li>段名 segment	– 段的开始</li>\n<li>段名 ends			--段的结束</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>end（不是ends）</p>\n<ul>\n<li>汇编程序的结束标记。若结尾处不加end编译器在编译程序时，无法知道程序在何时结束</li>\n</ul>\n</li>\n<li>\n<p>assume（假设）</p>\n<ul>\n<li>含义是假设某一段寄存器和程序中某一个用sement …ends定义的段相关联 --assume cs:sement指CS寄存器与codesg关联，将定义的codesg当作程序代码使用</li>\n</ul>\n</li>\n<li>\n<p>注释（；）</p>\n</li>\n</ul>\n<h3><a id=\"2__261\"></a>2. 编写第一个程序</h3>\n<ol>\n<li>定义一个段</li>\n<li>实现处理任务</li>\n<li>指出程序在何时结束</li>\n<li>段与段寄存器关联</li>\n<li>加上程序返回代码</li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-c\">assume cs:abc\nabc segment\n	mov ax,<span class=\"hljs-number\">2</span>\n	add ax,ax\n	add ax,ax\n	\n	mov ax,<span class=\"hljs-number\">4</span>c00h\n	<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">21</span>h\nabc ends\nend\n</code></div></pre>\n<ul>\n<li>语法错误：程序在编译时被编译器发现的错误</li>\n<li>逻辑错误：程序在运行时表现的错误</li>\n</ul>\n<h3><a id=\"3__285\"></a>3. 源程序到程序运行</h3>\n<ul>\n<li>源程序文件：（.asm）</li>\n<li>目标文件：（.obj）</li>\n<li>可执行文件：（.exe）</li>\n</ul>\n<p><mark>编译执行</mark></p>\n<ul>\n<li>\n<p>编写程序：这里使用Notepad++编写<br />\n<img src=\"https://img-blog.csdnimg.cn/20200927155043110.png#pic_center\" alt=\"12121\" /></p>\n</li>\n<li>\n<p>使用masm编译文件生成.obj文件<br />\n<img src=\"https://img-blog.csdnimg.cn/20200927155224455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"121212121121\" /></p>\n</li>\n<li>\n<p>连接生成exe文件<br />\n<img src=\"https://img-blog.csdnimg.cn/20200927155626956.png#pic_center\" alt=\"1212121\" /></p>\n</li>\n</ul>\n<h3><a id=\"4_debug_301\"></a>4. 使用debug跟踪程序的执行</h3>\n<ul>\n<li>用debug装载程序<br />\n<img src=\"https://img-blog.csdnimg.cn/20200927160403437.png#pic_center\" alt=\"456\" /></li>\n<li>t命令：继续命令p（proceed）类似T命令，逐条执行指令、显示结果。但是遇到子程序、中断等时，直接执行，然后显示结果</li>\n<li>g命令：运行指令G（GO）从指定地址开始运行程序，直到遇到断点或者程序程序正常结束</li>\n</ul>\n<h3><a id=\"5__308\"></a>5. […]与(…)的约定</h3>\n<ul>\n<li>[…]：（汇编语法规定）表示一个内存单元</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200927161517375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12345\" /></p>\n<ul>\n<li>(…)：（为学习方便做出的约定）表示一个内存单元或寄存器中内容</li>\n<li>idata：约定表示常量</li>\n</ul>\n<h3><a id=\"6_Loop_317\"></a>6. Loop指令</h3>\n<ul>\n<li>功能：实现循环（计数型循环）</li>\n<li>指令的格式：（loop 标号）</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200927162907793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"34678\" /></p>\n<ul>\n<li>CPU执行loop指令时要进行的操作\n<ul>\n<li>cx要提前存放循环次数，cx影响loop指令的执行结果</li>\n<li>（cx）=（cx）-1</li>\n<li>判断cx中的值：不为0转至标号处，为0则向下执行</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"7__329\"></a>7. 将数据、代码、栈放入不同段</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20200927170126417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"143124123432423\" /></p>\n<pre><div class=\"hljs\"><code class=\"lang-c\">assume cs:code\ndata segment\n	dw <span class=\"hljs-number\">0123</span>h,<span class=\"hljs-number\">0456</span>h,<span class=\"hljs-number\">0789</span>h,<span class=\"hljs-number\">0</span>abch,<span class=\"hljs-number\">0</span>defh,<span class=\"hljs-number\">0f</span>edh,<span class=\"hljs-number\">0</span>cbah,<span class=\"hljs-number\">0987</span>h\ndata ends\n\n<span class=\"hljs-built_in\">stack</span> segment\n	dw <span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>\n<span class=\"hljs-built_in\">stack</span> ends\n\ncode segment\nstart:\n	;初始化各段寄存器\n	mov ax,<span class=\"hljs-built_in\">stack</span>\n	mov ss,ax\n	mov sp,<span class=\"hljs-number\">20</span>h\n	mov ax,data\n	mov ds,ax\n	\n	; 入栈\n	mov bx,<span class=\"hljs-number\">0</span>\n	mov cx,<span class=\"hljs-number\">8</span>\n	s:push [bx]\n	add bx,<span class=\"hljs-number\">2</span>\n	loop s\n	\n	; 出栈\n	mov bx,<span class=\"hljs-number\">0</span>\n	mov cx,<span class=\"hljs-number\">8</span>\n	s0:pop [bx]\n	add bx,<span class=\"hljs-number\">2</span>\n	loop s0\n	\n	mov ax,<span class=\"hljs-number\">4</span>c00h\n	<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">21</span>h\ncode ends\nend\n\n</code></div></pre>\n<h2><a id=\"_376\"></a>内存寻址方式</h2>\n<h3><a id=\"1__379\"></a>1. 处理字符串</h3>\n<ul>\n<li>汇编程序中，用’\'的方式指明数据是以字符串的形式给出的，</li>\n<li>编译器将他们转化为相应的ASCll码</li>\n</ul>\n<p><mark>大小写转换</mark></p>\n<ul>\n<li>大写+20H—&gt;小写</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-c\">assume cs:code\ndata segment\n	db <span class=\"hljs-string\">\'BaSiC\'</span>\n	db <span class=\"hljs-string\">\'iNfOrMaTiOn\'</span>\ndata ends\n\n<span class=\"hljs-built_in\">stack</span> segment\n	dw <span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>\n<span class=\"hljs-built_in\">stack</span> ends\n\ncode segment\nstart:\n	;初始化各段寄存器\n	mov ax,<span class=\"hljs-built_in\">stack</span>\n	mov ss,ax\n	mov sp,<span class=\"hljs-number\">20</span>h\n	mov ax,data\n	mov ds,ax\n	\n	;第一个字符串转换为大写字母\n	mov bx,<span class=\"hljs-number\">0</span>\n	mov cx,<span class=\"hljs-number\">5</span>\n	s: mov al,[bx]\n	<span class=\"hljs-keyword\">and</span> al,<span class=\"hljs-number\">11011111b</span>\n	mov [bx],al\n	inc bx\n	loop s\n	\n	;第二个字符串转换为小写字母\n	mov bx,<span class=\"hljs-number\">5</span>\n	mov cx,<span class=\"hljs-number\">11</span>\n	s0: mov al,[bx]\n	<span class=\"hljs-keyword\">or</span> al,<span class=\"hljs-number\">00100000b</span>\n	inc bx\n	loop s0\n	\n	mov ax,<span class=\"hljs-number\">4</span>c00h\n	<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">21</span>h\ncode ends\nend start\n</code></div></pre>\n<h3><a id=\"2_bxidata_430\"></a>2. [bx+idata]方式寻址</h3>\n<ul>\n<li>[bx+idata]表示一个内存单元，它的偏移地址为（bx）+idata（bx中的数值加上idata）</li>\n<li>mov ax,[bx+200]/mov ax,[200+bx]的含义\n<ul>\n<li>将一个内存单元的内容送入ax</li>\n<li>这个内存单元的长度为2字节，存放一个字</li>\n<li>内存单元的短地址在ds中，偏移地址为200加上bx中的数值</li>\n<li>数学化描述为：（ax）=（（ds）*16+200+（bx））</li>\n<li>其他常用写法：\n<ul>\n<li>mov ax,[200+bx]</li>\n<li>mov ax,200[bx]</li>\n<li>mov ax,[bx].200</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"3_SIDI_445\"></a>3. SI和DI寄存器（变址寄存器）</h3>\n<ul>\n<li>SI和DI是8086CPU中和BX功能相近的寄存器</li>\n<li>SI：Source Index，源变址寄存器</li>\n<li>DI：Destination Index，目标变址寄存器</li>\n<li>SI，DI不能分成两个八位寄存器来使用</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-c\">assume cs:code\ndata segment\n	db <span class=\"hljs-string\">\'welcome to masm!\'</span>\n	db <span class=\"hljs-string\">\'................\'</span>\ndata ends\n\ncode segment\nstart:\n	;初始化寄存器\n	mov ax,data\n	mov ds,ax\n	\n	;开始执行数据\n	mov si,<span class=\"hljs-number\">0</span>\n	mov di,<span class=\"hljs-number\">16</span>\n	mov cx,<span class=\"hljs-number\">8</span>\n	s: mov ax [si]\n	mov [di],ax\n	add si,<span class=\"hljs-number\">2</span>\n	add di,<span class=\"hljs-number\">2</span>\n	loop s\n	\n	mov ax,<span class=\"hljs-number\">4</span>c00h\n	<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">21</span>h\ncode ends\nend start\n</code></div></pre>\n<h3><a id=\"4_bxsibxdi_480\"></a>4. [bx+si]和[bx+di]方式寻址</h3>\n<ul>\n<li>\n<p>[bx+si]表示一个内存单元</p>\n<ul>\n<li>偏移地址为(bx)+(si)：bx中的数值加上si中的数值</li>\n<li>数学化描述：（ax）=（（ds）*16+（bx）+（si））</li>\n<li>其他写法：mov ax，[bx][si]</li>\n</ul>\n</li>\n<li>\n<p>[bx+si+idata]和[bx+di+idata]方式寻址</p>\n<ul>\n<li>[bx+si+idata]表示一个内存单元</li>\n<li>偏移地址为：（bx）+（si）+idata：bx中的数值加上si中的数值，再加上idata</li>\n<li>数学化的描述：（ax）=（（ds）*16+（bx）+（si）+idata）</li>\n<li>其他写法：mov ax，200[bx][si]，mov ax，[bx][si].200</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"5_dup_492\"></a>5. 用dup设置内存空间</h3>\n<ul>\n<li>\n<p>功能：dup和db、dw、dd等数据定义伪指令配合使用，用来进行数据的重复</p>\n</li>\n<li>\n<p>db/dw/dd 重复的次数 dup（重复的字节型数据）<br />\n<img src=\"https://img-blog.csdnimg.cn/20200929155119424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"1121212121\" /></p>\n</li>\n<li>\n<p>定义一个200个字节的栈段：dw 200 dup(0)</p>\n</li>\n</ul>\n<h2><a id=\"_500\"></a>流程转移与子程序</h2>\n<h3><a id=\"1_offset_501\"></a>1. 操作符offset</h3>\n<p><mark>转移</mark></p>\n<ul>\n<li>\n<p>可以控制CPU执行内存中的某处指令</p>\n</li>\n<li>\n<p>可以修改IP，或同时修改 CS和IP的指令</p>\n</li>\n<li>\n<p>按转移行为分类：</p>\n<ul>\n<li>段内转移：只修改IP，jmp ax</li>\n<li>段间转移：同时修改CS和IP，jmp 1000:0</li>\n</ul>\n</li>\n<li>\n<p>按指令对IP的修改的范围不同分类：</p>\n<ul>\n<li>段内短转移：IP修改范围-128~127</li>\n<li>段内近转移：IP修改范围为-32768~32767</li>\n</ul>\n</li>\n<li>\n<p>按转移指令分类：</p>\n<ul>\n<li>无条件转移指令，jmp</li>\n<li>条件转移指令，jcxz</li>\n<li>循环指令，loop</li>\n<li>过程</li>\n<li>中断</li>\n</ul>\n</li>\n<li>\n<p>offset：取得标号的偏移地址</p>\n</li>\n<li>\n<p>格式：offset 标号</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200929162041584.png#pic_center\" alt=\"34421\" /></p>\n<h3><a id=\"2_jmp_526\"></a>2. jmp指令</h3>\n<ul>\n<li>无条件转移：可以只修改IP，也可以同时修改CS和IP</li>\n<li>jmp指令要给出两种信息：\n<ul>\n<li>转移的目标地址</li>\n<li>转移的距离\n<ul>\n<li>段间转移（远转移）：jmp 2000：1000</li>\n<li>段内短转移：jmp short 标号；IP修改范围为-128~127，8位转移</li>\n<li>段内近转移：jmp near ptr 标号；IP的修改范围为：-32768~32767，16位转移</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><mark>根据标号进行转移</mark></p>\n<ul>\n<li>\n<p>常见指令的立即数均在机器指令中有体现</p>\n</li>\n<li>\n<p>jmp short 标号</p>\n<ul>\n<li>机器指令中，包含的是跳转到指令的相对位置，而不是转移的目标地址</li>\n<li>功能：（IP）=（IP）+8位位移</li>\n<li>原理：\n<ul>\n<li>8位位移=“标号”处的地址-jmp指令后的第一个字节的地址；</li>\n<li>short指明此处的位移位8位位移</li>\n<li>8位位移的范围为-128127，用补码表示</li>\n<li>8位位移由编译程序在编译时算出</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>jmp near ptr 标号：段内转移</p>\n<ul>\n<li>功能：（IP）=（IP）+16位位移</li>\n<li>原理：类似jmp short</li>\n</ul>\n</li>\n<li>\n<p>jmp far ptr 标号 ：段间转移</p>\n<ul>\n<li>指明了跳转的目的地址，即包含了标号的段地址CS和偏移地址IP</li>\n</ul>\n</li>\n</ul>\n<p><mark>根据寄存器中的值转移</mark></p>\n<ul>\n<li>jmp 16位寄存器</li>\n<li>功能：IP=（16位寄存器）：jmp ax</li>\n</ul>\n<p><mark>转移地址在内存中的jmp指令</mark></p>\n<ul>\n<li>\n<p>jmp word ptr 内存单元地址：</p>\n<ul>\n<li>段内转移</li>\n<li>从内存单元地址处开始存放着一个字，是转移的目的偏移地址</li>\n</ul>\n</li>\n<li>\n<p>jmp dword ptr 内存单元地址：</p>\n<ul>\n<li>段间转移</li>\n<li>从内存单元地址处开始存放两个字，高地址处的字是转移的目的段地址，低地址处是转移的目的偏移地址</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200929171852980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"124132323233\" /></p>\n<ul>\n<li>在源程序中不允许直接写 2000：1000指定地址转移，编译时会报错</li>\n</ul>\n<p><mark>jcxz指令</mark></p>\n<ul>\n<li>格式：jcxz 标号</li>\n<li>功能：\n<ul>\n<li>如果（cx）=0,则转移到标号处执行，（IP）=（IP）+8位位移\n<ul>\n<li>8位位移=“标号”处的地址-jcxz指令后的第一个字节的地址，补码表示，编译程序编译出来的</li>\n</ul>\n</li>\n<li>当（cx）!=0时，什么也不做（程序向下执行）</li>\n</ul>\n</li>\n<li>jcxz是条件转移指令\n<ul>\n<li>所有的有条件转移指令都是短转移</li>\n<li>对于IP的修改范围都是-128~127</li>\n<li>在对应的机器码中包含转移的位移，而不是目的地址</li>\n</ul>\n</li>\n</ul>\n<p><mark>loop指令</mark></p>\n<ul>\n<li>格式：loop 标号</li>\n<li>指令操作：\n<ul>\n<li>（cx）=（cx）-1</li>\n<li>当（cx）！=0时，则转移到标号处执行，（IP）=（IP）+8位位移</li>\n<li>当（cx）=0时，程序向下执行</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"3_callret_595\"></a>3. call指令和ret指令</h3>\n<ul>\n<li>call：调用子程序</li>\n<li>ret：返回指令</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200929184744399.png#pic_center\" alt=\"52822222\" /><br />\n<mark>call</mark></p>\n<ul>\n<li>\n<p>实质：流程转移指令，他们都修改IP或同时修改CS和IP，实现原理和jmp指令相似</p>\n</li>\n<li>\n<p>CPU执行call指令，进行两步操作：</p>\n<ul>\n<li>将当前的IP或CS：IP压入栈中</li>\n<li>转移到标号处执行指令</li>\n</ul>\n</li>\n<li>\n<p>call标号</p>\n<ul>\n<li>16位位移=“标号”处的地址 -call指令后的第一个字节的地址</li>\n<li>16位位移的范围位 -32768~32767，用补码表示</li>\n<li>16位位移由编译程序在编译时算出</li>\n</ul>\n</li>\n</ul>\n<p><mark>call far ptr 标号</mark></p>\n<ul>\n<li>实现的是段间转移，把段地址也压栈了</li>\n<li>CPU执行“call for ptr 标号”时的操作\n<ul>\n<li>（SP）=（SP）-2</li>\n<li>（（SS）x16+（SP））=（CS）</li>\n<li>（SP）=（SP）-2</li>\n<li>（（SS）x16+（SP））=（IP）</li>\n<li>（CS）：标号所在的段地址</li>\n<li>（IP）：标号所在的偏移地址</li>\n</ul>\n</li>\n</ul>\n<p><mark>转移地址在寄存器中的call</mark></p>\n<ul>\n<li>格式：call 16位寄存器</li>\n<li>功能：\n<ul>\n<li>（SP）=（SP）-2</li>\n<li>（（SS）*16+（SP））=（IP）</li>\n<li>（IP）=（16位寄存器）</li>\n</ul>\n</li>\n</ul>\n<p><mark>转移地址在内存中的call</mark></p>\n<ul>\n<li>格式：call word ptr 内存单元地址：把IP放入栈中</li>\n<li>格式：call dword ptr 内存单元：把IP和CS都放入栈中</li>\n</ul>\n<p><mark>ret指令和retf</mark></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200929191958982.png#pic_center\" alt=\"21312\" /></p>\n<h3><a id=\"4_DF_646\"></a>4. DF标志和段传送指令</h3>\n<p><mark>DF</mark></p>\n<ul>\n<li>方向标志位（Direction Flag）</li>\n<li>功能：\n<ul>\n<li>在串处理指令中，控制每次操作后si，di的递减</li>\n<li>DF=0：每次操作后si，di递增</li>\n<li>DF=1：每次操作后si，di递减</li>\n</ul>\n</li>\n<li>对DF指令进行设置的指令\n<ul>\n<li>cld指令：将标志寄存器的DF位设为0（clear）</li>\n<li>std指令：将标志寄存器的DF位设为1（setup）</li>\n</ul>\n</li>\n</ul>\n<p><mark>串传送指令</mark></p>\n<ul>\n<li>\n<p>movsb：（以字节为单位传送）</p>\n<ul>\n<li>（（ES）x16+（DI））=（（DS）x16+（SI））</li>\n<li>如果DF=0则：（SI）=（SI）+1，（DI）=（DI）+1</li>\n<li>如果DF=1则：（SI）=（SI）-1，（DI）=（DI）-1</li>\n</ul>\n</li>\n<li>\n<p>movsw：（以字为单位传送）</p>\n<ul>\n<li>（（ES）x16+（DI））=（（DS）x16+（SI））</li>\n<li>如果DF=0则：（SI）=（SI）+2，（DI）=（DI）+2</li>\n<li>如果DF=1则：（SI）=（SI）-2，（DI）=（DI）-2</li>\n</ul>\n</li>\n<li>\n<p>字符串的复制</p>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-c\">assume cs:code\ndata segment\n	db <span class=\"hljs-string\">\'welcome to masm!\'</span>\n	db <span class=\"hljs-number\">16</span> dup(<span class=\"hljs-number\">0</span>)\ndata ends\n\ncode segment\nstart:\n	;初始化寄存器\n	mov ax,data\n	mov ds,ax\n	mov si,<span class=\"hljs-number\">0</span>\n	mov es,ax\n	mov di,<span class=\"hljs-number\">16</span>\n	cld\n	\n	;循环传送\n	mov cx,<span class=\"hljs-number\">16</span>\n	s:movsb\n	loop s\n	\n	mov ax,<span class=\"hljs-number\">4</span>c00h\n	<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">21</span>h\ncode ends\nend start\n</code></div></pre>\n<p><mark>rep指令</mark></p>\n<ul>\n<li>rep指令常和串传送指令搭配使用</li>\n<li>功能：根据cx的值，重复执行后面的指令</li>\n<li>用法：rep movsb</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200929195134579.png#pic_center\" alt=\"12121212\" /></p>\n<ul>\n<li>上面一段代码可简化为</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-c\">assume cs:code\ndata segment\n	db <span class=\"hljs-string\">\'welcome to masm!\'</span>\n	db <span class=\"hljs-number\">16</span> dup(<span class=\"hljs-number\">0</span>)\ndata ends\n\ncode segment\nstart:\n	;初始化寄存器\n	mov ax,data\n	mov ds,ax\n	mov si,<span class=\"hljs-number\">0</span>\n	mov es,ax\n	mov di,<span class=\"hljs-number\">16</span>\n	cld\n	\n	;循环传送\n	mov cx,<span class=\"hljs-number\">8</span>\n	rep movsw\n	\n	mov ax,<span class=\"hljs-number\">4</span>c00h\n	<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">21</span>h\ncode ends\nend start\n</code></div></pre>\n<h2><a id=\"_744\"></a>中断及外部设备的操作</h2>\n<h3><a id=\"1__745\"></a>1. 移位指令</h3>\n<ul>\n<li>逻辑左移：SHL OPR，CNT：把最高位移动到CF中，其他左移一位，低位补0</li>\n<li>循环左移：ROL OPR，CNT：最高位移动到最低位，其他位顺序左移</li>\n<li>逻辑右移：SHR OPR，CNT：把最低位移动到CF中，其他右移一位，高位补1</li>\n<li>算术左移：SAL OPR，CNT：和逻辑左移一样</li>\n<li>算术右移：SAR OPR，CNT：把最低位移到CF，其他右移，高位复制一份</li>\n<li>带进位循环左移：RCL OPR，CNT：最高位放到CF中，原CF中的放到最低位，其他左移一位</li>\n<li>带进位循环右移：RCR OPR，CNT：最高位补原CF的数</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20201002083646718.png#pic_center\" alt=\"1231231231\" /></p>\n<h3><a id=\"2__758\"></a>2. 操作显示原理</h3>\n<p><mark>屏幕上的内容=显存中的数据</mark></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201002084242791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"1212312312\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20201002084338469.png#pic_center\" alt=\"1231212\" /></p>\n<ul>\n<li>显存中的结构，每个字符有两个位表示</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/2020100208485385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"32qwr\" /></p>\n<ul>\n<li>显示例子：在屏幕中间显示：welcome to masm!</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-c\">assume cs:code\ndata segment\n	db <span class=\"hljs-string\">\'welcome to masm!\'</span>\ndata ends\n\ncode segment\nstart:\n	;初始化寄存器\n	mov ax,data\n	mov ds,ax\n	mov ax,<span class=\"hljs-number\">0B</span>800H\n	mov si,<span class=\"hljs-number\">0</span>\n	mov es,ax\n	mov di,<span class=\"hljs-number\">160</span>*<span class=\"hljs-number\">12</span>+<span class=\"hljs-number\">80</span><span class=\"hljs-number\">-16</span>\n	\n	;显示字符串\n	mov cx,<span class=\"hljs-number\">16</span>\n	w:mov al,[si]\n	mov es:[di],al\n	inc di\n	mov al,<span class=\"hljs-number\">71</span>H\n	mov es:[di],al\n	inc si\n	inc di\n	loop w\n	\n	mov ax,<span class=\"hljs-number\">4</span>c00h\n	<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">21</span>h\ncode ends\nend start\n</code></div></pre>\n<h3><a id=\"3__804\"></a>3. 描述内存单元的标号</h3>\n<ul>\n<li>数据标号同时描述内存地址和内存单元长度</li>\n<li>扩展用法：将标号当作数据来定义</li>\n</ul>\n<h3><a id=\"4__811\"></a>4. 直接定址表</h3>\n<p><mark>数据的直接定址表</mark></p>\n<ul>\n<li>利用表，在两个数据集合之间建立一种映射关系，用查表的方法根据给出的数据得到其在另一集合中的对应数据</li>\n</ul>\n<h2><a id=\"_816\"></a>高级汇编语言技术（宏汇编）</h2>\n<h3><a id=\"1__819\"></a>1. 子程序的另一种写法</h3>\n<pre><div class=\"hljs\"><code class=\"lang-c\">名称 proc\n...\n名称 endp\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20201002110254727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"345634633\" /></p>\n<h3><a id=\"2__828\"></a>2. 程序的多文件组织</h3>\n<ul>\n<li>文件中引用另一个文件：<mark>extern 名称:far</mark></li>\n<li>被引用的文件头部申明可以被引用：<mark>public 名称</mark></li>\n<li>编译时分别编译：\n<ul>\n<li><mark>masm p1</mark></li>\n<li><mark>masm p2</mark></li>\n<li><mark>link p1.OBJ+p2.OBJ</mark></li>\n</ul>\n</li>\n<li>默认生成：p1.exe</li>\n</ul>\n<h3><a id=\"3__839\"></a>3. 汇编指令汇总</h3>\n<ul>\n<li>\n<p>数据传送指令</p>\n<ul>\n<li>通用数据传送指令：mov，push，pop，xchg（交换指令：xchg 操作数1 操作数2）</li>\n<li>累加器专用传送指令：in，out，xlat（换码指令：xlat或xlat opr）</li>\n<li>地址传送指令：LEA（有效地址送寄存器指令），LDS（指针送寄存器和DS指令），LES（指针送寄存器和ES指令）</li>\n<li>标志寄存器传送指令：LAHF（标志送AH指令），SAHF（AH送标志寄存器指令），PUSHF（标志进栈指令），POPF（标志出栈指令）</li>\n<li>类型转换指令：CBW（字节转字指令），CWD（字转字节指令）</li>\n</ul>\n</li>\n<li>\n<p>算术指令</p>\n<ul>\n<li>加法指令：ADD，ADC（带进位的加法），INC（加1）</li>\n<li>减法指令：SUB，SBB（带借位的减法），DEC（减1），NEG（取负），CMP（减法，不影响操作数，只影响标志位）</li>\n<li>乘法：MUL，IMUL（有符号数的乘法）</li>\n<li>除法：DIV，IDIV（有符号数除法）</li>\n<li>十进制指令：DAA（压缩BCD码加法十进制调整指令），DAS（压缩BCD码减法法十进制调整指令），AAA（非压缩BCD码加法十进制调整指令），AAS（非压缩BCD码减法十进制调整指令），AAM（非压缩BCD码乘法十进制调整指令），AAD（非压缩BCD码除法十进制调整指令）</li>\n</ul>\n</li>\n<li>\n<p>逻辑指令</p>\n<ul>\n<li>逻辑运算指令：AND，OR，NOT，XOP，TEST</li>\n<li>移位指令：SHL，SHR，SAL，SAR，ROL，ROR，RCL，RCR</li>\n</ul>\n</li>\n<li>\n<p>串处理指令</p>\n<ul>\n<li>设置方向标志指令：CLD，STD</li>\n<li>串处理指令：MOVSB/MOVSW，STOSB/STOSW，LODSB／LODSW，CMPSB／CMPSW，SCASB／SCASW</li>\n</ul>\n</li>\n<li>\n<p>控制转移指令</p>\n<ul>\n<li>无条件转移指令：JMP</li>\n<li>条件转移指令</li>\n<li>循环指令：LOOP，LOOPZ/LOOPE，LOOPNZ/LOOPNE</li>\n<li>子程序调用和返回指令：CALL，RET</li>\n<li>中断与中断返回指令：INT，INTO，IRET</li>\n</ul>\n</li>\n<li>\n<p>处理机控制与杂项操作指令</p>\n<ul>\n<li>标志处理指令：CLC，STC，CMC，CLD，STD，CLI，STI</li>\n<li>其他处理机控制与杂项操作指令：\n<ul>\n<li>NOP：无操作（机器码占一个字节）</li>\n<li>HTL：暂停机（等待一次外中断，之后继续执行程序）</li>\n<li>WAIT：等待（等待中断，之后仍继续等待）</li>\n<li>ESC：换码</li>\n<li>LOCK：封锁（维持总线的锁存信号，直到其后的指令执行完）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"4__883\"></a>4. 汇编伪操作汇总</h3>\n<p><strong>伪操作</strong>：在汇编程序对源程序汇编期间，由汇编程序处理的操作，可以完成如数据定义、分配存储区、指示程序结束等指令</p>\n<ul>\n<li>\n<p>处理器选择伪操作<br />\n<img src=\"https://img-blog.csdnimg.cn/20201002150624379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"222222\" /></p>\n</li>\n<li>\n<p>段定义伪操作</p>\n<ul>\n<li>data segment     data ends：定义数据段</li>\n<li>extra segment     extra segment：定义附加段</li>\n<li>code segment    code segment：定义代码段<br />\n<img src=\"https://img-blog.csdnimg.cn/20201002150957588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"231312\" /></li>\n</ul>\n</li>\n<li>\n<p>程序开始和结束伪操作</p>\n</li>\n<li>\n<p><img src=\"https://img-blog.csdnimg.cn/2020100215350427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"1212\" /></p>\n</li>\n<li>\n<p>数据定义及存储器分配伪操作</p>\n<ul>\n<li>助记符：DB，DW，DD，DF，DQ，DT</li>\n</ul>\n</li>\n<li>\n<p>表达式赋值伪操作</p>\n<ul>\n<li>表达式名 EQU 表达式</li>\n<li>= 伪操作（允许重定义）</li>\n</ul>\n</li>\n<li>\n<p>地址计数器与对准伪操作<br />\n<img src=\"https://img-blog.csdnimg.cn/20201002155109224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n</li>\n<li>\n<p>基数控制器伪操作</p>\n</li>\n</ul>\n<h3><a id=\"5__918\"></a>5. 汇编操作符汇总</h3>\n<ul>\n<li>算术操作符：+，-，*，/，MOD</li>\n<li>逻辑和移位操作符号：and，or，xor，not，shl，shr</li>\n<li>关系操作符：EQ（等于），NE（不等于），LT（小于），LE（小于等于），GT（大于），GE（大于等于）</li>\n<li>数值回送操作符：OFFSET（回送变量或标号的偏址/段址）、SEG、TYPE、LENGTH（回送由DUP定义的变量的单元数，其他情况返回1）、SIZE</li>\n<li>属性操作符：<br />\n<img src=\"https://img-blog.csdnimg.cn/20201002163139359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12312312\" /></li>\n</ul>\n<h3><a id=\"6__928\"></a>6. 汇编过程</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20201002163940977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"123123\" /></p>\n<ul>\n<li>\n<p>伪指令不产生机器码</p>\n</li>\n<li>\n<p>汇编指令和机器码是一一对应的</p>\n</li>\n<li>\n<p>Binary Viewer：一个文件查看器</p>\n</li>\n</ul>\n','@[toc](目录)\n# 汇编\n\n## 绪论\n\n- 程序语言的老祖宗\n- 汇编语言的效率无可替代\n- 用于底层：计算机及周围设备的驱动程序\n- 汇编语言的主体是汇编指令（助记符）\n\n### 1. 汇编语言的执行过程\n![121212](https://img-blog.csdnimg.cn/20200925145558594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n### 2. 计算机组成\n- CPU：\n- 总线\n- 内存\n- 扩展槽（连接外部设备）\n\n### 3. 指令和数据的表示\n\n- 计算机中的数据和指令，储存在内存或磁盘中\n- 数据和指令都是二进制信息\n- 数据的表示：二进制B、十六进制H、八进制O、十进制D\n- 数据量：B、KB、MB、GB、TB\n\n\n### 4. 计算机中的储存单元\n\n- 存储器被划分为若干个存储单元，每个存储单元从0开始顺序编码\n\n### 5. 计算机中的总线\n\n- 计算机中专门连接CPU和其他芯片的导线，通常成为总线\n- 物理上：一根根导线的集合\n- 逻辑上：\n  - 地址总线：CPU通过地址总线来指定储存单元，宽度决定可寻址的储存单元的大小（N根总线宽度为N，寻址空间为2^N）\n  - 数据总线：CPU通过内存或其他器件之间数据传输是通过数据总线实现的，宽度觉得速度\n  - 控制总线：CPU通过控制总线对外部器件进行控制，宽度决定对外部器件的控制能力\n\n\n### 6. X86性能\n\n![12121](https://img-blog.csdnimg.cn/20200925151208147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n### 7. CPU对储存器的读写\n\nCPU想要进行数据读写，必须要和外部器件进行三类信息的数据交换\n- 存储单元的地址（地址信息）\n- 器件的选择，读或写命令（控制信息）\n- 读或写的数据（数据信息）\n\n### 8. 内存地址空间\n![1212121](https://img-blog.csdnimg.cn/20200925152038225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n- 把各类储存器看作一个逻辑存储--统一编址\n- 所有的物理存储器被看作一个由若干存储单元组成的逻辑存储器\n- 每个物理储存器在这个逻辑储存器中占有一个地址段\n![1212](https://img-blog.csdnimg.cn/20200925152608578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n### 9. 搭建汇编语言实践环境（Dos模拟器）\n\n- DOSBox：下载地址\n\n百度网盘 ：[https://pan.baidu.com/s/17cOEc9MU2N7xrF8W43JeJA](https://pan.baidu.com/s/17cOEc9MU2N7xrF8W43JeJA)\n提取码 ：m06f  \n\n\n \n\n## 访问寄存器和内存\n### 1. CPU的组成\n\n- 运算器进行信息处理\n- 寄存器进行信息存储\n- 控制器协调各种器件进行工作\n- 内部总线协调各种器件之间的联系\n\n\n### 2. 寄存器是CPU的内部信息存储单元\n\n![12121](https://img-blog.csdnimg.cn/2020092615221749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n### 3. 通用寄存器：AX，BX，CX，DX\n\n- 一个16位寄存器储存一个16位的数据\n- 最大值2^16^-1（FFFF）\n\n![1212](https://img-blog.csdnimg.cn/202009261525208.png#pic_center)\n\n\n### 4. 8086上一代的寄存器是8位的\n\n- 通用寄存器可以分为两个独立的8八位寄存器独立使用\n- AX分为AH，AL\n- B分分为BH，BL\n- CX分为CH，CL\n- DX分为DH，DL\n- 这样可以保证程序的兼容性\n- 8086是16位CPU，8086的字长是16位\n- 一个字的高位存在高八位寄存器中，地位存在低八位寄存器中\n\n### 5. mov和add指令\n\nmov ax bx：把bx的值赋值到ax\nadd ax bx：把bx和ax加起来，结果存到ax中\n\n### 6. 确定物理地址\n\n- CPU访问内存单元时要给出内存单元的地址\n- 所有的内存单元构成的存储空间是一个一维的线性空间，每一个内存单元在这个空间中都有唯一的地址，这个唯一的地址叫物理地址\n- 8086有20位地址总线，可传送20位地址，寻址能力是1M\n- 8086是16位结构的CPU，运算器最多可以处理16位的数据寻址能力只有64KB\n- 8086CPU用两个16位地址（段地址、偏移地址）合成一个20位的物理地址\n- 物理地址 = 段地址（16位）x16（左移4位） +偏移地址\n  - 得到一个20位的地址，可以访问内存的1M的空间了\n  - CPU在访问时，用一个基础地址（段地址x16）和一个相对于基础地址的偏移地址相加，给出内存单元的物理地址\n\n![121213](https://img-blog.csdnimg.cn/20200926155752261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n### 7. 内存的分段表示法：内存并没有分段，段的划分来自于CPU\n![12121](https://img-blog.csdnimg.cn/20200926163144144.png#pic_center)\n- 不同的段地址和偏移地址可以形成同一地址\n- 段地址很重要，用专门的寄存器存放段地址\n\n![1212](https://img-blog.csdnimg.cn/20200926163555600.png#pic_center)\n\n### 8. Debug：DOS系统中著名的调试程序\n\n![12121](https://img-blog.csdnimg.cn/20200926163837154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n- 可以查看CPU各种寄存器中的内容、内存的情况，并且在机器指令级跟踪程序的运行\n\n==R查看寄存器指令==\n- R	- 查看寄存器的内容\n- R 寄存器名	- 改变指定寄存器内容\n\n==D查看内存指令==\n- D	- 列出预设地址内存处的128个字节的内容\n- D 段地址：偏移地址	- 列出内存中指定地址处的内容\n- D 段地址：偏移地址 结尾偏移地址	- 列出内存中指定地址范围的内容\n\n==E修改内存数据指令==\n- E 段地址：偏移地址 数据1 数据2	- 改变内存中的内容\n- E 段地址：偏移地址	- 逐个询问式修改，空格接受，回车结束 \n\n\n==U将内存中的机器指令翻译成汇编指令==\n- u 地址	- 查看代码\n\n![12123](https://img-blog.csdnimg.cn/20200926170159615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n==用A命令以汇编指令的格式在内存中写入机器指令==\n\n- a 地址 	- 写入汇编指令\n\n\n==用T命令执行机器指令==\n\n- t -执行CS:IP处的指令\n\n==Q推出debug==\n\n\n### 9. CS/IP两个关键的寄存器\n\n- CS：代码段寄存器\n- IP：指令指针寄存器\n -  CS/IP：CPU将内存中CS：IP指向的内容当作指令来执行\n\n### 10. jmp指令\n- 执行何处的指令取决于CS：IP\n- 可以通过CS：IP中的内容来控制CPU要执行的目标指令\n- debug中r指令可以改变寄存器中的值rCS rip\n- 不能用moc cs 123 这种方法\n- 使用转移指令jmp：==jmp CS：IP==，用指令中给出的段地址修改CS，偏移地址修改IP\n\n\n### 11. 段寄存器DS和[address]实现字的传送\n- 字单元：由两个地址连续的内存单元组成，存放一个字型数据（16位）\n- 在一个字单元中，低地址单元存放低位字节，高地址单元存放高位字节\n\nCPU要读取一个内存单元的时候，必须先给出这个内存单元的地址\n- DS个[address]配合使用：\n  -  用寄存器DS存放要访问的段地址\n  - 偏移地址用[....]的形式给出\n- 8086不支持将数据直接放入段寄存器中的：数据--》一般寄存器--》段寄存器\n\n==DS与数据段==\n\n- 可以根据需要将一组内存单元定义位一个段\n  - 物理地址 = 段地址x16+偏移地址\n  - 将一组长度为N（N<64K）、地址连续、起始位置为16的倍数的内存单元当作专门存储数据的内存空间，从而定义一个数据段\n \n![12121](https://img-blog.csdnimg.cn/2020092709292072.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n- 字在内存中存放时，要用连个连续的内存单元来存放，字的地位字节存放在地位单元中，高位字节存放在高位地址单元中\n- 用mov指令要访问内存单元，可以在mov指令中只给出单元的偏移地址，段地址默认在DS寄存器中\n- [address]表示一个偏移地址为address的内存单元\n- 在内存和寄存器之间传送字型数据时，高地址单元和高八位寄存器，低地址单元和低8位寄存器相对应\n- mov、add、sub是具有两个操作对象的指令，访问内存中的数据段\n- jmp具有一个操作对象的指令，对应内存中的代码段\n- 可以根据自己的推测，在Debug中实验指令的新格式\n\n\n\n### 12. 栈及其栈操作\n\n- 只能在一段插入或删除操作的数据结构\n  - 入栈：将一个新的元素放到栈顶\n  - 出栈：从栈顶取出一个元素\n- 规则：后入先出LIFO（last in first out） \n- CPU提供栈机制：如今的CPU都有栈的设计\n\n![1212121](https://img-blog.csdnimg.cn/20200927094609140.png#pic_center)\n\n- 8086中有两个与栈相关的寄存器：\n  - 栈段寄存器SS：存放栈顶的段地址\n  - 栈顶指针寄存器SP：存放栈顶的偏移地址\n  - 任意时刻，SS:SP指向栈顶元素\n  - push指令执行步骤：\n    - SP=SP-2\n    - 向SS:SP指向的字单元中传入数据\n  - pop指令执行步骤：\n    - 从SS:SP指向的字单元中读取数据\n    - SP = SP - 2\n\n![12121](https://img-blog.csdnimg.cn/20200927100455746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n- 8086CPU不保证对栈的操作不会越界\n- 编程时要小心栈顶越界的问题\n- push、pop实质上就是一种内存传送指令，可以在寄存器和内存之间传送数据，与mov指令不同的是，push和pop指令访问的内存单元的地址不是在指令中给出的而是SS:SP指出的\n- 执行push和pop指令时，SP中的内容自动改变\n\n\n### 13. 段总结\n- 物理地址=段地址x16+偏移地址\n- 编程时，可以根据需要将一组内存单元定义为一个段\n- 可以将起始位置为16的倍数，长度为N（N<64K）的一组地址连续的内存单元定义为一个段\n- 将一段内存定义为一个段，用一个段地址指示段，用偏移地址访问段内的单元\n\n\n## 汇编语言程序\n\n### 1. 汇编语言编写源程序\n- 汇编程序：包含汇编程序和伪指令的文本\n\n![121212](https://img-blog.csdnimg.cn/2020092710311341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n==程序中的三种伪指令==\n- 段定义\n  - 一个汇编程序是由多个段组成，这些段用来存放代码、数据、或当作栈空间来使用\n  - 一个有意义的汇编程序中至少有一个段，这个段用来存放代码\n  - 定义程序中的段：每个段都需要有段名\n    -  段名 segment	-- 段的开始\n    - 段名 ends			--段的结束\n- end（不是ends）\n  - 汇编程序的结束标记。若结尾处不加end编译器在编译程序时，无法知道程序在何时结束\n- assume（假设）\n  - 含义是假设某一段寄存器和程序中某一个用sement ....ends定义的段相关联 --assume cs:sement指CS寄存器与codesg关联，将定义的codesg当作程序代码使用\n\n\n\n- 注释（；）\n\n\n### 2. 编写第一个程序\n1. 定义一个段\n2. 实现处理任务\n3. 指出程序在何时结束\n4. 段与段寄存器关联\n5. 加上程序返回代码\n\n~~~c\nassume cs:abc\nabc segment\n	mov ax,2\n	add ax,ax\n	add ax,ax\n	\n	mov ax,4c00h\n	int 21h\nabc ends\nend\n~~~\n\n- 语法错误：程序在编译时被编译器发现的错误\n- 逻辑错误：程序在运行时表现的错误\n\n\n### 3. 源程序到程序运行\n- 源程序文件：（.asm）\n- 目标文件：（.obj）\n- 可执行文件：（.exe）\n\n\n==编译执行==\n\n- 编写程序：这里使用Notepad++编写\n![12121](https://img-blog.csdnimg.cn/20200927155043110.png#pic_center)\n\n- 使用masm编译文件生成.obj文件\n![121212121121](https://img-blog.csdnimg.cn/20200927155224455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n- 连接生成exe文件\n![1212121](https://img-blog.csdnimg.cn/20200927155626956.png#pic_center)\n\n### 4. 使用debug跟踪程序的执行\n- 用debug装载程序\n![456](https://img-blog.csdnimg.cn/20200927160403437.png#pic_center)\n- t命令：继续命令p（proceed）类似T命令，逐条执行指令、显示结果。但是遇到子程序、中断等时，直接执行，然后显示结果\n- g命令：运行指令G（GO）从指定地址开始运行程序，直到遇到断点或者程序程序正常结束\n\n\n### 5. [...]与(...)的约定\n- [...]：（汇编语法规定）表示一个内存单元\n\n![12345](https://img-blog.csdnimg.cn/20200927161517375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n- (...)：（为学习方便做出的约定）表示一个内存单元或寄存器中内容\n- idata：约定表示常量\n\n\n### 6. Loop指令\n- 功能：实现循环（计数型循环）\n- 指令的格式：（loop 标号）\n\n![34678](https://img-blog.csdnimg.cn/20200927162907793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n- CPU执行loop指令时要进行的操作\n  - cx要提前存放循环次数，cx影响loop指令的执行结果\n  - （cx）=（cx）-1\n  - 判断cx中的值：不为0转至标号处，为0则向下执行\n\n\n### 7. 将数据、代码、栈放入不同段\n\n![143124123432423](https://img-blog.csdnimg.cn/20200927170126417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n```c\nassume cs:code\ndata segment\n	dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h\ndata ends\n\nstack segment\n	dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\nstack ends\n\ncode segment\nstart:\n	;初始化各段寄存器\n	mov ax,stack\n	mov ss,ax\n	mov sp,20h\n	mov ax,data\n	mov ds,ax\n	\n	; 入栈\n	mov bx,0\n	mov cx,8\n	s:push [bx]\n	add bx,2\n	loop s\n	\n	; 出栈\n	mov bx,0\n	mov cx,8\n	s0:pop [bx]\n	add bx,2\n	loop s0\n	\n	mov ax,4c00h\n	int 21h\ncode ends\nend\n\n```\n\n\n\n\n## 内存寻址方式\n\n\n### 1. 处理字符串\n- 汇编程序中，用\'\'的方式指明数据是以字符串的形式给出的，\n- 编译器将他们转化为相应的ASCll码\n\n==大小写转换==\n- 大写+20H--->小写\n\n~~~c\nassume cs:code\ndata segment\n	db \'BaSiC\'\n	db \'iNfOrMaTiOn\'\ndata ends\n\nstack segment\n	dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\nstack ends\n\ncode segment\nstart:\n	;初始化各段寄存器\n	mov ax,stack\n	mov ss,ax\n	mov sp,20h\n	mov ax,data\n	mov ds,ax\n	\n	;第一个字符串转换为大写字母\n	mov bx,0\n	mov cx,5\n	s: mov al,[bx]\n	and al,11011111b\n	mov [bx],al\n	inc bx\n	loop s\n	\n	;第二个字符串转换为小写字母\n	mov bx,5\n	mov cx,11\n	s0: mov al,[bx]\n	or al,00100000b\n	inc bx\n	loop s0\n	\n	mov ax,4c00h\n	int 21h\ncode ends\nend start\n~~~\n\n\n### 2. [bx+idata]方式寻址\n\n- [bx+idata]表示一个内存单元，它的偏移地址为（bx）+idata（bx中的数值加上idata）\n- mov ax,[bx+200]/mov ax,[200+bx]的含义\n  - 将一个内存单元的内容送入ax\n  - 这个内存单元的长度为2字节，存放一个字\n  - 内存单元的短地址在ds中，偏移地址为200加上bx中的数值\n  - 数学化描述为：（ax）=（（ds）*16+200+（bx））\n  - 其他常用写法：\n    - mov ax,[200+bx]\n    - mov ax,200[bx]\n    - mov ax,[bx].200\n\n\n\n### 3. SI和DI寄存器（变址寄存器）\n- SI和DI是8086CPU中和BX功能相近的寄存器\n- SI：Source Index，源变址寄存器\n- DI：Destination Index，目标变址寄存器\n- SI，DI不能分成两个八位寄存器来使用\n\n```c\nassume cs:code\ndata segment\n	db \'welcome to masm!\'\n	db \'................\'\ndata ends\n\ncode segment\nstart:\n	;初始化寄存器\n	mov ax,data\n	mov ds,ax\n	\n	;开始执行数据\n	mov si,0\n	mov di,16\n	mov cx,8\n	s: mov ax [si]\n	mov [di],ax\n	add si,2\n	add di,2\n	loop s\n	\n	mov ax,4c00h\n	int 21h\ncode ends\nend start\n```\n\n### 4. [bx+si]和[bx+di]方式寻址\n- [bx+si]表示一个内存单元\n  - 偏移地址为(bx)+(si)：bx中的数值加上si中的数值\n  - 数学化描述：（ax）=（（ds）*16+（bx）+（si））\n  - 其他写法：mov ax，[bx][si]\n\n- [bx+si+idata]和[bx+di+idata]方式寻址\n  - [bx+si+idata]表示一个内存单元\n  - 偏移地址为：（bx）+（si）+idata：bx中的数值加上si中的数值，再加上idata\n  - 数学化的描述：（ax）=（（ds）*16+（bx）+（si）+idata）\n  - 其他写法：mov ax，200[bx][si]，mov ax，[bx][si].200	\n\n### 5. 用dup设置内存空间\n- 功能：dup和db、dw、dd等数据定义伪指令配合使用，用来进行数据的重复\n- db/dw/dd 重复的次数 dup（重复的字节型数据）\n![1121212121](https://img-blog.csdnimg.cn/20200929155119424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n- 定义一个200个字节的栈段：dw 200 dup(0)\n\n\n## 流程转移与子程序\n### 1. 操作符offset\n\n==转移==\n- 可以控制CPU执行内存中的某处指令\n- 可以修改IP，或同时修改 CS和IP的指令\n- 按转移行为分类：\n  - 段内转移：只修改IP，jmp ax\n  - 段间转移：同时修改CS和IP，jmp 1000:0\n- 按指令对IP的修改的范围不同分类：\n  - 段内短转移：IP修改范围-128~127\n  - 段内近转移：IP修改范围为-32768~32767\n- 按转移指令分类：\n  - 无条件转移指令，jmp\n  - 条件转移指令，jcxz\n  - 循环指令，loop\n  - 过程\n  - 中断\n\n\n- offset：取得标号的偏移地址\n- 格式：offset 标号\n\n![34421](https://img-blog.csdnimg.cn/20200929162041584.png#pic_center)\n\n\n### 2. jmp指令\n- 无条件转移：可以只修改IP，也可以同时修改CS和IP\n- jmp指令要给出两种信息：\n  - 转移的目标地址\n  - 转移的距离\n    - 段间转移（远转移）：jmp 2000：1000\n    - 段内短转移：jmp short 标号；IP修改范围为-128~127，8位转移\n    - 段内近转移：jmp near ptr 标号；IP的修改范围为：-32768~32767，16位转移\n\n==根据标号进行转移==\n\n- 常见指令的立即数均在机器指令中有体现\n- jmp short 标号\n  - 机器指令中，包含的是跳转到指令的相对位置，而不是转移的目标地址\n  - 功能：（IP）=（IP）+8位位移\n  - 原理：\n    - 8位位移=“标号”处的地址-jmp指令后的第一个字节的地址；\n    - short指明此处的位移位8位位移\n    - 8位位移的范围为-128127，用补码表示\n    - 8位位移由编译程序在编译时算出\n- jmp near ptr 标号：段内转移\n  - 功能：（IP）=（IP）+16位位移\n  - 原理：类似jmp short\n\n- jmp far ptr 标号 ：段间转移\n  - 指明了跳转的目的地址，即包含了标号的段地址CS和偏移地址IP\n\n==根据寄存器中的值转移==\n\n- jmp 16位寄存器\n- 功能：IP=（16位寄存器）：jmp ax\n\n\n==转移地址在内存中的jmp指令==\n\n- jmp word ptr 内存单元地址：\n  - 段内转移\n  - 从内存单元地址处开始存放着一个字，是转移的目的偏移地址\n\n\n- jmp dword ptr 内存单元地址：\n  - 段间转移\n  - 从内存单元地址处开始存放两个字，高地址处的字是转移的目的段地址，低地址处是转移的目的偏移地址\n\n\n![124132323233](https://img-blog.csdnimg.cn/20200929171852980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n- 在源程序中不允许直接写 2000：1000指定地址转移，编译时会报错\n\n\n==jcxz指令==\n\n- 格式：jcxz 标号\n- 功能：\n  - 如果（cx）=0,则转移到标号处执行，（IP）=（IP）+8位位移\n    - 8位位移=“标号”处的地址-jcxz指令后的第一个字节的地址，补码表示，编译程序编译出来的\n  - 当（cx）!=0时，什么也不做（程序向下执行）\n- jcxz是条件转移指令\n  - 所有的有条件转移指令都是短转移\n  - 对于IP的修改范围都是-128~127\n  - 在对应的机器码中包含转移的位移，而不是目的地址\n\n==loop指令==\n\n- 格式：loop 标号\n- 指令操作：\n  - （cx）=（cx）-1\n  - 当（cx）！=0时，则转移到标号处执行，（IP）=（IP）+8位位移\n  - 当（cx）=0时，程序向下执行\n\n### 3. call指令和ret指令\n\n- call：调用子程序\n- ret：返回指令\n\n![52822222](https://img-blog.csdnimg.cn/20200929184744399.png#pic_center)\n==call==\n\n- 实质：流程转移指令，他们都修改IP或同时修改CS和IP，实现原理和jmp指令相似\n- CPU执行call指令，进行两步操作：\n  - 将当前的IP或CS：IP压入栈中\n  - 转移到标号处执行指令\n\n- call标号 \n  - 16位位移=“标号”处的地址 -call指令后的第一个字节的地址\n  - 16位位移的范围位 -32768~32767，用补码表示\n  - 16位位移由编译程序在编译时算出\n\n==call far ptr 标号==\n\n- 实现的是段间转移，把段地址也压栈了\n- CPU执行“call for ptr 标号”时的操作\n  - （SP）=（SP）-2\n  - （（SS）x16+（SP））=（CS）\n  - （SP）=（SP）-2\n  - （（SS）x16+（SP））=（IP）\n  - （CS）：标号所在的段地址\n  - （IP）：标号所在的偏移地址\n\n\n==转移地址在寄存器中的call==\n\n- 格式：call 16位寄存器\n- 功能：\n  - （SP）=（SP）-2\n  - （（SS）*16+（SP））=（IP）\n  - （IP）=（16位寄存器）\n\n==转移地址在内存中的call==\n\n- 格式：call word ptr 内存单元地址：把IP放入栈中	\n- 格式：call dword ptr 内存单元：把IP和CS都放入栈中\n\n\n\n==ret指令和retf==\n\n![21312](https://img-blog.csdnimg.cn/20200929191958982.png#pic_center)\n\n\n\n### 4. DF标志和段传送指令\n==DF==\n\n- 方向标志位（Direction Flag）\n- 功能：\n  - 在串处理指令中，控制每次操作后si，di的递减\n  - DF=0：每次操作后si，di递增\n  - DF=1：每次操作后si，di递减\n- 对DF指令进行设置的指令\n  - cld指令：将标志寄存器的DF位设为0（clear）\n  - std指令：将标志寄存器的DF位设为1（setup）\n\n\n\n\n\n==串传送指令==\n\n- movsb：（以字节为单位传送）\n  - （（ES）x16+（DI））=（（DS）x16+（SI））\n  - 如果DF=0则：（SI）=（SI）+1，（DI）=（DI）+1\n  - 如果DF=1则：（SI）=（SI）-1，（DI）=（DI）-1\n\n\n- movsw：（以字为单位传送）\n  - （（ES）x16+（DI））=（（DS）x16+（SI））\n  - 如果DF=0则：（SI）=（SI）+2，（DI）=（DI）+2\n  - 如果DF=1则：（SI）=（SI）-2，（DI）=（DI）-2\n\n\n- 字符串的复制\n```c\nassume cs:code\ndata segment\n	db \'welcome to masm!\'\n	db 16 dup(0)\ndata ends\n\ncode segment\nstart:\n	;初始化寄存器\n	mov ax,data\n	mov ds,ax\n	mov si,0\n	mov es,ax\n	mov di,16\n	cld\n	\n	;循环传送\n	mov cx,16\n	s:movsb\n	loop s\n	\n	mov ax,4c00h\n	int 21h\ncode ends\nend start\n```\n\n\n==rep指令==\n\n- rep指令常和串传送指令搭配使用\n- 功能：根据cx的值，重复执行后面的指令\n- 用法：rep movsb \n\n![12121212](https://img-blog.csdnimg.cn/20200929195134579.png#pic_center)\n\n- 上面一段代码可简化为\n```c\nassume cs:code\ndata segment\n	db \'welcome to masm!\'\n	db 16 dup(0)\ndata ends\n\ncode segment\nstart:\n	;初始化寄存器\n	mov ax,data\n	mov ds,ax\n	mov si,0\n	mov es,ax\n	mov di,16\n	cld\n	\n	;循环传送\n	mov cx,8\n	rep movsw\n	\n	mov ax,4c00h\n	int 21h\ncode ends\nend start\n```\n\n\n\n## 中断及外部设备的操作\n### 1. 移位指令\n\n- 逻辑左移：SHL OPR，CNT：把最高位移动到CF中，其他左移一位，低位补0\n- 循环左移：ROL OPR，CNT：最高位移动到最低位，其他位顺序左移\n- 逻辑右移：SHR OPR，CNT：把最低位移动到CF中，其他右移一位，高位补1\n- 算术左移：SAL OPR，CNT：和逻辑左移一样\n- 算术右移：SAR OPR，CNT：把最低位移到CF，其他右移，高位复制一份\n- 带进位循环左移：RCL OPR，CNT：最高位放到CF中，原CF中的放到最低位，其他左移一位\n- 带进位循环右移：RCR OPR，CNT：最高位补原CF的数\n\n![1231231231](https://img-blog.csdnimg.cn/20201002083646718.png#pic_center)\n\n\n### 2. 操作显示原理\n==屏幕上的内容=显存中的数据==\n\n![1212312312](https://img-blog.csdnimg.cn/20201002084242791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n![1231212](https://img-blog.csdnimg.cn/20201002084338469.png#pic_center)\n\n- 显存中的结构，每个字符有两个位表示\n\n![32qwr](https://img-blog.csdnimg.cn/2020100208485385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n- 显示例子：在屏幕中间显示：welcome to masm!\n\n\n~~~c\nassume cs:code\ndata segment\n	db \'welcome to masm!\'\ndata ends\n\ncode segment\nstart:\n	;初始化寄存器\n	mov ax,data\n	mov ds,ax\n	mov ax,0B800H\n	mov si,0\n	mov es,ax\n	mov di,160*12+80-16\n	\n	;显示字符串\n	mov cx,16\n	w:mov al,[si]\n	mov es:[di],al\n	inc di\n	mov al,71H\n	mov es:[di],al\n	inc si\n	inc di\n	loop w\n	\n	mov ax,4c00h\n	int 21h\ncode ends\nend start\n~~~\n\n### 3. 描述内存单元的标号\n\n- 数据标号同时描述内存地址和内存单元长度\n- 扩展用法：将标号当作数据来定义\n\n\n\n### 4. 直接定址表\n==数据的直接定址表==\n\n- 利用表，在两个数据集合之间建立一种映射关系，用查表的方法根据给出的数据得到其在另一集合中的对应数据\n\n## 高级汇编语言技术（宏汇编）\n\n\n### 1. 子程序的另一种写法\n~~~c\n名称 proc\n...\n名称 endp\n~~~\n![345634633](https://img-blog.csdnimg.cn/20201002110254727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n### 2. 程序的多文件组织\n\n- 文件中引用另一个文件：==extern 名称:far==\n- 被引用的文件头部申明可以被引用：==public 名称==\n- 编译时分别编译：\n  - ==masm p1==\n  - ==masm p2==\n  - ==link p1.OBJ+p2.OBJ==\n- 默认生成：p1.exe\n\n\n### 3. 汇编指令汇总\n\n- 数据传送指令\n  - 通用数据传送指令：mov，push，pop，xchg（交换指令：xchg 操作数1 操作数2）\n  - 累加器专用传送指令：in，out，xlat（换码指令：xlat或xlat opr）\n  - 地址传送指令：LEA（有效地址送寄存器指令），LDS（指针送寄存器和DS指令），LES（指针送寄存器和ES指令）\n  - 标志寄存器传送指令：LAHF（标志送AH指令），SAHF（AH送标志寄存器指令），PUSHF（标志进栈指令），POPF（标志出栈指令）\n  - 类型转换指令：CBW（字节转字指令），CWD（字转字节指令）\n\n\n- 算术指令\n  - 加法指令：ADD，ADC（带进位的加法），INC（加1）\n  - 减法指令：SUB，SBB（带借位的减法），DEC（减1），NEG（取负），CMP（减法，不影响操作数，只影响标志位）\n  - 乘法：MUL，IMUL（有符号数的乘法）\n  - 除法：DIV，IDIV（有符号数除法）\n  - 十进制指令：DAA（压缩BCD码加法十进制调整指令），DAS（压缩BCD码减法法十进制调整指令），AAA（非压缩BCD码加法十进制调整指令），AAS（非压缩BCD码减法十进制调整指令），AAM（非压缩BCD码乘法十进制调整指令），AAD（非压缩BCD码除法十进制调整指令）\n\n\n- 逻辑指令\n  - 逻辑运算指令：AND，OR，NOT，XOP，TEST\n  - 移位指令：SHL，SHR，SAL，SAR，ROL，ROR，RCL，RCR\n\n- 串处理指令\n  - 设置方向标志指令：CLD，STD\n  - 串处理指令：MOVSB/MOVSW，STOSB/STOSW，LODSB／LODSW，CMPSB／CMPSW，SCASB／SCASW\n\n\n- 控制转移指令\n  - 无条件转移指令：JMP\n  - 条件转移指令\n  - 循环指令：LOOP，LOOPZ/LOOPE，LOOPNZ/LOOPNE\n  - 子程序调用和返回指令：CALL，RET\n  - 中断与中断返回指令：INT，INTO，IRET \n\n- 处理机控制与杂项操作指令\n  - 标志处理指令：CLC，STC，CMC，CLD，STD，CLI，STI\n  - 其他处理机控制与杂项操作指令：\n    - NOP：无操作（机器码占一个字节）\n    - HTL：暂停机（等待一次外中断，之后继续执行程序）\n    - WAIT：等待（等待中断，之后仍继续等待）\n    - ESC：换码\n    - LOCK：封锁（维持总线的锁存信号，直到其后的指令执行完）\n\n\n### 4. 汇编伪操作汇总\n**伪操作**：在汇编程序对源程序汇编期间，由汇编程序处理的操作，可以完成如数据定义、分配存储区、指示程序结束等指令\n\n- 处理器选择伪操作\n![222222](https://img-blog.csdnimg.cn/20201002150624379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n- 段定义伪操作\n  - data segment     data ends：定义数据段\n  - extra segment     extra segment：定义附加段\n  - code segment    code segment：定义代码段\n![231312](https://img-blog.csdnimg.cn/20201002150957588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n- 程序开始和结束伪操作\n\n- ![1212](https://img-blog.csdnimg.cn/2020100215350427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n\n\n- 数据定义及存储器分配伪操作\n  - 助记符：DB，DW，DD，DF，DQ，DT\n- 表达式赋值伪操作\n  - 表达式名 EQU 表达式\n  - = 伪操作（允许重定义）\n- 地址计数器与对准伪操作\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201002155109224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n- 基数控制器伪操作\n\n\n\n\n### 5. 汇编操作符汇总\n\n- 算术操作符：+，-，*，/，MOD\n- 逻辑和移位操作符号：and，or，xor，not，shl，shr\n- 关系操作符：EQ（等于），NE（不等于），LT（小于），LE（小于等于），GT（大于），GE（大于等于）\n- 数值回送操作符：OFFSET（回送变量或标号的偏址/段址）、SEG、TYPE、LENGTH（回送由DUP定义的变量的单元数，其他情况返回1）、SIZE\n- 属性操作符：\n![12312312](https://img-blog.csdnimg.cn/20201002163139359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n### 6. 汇编过程\n\n![123123](https://img-blog.csdnimg.cn/20201002163940977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n- 伪指令不产生机器码\n- 汇编指令和机器码是一一对应的\n\n- Binary Viewer：一个文件查看器\n',2,'123456',0),(18,5,'2020-10-07 11:44:02','python爬取豆瓣Top250排行','python爬取豆瓣信息','https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2858981854,1700048767&fm=26&gp=0.jpg','<p><h3>目录</h3><ul><li><a href=\"#python_2\">python爬虫</a></li><ul><li><a href=\"#_7\">环境准备</a></li><li><a href=\"#_50\">预备知识</a></li><ul><li><a href=\"#Urllib_51\">Urllib</a></li><li><a href=\"#BeautifulSoup_86\">BeautifulSoup</a></li><li><a href=\"#_170\">正则表达式</a></li><li><a href=\"#xlwt_196\">xlwt表格操作</a></li></ul><li><a href=\"#sqlite3_207\">sqlite3数据库操作</a></li><li><a href=\"#_269\">获取数据</a></li><li><a href=\"#_296\">解析数据</a></li><li><a href=\"#_372\">保存数据到表格中</a></li><li><a href=\"#_391\">保存数据到数据库中</a></li><li><a href=\"#_442\">数据可视化</a></li><ul><li><a href=\"#Flask_444\">Flask框架</a></li><li><a href=\"#Echarts_540\">Echarts应用</a></li><li><a href=\"#WorldCloud_545\">WorldCloud应用</a></li></ul><li><a href=\"#_549\">完整代码</a></li></ul></ul></p>\n<h1><a id=\"python_2\"></a>python爬虫</h1>\n<ul>\n<li>网络爬虫：按照一定规则，自动抓取互联网信息的程序或者脚本<br />\n<a href=\"https://www.bilibili.com/video/BV12E411A7ZQ/?p=28\" target=\"_blank\">学习视频地址：https://www.bilibili.com/video/BV12E411A7ZQ/?p=28</a></li>\n</ul>\n<h2><a id=\"_7\"></a>环境准备</h2>\n<ul>\n<li>导入包配置</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> sys\n<span class=\"hljs-keyword\">from</span> bs4 <span class=\"hljs-keyword\">import</span> BeautifulSoup  <span class=\"hljs-comment\"># 网页解析，获取数据</span>\n<span class=\"hljs-keyword\">import</span> re  <span class=\"hljs-comment\"># 正则表达式，进行文字匹配</span>\n<span class=\"hljs-keyword\">import</span> urllib.request, urllib.error  <span class=\"hljs-comment\"># 制定URl，获取网页数据</span>\n<span class=\"hljs-keyword\">import</span> xlwt  <span class=\"hljs-comment\"># 进行excel操作</span>\n<span class=\"hljs-keyword\">import</span> sqlite3  <span class=\"hljs-comment\"># 进行sqlLite数据库操作</span>\n</code></div></pre>\n<ul>\n<li>基础文件结构</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-string\">\"\"\"\n爬取豆瓣电影排名250电影\n\"\"\"</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    url = <span class=\"hljs-string\">\'https://movie.douban.com/top250?start=0\'</span>\n    savepath=<span class=\"hljs-string\">\'.\\\\doubanTop250.xls\'</span>\n    <span class=\"hljs-comment\"># 1.爬取网页</span>\n    datalist = get_data(url)\n\n    <span class=\"hljs-comment\"># 3.保存数据</span>\n    sava_data()\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_data</span><span class=\"hljs-params\">(url)</span>:</span>\n    datalist = []\n    <span class=\"hljs-comment\"># 2.逐一解析数据</span>\n    <span class=\"hljs-keyword\">return</span> datalist\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sava_data</span><span class=\"hljs-params\">(savepath)</span>:</span>\n    print(<span class=\"hljs-string\">\"save\"</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\'__main__\'</span>:\n    main()\n\n</code></div></pre>\n<h2><a id=\"_50\"></a>预备知识</h2>\n<h3><a id=\"Urllib_51\"></a>Urllib</h3>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> urllib.request\n<span class=\"hljs-keyword\">import</span> urllib.parse\n\n<span class=\"hljs-comment\"># 通过get请求访问</span>\nresponse = urllib.request.urlopen(<span class=\"hljs-string\">\"http://www.baidu.com\"</span>)\nprint(response.read().decode(<span class=\"hljs-string\">\'utf-8\'</span>))  <span class=\"hljs-comment\"># 对获取到的源码进行utf-8解码</span>\n\n\n<span class=\"hljs-comment\"># 通过post请求访问:http://httpbin.org</span>\ndata = bytes(urllib.parse.urlencode({<span class=\"hljs-string\">\"hello\"</span>: <span class=\"hljs-string\">\"word\"</span>}), encoding=<span class=\"hljs-string\">\"utf-8\"</span>)\nresponse = urllib.request.urlopen(<span class=\"hljs-string\">\"http://httpbin.org/post\"</span>,data=data)\nprint(response.read().decode(<span class=\"hljs-string\">\'utf-8\'</span>))\n\n\n<span class=\"hljs-comment\"># 超时处理</span>\n<span class=\"hljs-keyword\">try</span>:\n    response = urllib.request.urlopen(<span class=\"hljs-string\">\"http://httpbin.org/get\"</span>,timeout=<span class=\"hljs-number\">1</span>)\n    print(response.read().decode(<span class=\"hljs-string\">\'utf-8\'</span>))\n<span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> error:\n    print(error)\n\n<span class=\"hljs-comment\"># 响应头</span>\nurl = <span class=\"hljs-string\">\"http://douban.com\"</span>\nheaders = {\n    <span class=\"hljs-string\">\"User-Agent\"</span>: <span class=\"hljs-string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36 Edg/85.0.564.68\"</span>\n}\nreq = urllib.request.Request(url=url, headers=headers, method=<span class=\"hljs-string\">\"POST\"</span>)\nresponse = urllib.request.urlopen(req, timeout=<span class=\"hljs-number\">3</span>)\nprint(response.status)\nprint(response.read().decode(<span class=\"hljs-string\">\'utf-8\'</span>))\n</code></div></pre>\n<h3><a id=\"BeautifulSoup_86\"></a>BeautifulSoup</h3>\n<ul>\n<li>将复杂的html转换成一个复杂的树形结构，每个节点都是python对象</li>\n<li>所有对象可以分文四种：\n<ul>\n<li>Tag:标签及其内容:(但是只是第一个标签)</li>\n<li>NavigableString:标签里的内容</li>\n<li>BeautifulSoup:自身，整个文档</li>\n<li>Comment:注释:是一个特殊的NavigableString输出的内容不包含注释符号</li>\n</ul>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">from</span> bs4 <span class=\"hljs-keyword\">import</span> BeautifulSoup\nfile = open(<span class=\"hljs-string\">\"./../baidu.html\"</span>, <span class=\"hljs-string\">\"rb\"</span>)\nhtml = file.read()\nbs = BeautifulSoup(html, <span class=\"hljs-string\">\"html.parser\"</span>)\n\n<span class=\"hljs-comment\"># 1. tag:标签及其内容:(但是只是第一个标签)</span>\nprint(bs.title)\nprint(bs.a)\nprint(bs.a.attrs)   <span class=\"hljs-comment\"># 得到标签的属性以字典的格式储存</span>\nprint(type(bs.a))\n\n\n<span class=\"hljs-comment\"># 2.NavigableString:标签里的内容</span>\nprint(bs.title.string)\nprint(type(bs.title.string))\n\n<span class=\"hljs-comment\"># 3.BeautifulSoup:自身，整个文档</span>\nprint(bs.name)\nprint(type(bs))\n\n<span class=\"hljs-comment\"># 4.Comment:注释:是一个特殊的NavigableString输出的内容不包含注释符号</span>\nprint(bs.a.string)\n</code></div></pre>\n<ul>\n<li>文档的遍历和查找</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-comment\"># 文档的遍历:contents</span>\nprint(bs.head.contents[<span class=\"hljs-number\">1</span>])\n\nprint(<span class=\"hljs-string\">\"---------------------------------\"</span>)\n<span class=\"hljs-comment\"># 文档的搜索</span>\n<span class=\"hljs-comment\"># 字符串过滤:查找与字符串完全匹配的内容</span>\na_list = bs.find_all(<span class=\"hljs-string\">\"a\"</span>)  <span class=\"hljs-comment\"># 查找所有的a标签</span>\nprint(a_list)\n\n\nprint(<span class=\"hljs-string\">\"---------------------------------\"</span>)\n\n<span class=\"hljs-comment\"># 正则表达式搜索:使用search()方法来匹配</span>\n<span class=\"hljs-keyword\">import</span> re\n\na_list1 = bs.find_all(re.compile(<span class=\"hljs-string\">\"a\"</span>))\nprint(a_list1)\n\nprint(<span class=\"hljs-string\">\"---------------------------------\"</span>)\n\n<span class=\"hljs-comment\"># 使用方法来搜索:传入一个函数，根据函数的要求来搜索</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">name_is_exists</span><span class=\"hljs-params\">(tag)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> tag.has_attr(<span class=\"hljs-string\">\"name\"</span>)\n\n\na_list2 = bs.find_all(name_is_exists)\nprint(a_list2)\n\nprint(<span class=\"hljs-string\">\"---------------------------------\"</span>)\n\n<span class=\"hljs-comment\"># keywords:参数搜索</span>\n<span class=\"hljs-comment\"># a_list3 = bs.find_all(class_=True)</span>\na_list3 = bs.find_all(text=<span class=\"hljs-string\">\"新闻\"</span>)\na_list3 = bs.find_all(text=re.compile(<span class=\"hljs-string\">\"\\d\"</span>),limit=<span class=\"hljs-number\">2</span>)    <span class=\"hljs-comment\"># 根据正则表达式匹配内容，limit限制查找个数</span>\n<span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> a_list3:\n    print(item)\n\n\nprint(<span class=\"hljs-string\">\"---------------------------------\"</span>)\n<span class=\"hljs-comment\"># 选择器类似css中的选择器</span>\nprint(bs.select(<span class=\"hljs-string\">\"title\"</span>))        <span class=\"hljs-comment\"># 通过标签</span>\nprint(bs.select(<span class=\"hljs-string\">\".classname\"</span>))   <span class=\"hljs-comment\"># 通过类名</span>\nprint(bs.select(<span class=\"hljs-string\">\"#idname\"</span>))      <span class=\"hljs-comment\"># 通过id查找</span>\nprint(bs.select(<span class=\"hljs-string\">\"a[class=\'classname\']\"</span>))      <span class=\"hljs-comment\"># 通过属性查找</span>\nprint(bs.select(<span class=\"hljs-string\">\"head&gt;title\"</span>))      <span class=\"hljs-comment\"># 通过子标签</span>\n</code></div></pre>\n<h3><a id=\"_170\"></a>正则表达式</h3>\n<p>参考文档链接：<a href=\"https://www.runoob.com/regexp/regexp-syntax.html\" target=\"_blank\">https://www.runoob.com/regexp/regexp-syntax.html</a></p>\n<ul>\n<li>python中的re库<br />\n<img src=\"https://img-blog.csdnimg.cn/20201004203732333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"123\" /></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-comment\"># 正则表达式：字符串匹配（判断字符串是否符合一定的标准）</span>\n<span class=\"hljs-keyword\">import</span> re\n<span class=\"hljs-comment\"># 创建模式对象</span>\npat = re.compile(<span class=\"hljs-string\">\"AA\"</span>)  <span class=\"hljs-comment\"># 此处的AA是正则表达式</span>\na = pat.search(<span class=\"hljs-string\">\"AAA\"</span>)            <span class=\"hljs-comment\"># search字符串被校验的内容</span>\nprint(a)\n\na = re.search(<span class=\"hljs-string\">\"abc\"</span>, <span class=\"hljs-string\">\"aabcc\"</span>)    <span class=\"hljs-comment\"># 前面的字符串是规则，后面的字符串是被匹配的对象</span>\nprint(a)\n\na = re.findall(<span class=\"hljs-string\">\"[a-z]+\"</span>, <span class=\"hljs-string\">\"aABCXabuhua\"</span>)  <span class=\"hljs-comment\"># 找到所有的匹配项</span>\nprint(a)\n\na = re.sub(<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"A\"</span>, <span class=\"hljs-string\">\"abcdefg\"</span>)   <span class=\"hljs-comment\">#找到a用A替换</span>\nprint(a)\n<span class=\"hljs-comment\"># 建议在正则表达式中，被比较的字符串前面加上r，不用担心转义字符的问题</span>\n</code></div></pre>\n<h3><a id=\"xlwt_196\"></a>xlwt表格操作</h3>\n<ul>\n<li>简单操作</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> xlwt\nwork_book = xlwt.Workbook(encoding=<span class=\"hljs-string\">\"utf-8\"</span>)\nwork_sheet = work_book.add_sheet(<span class=\"hljs-string\">\"sheet1\"</span>)\nwork_sheet.write(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\'hello\'</span>) <span class=\"hljs-comment\"># 参数：行、列、内容</span>\nwork_book.save(<span class=\"hljs-string\">\'student.xls\'</span>)\n</code></div></pre>\n<h2><a id=\"sqlite3_207\"></a>sqlite3数据库操作</h2>\n<ul>\n<li>建表语句</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> sqlite3\nconnet = sqlite3.connect(<span class=\"hljs-string\">\"test.db\"</span>) <span class=\"hljs-comment\"># 打开或创建文件</span>\n<span class=\"hljs-comment\"># 建表</span>\nc = connet.cursor()  <span class=\"hljs-comment\"># 获取游标</span>\nsql = <span class=\"hljs-string\">\'\'\'\n    create table if not exists doubanTop250 (\n        id integer not null primary key autoincrement,\n        find_link text not null,\n        find_image text,\n        find_ctitle char(100),\n        find_otitle  char(100),\n        find_score int(4),\n        find_judge_number int(10),\n        find_sign char(200),\n        find_description text\n    )\n\'\'\'</span>\nc.execute(sql)      <span class=\"hljs-comment\"># 执行sql语句</span>\nconnet.commit()     <span class=\"hljs-comment\"># 提交</span>\nconnet.close()      <span class=\"hljs-comment\"># 关闭数据库</span>\n\n</code></div></pre>\n<ul>\n<li>插入语句</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> sqlite3\nconnet = sqlite3.connect(<span class=\"hljs-string\">\"test.db\"</span>) <span class=\"hljs-comment\"># 打开或创建文件</span>\n<span class=\"hljs-comment\"># 建表</span>\nc = connet.cursor()  <span class=\"hljs-comment\"># 获取游标</span>\nsql = <span class=\"hljs-string\">\'\'\'\n    insert into doubanTop250 (find_link,find_image,find_ctitle,find_otitle,find_score,find_judge_number,find_sign,find_description)\n    values (\"1\",\"1\",\"1\",\"1\",1,1,\"1\",\"1\");\n\'\'\'</span>\nc.execute(sql)      <span class=\"hljs-comment\"># 执行sql语句</span>\nconnet.commit()     <span class=\"hljs-comment\"># 提交</span>\nconnet.close()      <span class=\"hljs-comment\"># 关闭数据库</span>\n</code></div></pre>\n<ul>\n<li>查询语句</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> sqlite3\nconnet = sqlite3.connect(<span class=\"hljs-string\">\"test.db\"</span>) <span class=\"hljs-comment\"># 打开或创建文件</span>\n<span class=\"hljs-comment\"># 建表</span>\nc = connet.cursor()  <span class=\"hljs-comment\"># 获取游标</span>\nsql = <span class=\"hljs-string\">\'\'\'\n    select * from doubanTop250;\n\'\'\'</span>\nresponse = c.execute(sql)      <span class=\"hljs-comment\"># 执行sql语句</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> response:\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span>  range(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>):\n        print(i[j])\n\nconnet.commit()     <span class=\"hljs-comment\"># 提交</span>\nconnet.close()      <span class=\"hljs-comment\"># 关闭数据库</span>\n</code></div></pre>\n<h2><a id=\"_269\"></a>获取数据</h2>\n<ul>\n<li>根据一个URL获取一个页面的html数据</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-comment\"># 得到一个指定页面的信息</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">ask_url</span><span class=\"hljs-params\">(url)</span>:</span>\n    head = {\n        <span class=\"hljs-string\">\"User-Agent\"</span>: <span class=\"hljs-string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0\"</span>\n    }\n    <span class=\"hljs-string\">\"\"\"\n    head:模拟浏览器头部信息\n    \"User-Agent\":用户代理\n    \"\"\"</span>\n    request = urllib.request.Request(url=url, headers=head)\n    html = <span class=\"hljs-string\">\"\"</span>\n    <span class=\"hljs-keyword\">try</span>:\n        response = urllib.request.urlopen(request)\n        html = response.read().decode(<span class=\"hljs-string\">\"utf-8\"</span>)\n    <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n        <span class=\"hljs-keyword\">if</span> hasattr(e,<span class=\"hljs-string\">\"code\"</span>):\n            print(e.code)\n        <span class=\"hljs-keyword\">if</span> hasattr(e,<span class=\"hljs-string\">\"reason\"</span>):\n            print(e.reason)\n    <span class=\"hljs-keyword\">return</span> html\n\n</code></div></pre>\n<h2><a id=\"_296\"></a>解析数据</h2>\n<ul>\n<li>豆瓣排名分析<br />\n<img src=\"https://img-blog.csdnimg.cn/20201004211017864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"123123\" /></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-comment\"># 定义一些全局变量</span>\n<span class=\"hljs-comment\"># 电影链接正则表达式</span>\nfind_link = re.compile(<span class=\"hljs-string\">r\'&lt;a href=\"(.*?)\"&gt;\'</span>)\n<span class=\"hljs-comment\"># 电影图片链接正则表达式,re.S忽略换行符</span>\n<span class=\"hljs-comment\"># find_image = re.compile(r\'&lt;img(.*)src=\"(.*?)\" class=\"\"&gt;\', re.S)</span>\nfind_image = re.compile(<span class=\"hljs-string\">r\'&lt;img.*src=\"(.*?)\"\'</span>, re.S)\n<span class=\"hljs-comment\"># 电影标题</span>\nfind_title = re.compile(<span class=\"hljs-string\">r\'&lt;span class=\"title\"&gt;(.*)&lt;/span&gt;\'</span>)\n<span class=\"hljs-comment\"># 影片评分</span>\nfind_score = re.compile(<span class=\"hljs-string\">r\'&lt;span class=\"rating_num\" property=\"v:average\"&gt;(.*)&lt;/span&gt;\'</span>)\n<span class=\"hljs-comment\"># 评价人数</span>\nfind_judge_number = re.compile(<span class=\"hljs-string\">r\'&lt;span&gt;(\\d*)人评价&lt;/span&gt;\'</span>)\n<span class=\"hljs-comment\"># 概况</span>\nfind_sign = re.compile(<span class=\"hljs-string\">r\'&lt;span class=\"inq\"&gt;(.*)&lt;/span&gt;\'</span>)\n<span class=\"hljs-comment\"># 影片相关内容</span>\nfind_description = re.compile(<span class=\"hljs-string\">r\'&lt;p class=\"\"&gt;(.*?)&lt;/p&gt;\'</span>, re.S)\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_data</span><span class=\"hljs-params\">(url)</span>:</span>\n    datalist = []\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>):      <span class=\"hljs-comment\"># 循环获取10个页面数据</span>\n        urls = url + str(i*<span class=\"hljs-number\">25</span>)\n        html = ask_url(urls)    <span class=\"hljs-comment\"># 保存网页信息</span>\n        <span class=\"hljs-comment\"># 2.逐一解析数据</span>\n        soup = BeautifulSoup(html, <span class=\"hljs-string\">\"html.parser\"</span>)\n        <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> soup.find_all(<span class=\"hljs-string\">\'div\'</span>, class_=<span class=\"hljs-string\">\"item\"</span>):  <span class=\"hljs-comment\"># 查找符合要求的字符串，形成列表</span>\n            data = []   <span class=\"hljs-comment\"># 保存一部电影的所有信息</span>\n            item = str(item)\n\n            <span class=\"hljs-comment\"># 获取影片详情链接</span>\n            link = re.findall(find_link, item)[<span class=\"hljs-number\">0</span>]  <span class=\"hljs-comment\"># re库通过正则表达式查找指定字符串</span>\n            data.append(link)\n\n            img = re.findall(find_image, item)[<span class=\"hljs-number\">0</span>]\n            data.append(img)\n\n            title = re.findall(find_title, item)\n            <span class=\"hljs-comment\"># 判断中文外文名</span>\n            <span class=\"hljs-keyword\">if</span> len(title) == <span class=\"hljs-number\">2</span>:\n                ctitle = title[<span class=\"hljs-number\">0</span>]\n                data.append(ctitle)\n                otitle = title[<span class=\"hljs-number\">1</span>].replace(<span class=\"hljs-string\">\"/\"</span>,<span class=\"hljs-string\">\"\"</span>)   <span class=\"hljs-comment\"># 去掉名称前的斜杠</span>\n                data.append(otitle)\n            <span class=\"hljs-keyword\">else</span>:\n                data.append(title)\n                data.append(<span class=\"hljs-string\">\" \"</span>)    <span class=\"hljs-comment\"># 留空</span>\n\n            score = re.findall(find_score, item)[<span class=\"hljs-number\">0</span>]\n            data.append(score)\n\n            judge_number = re.findall(find_judge_number, item)[<span class=\"hljs-number\">0</span>]\n            data.append(judge_number)\n\n            sign = re.findall(find_sign, item)\n            <span class=\"hljs-keyword\">if</span> len(sign) != <span class=\"hljs-number\">0</span>:\n                data.append(sign[<span class=\"hljs-number\">0</span>].replace(<span class=\"hljs-string\">\"。\"</span>, <span class=\"hljs-string\">\"\"</span>))\n            <span class=\"hljs-keyword\">else</span>:\n                data.append(<span class=\"hljs-string\">\" \"</span>)\n\n            description = re.findall(find_description, item)[<span class=\"hljs-number\">0</span>]\n            description = re.sub(<span class=\"hljs-string\">\'&lt;br(\\s+)?/&gt;(\\s+)?\'</span>,<span class=\"hljs-string\">\"\"</span>,description)    <span class=\"hljs-comment\"># 去掉&lt;br/&gt;</span>\n            description = re.sub(<span class=\"hljs-string\">\'/\'</span>,<span class=\"hljs-string\">\"\"</span>,description)\n            data.append(description.strip())    <span class=\"hljs-comment\"># 去掉前后的空格</span>\n            print(data)\n            datalist.append(data)   <span class=\"hljs-comment\"># 处理好的</span>\n\n    <span class=\"hljs-keyword\">return</span> datalist\n</code></div></pre>\n<h2><a id=\"_372\"></a>保存数据到表格中</h2>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-comment\"># 保存数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sava_data</span><span class=\"hljs-params\">(savepath, datalist)</span>:</span>\n    print(<span class=\"hljs-string\">\'------------save------------\'</span>)\n    work_book = xlwt.Workbook(encoding=<span class=\"hljs-string\">\"utf-8\"</span>, style_compression=<span class=\"hljs-number\">0</span>)\n    work_sheet = work_book.add_sheet(<span class=\"hljs-string\">\"doubanTop250\"</span>, cell_overwrite_ok=<span class=\"hljs-keyword\">True</span>)\n    col = (<span class=\"hljs-string\">\"电影详情链接\"</span>, <span class=\"hljs-string\">\"图片链接\"</span> , <span class=\"hljs-string\">\"影片中文名\"</span>, <span class=\"hljs-string\">\"影片外文名\"</span>, <span class=\"hljs-string\">\"评分\"</span>, <span class=\"hljs-string\">\"评价数\"</span>, <span class=\"hljs-string\">\"概况\"</span>, <span class=\"hljs-string\">\"详情\"</span>)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>):\n        work_sheet.write(<span class=\"hljs-number\">0</span>, i, col[i])\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">250</span>):\n        print(<span class=\"hljs-string\">\"第%d条\"</span> %i)\n        data = datalist[i]\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>):\n            work_sheet.write(i+<span class=\"hljs-number\">1</span>, j, data[j])\n    work_book.save(savepath)    <span class=\"hljs-comment\"># 保存数据</span>\n</code></div></pre>\n<h2><a id=\"_391\"></a>保存数据到数据库中</h2>\n<ul>\n<li>保存数据到数据库中</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\">\n<span class=\"hljs-comment\"># 保存数据到sqlite</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sava_data_sqlite</span><span class=\"hljs-params\">(datalist)</span>:</span>\n    print(<span class=\"hljs-string\">\"------------SQLite------------\"</span>)\n    init_sqlite()   <span class=\"hljs-comment\"># 初始化数控库</span>\n    <span class=\"hljs-comment\"># 插入数据</span>\n    connet = sqlite3.connect(<span class=\"hljs-string\">\"test.db\"</span>)  <span class=\"hljs-comment\"># 打开或创建文件</span>\n    c = connet.cursor()  <span class=\"hljs-comment\"># 获取游标</span>\n    <span class=\"hljs-keyword\">for</span> data <span class=\"hljs-keyword\">in</span> datalist:\n        <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>):\n            <span class=\"hljs-keyword\">if</span> index <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>):\n                data[index] = <span class=\"hljs-string\">\'\"\'</span>+data[index]+<span class=\"hljs-string\">\'\"\'</span>\n        sql = <span class=\"hljs-string\">\'\'\'\n            insert into doubanTop250(find_link,find_image,find_ctitle,find_otitle,find_score,find_judge_number,find_sign,find_description)\n            values(%s)\'\'\'</span>%<span class=\"hljs-string\">\",\"</span>.join(data)\n        print(sql)\n        c.execute(sql)\n        connet.commit()\n\n    c.close()\n    connet.close()\n\n\n<span class=\"hljs-comment\"># 建表语句</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">init_sqlite</span><span class=\"hljs-params\">()</span>:</span>\n    connet = sqlite3.connect(<span class=\"hljs-string\">\"test.db\"</span>)  <span class=\"hljs-comment\"># 打开或创建文件</span>\n    <span class=\"hljs-comment\"># 建表</span>\n    c = connet.cursor()  <span class=\"hljs-comment\"># 获取游标</span>\n    sql = <span class=\"hljs-string\">\'\'\'\n        create table if not exists doubanTop250 (\n            id integer not null primary key autoincrement,\n            find_link text not null,\n            find_image text,\n            find_ctitle char(100),\n            find_otitle  char(100),\n            find_score int(4),\n            find_judge_number int(10),\n            find_sign char(200),\n            find_description text\n        )\n    \'\'\'</span>\n    c.execute(sql)  <span class=\"hljs-comment\"># 执行sql语句</span>\n    connet.commit()  <span class=\"hljs-comment\"># 提交</span>\n    connet.close()  <span class=\"hljs-comment\"># 关闭数据库</span>\n</code></div></pre>\n<h2><a id=\"_442\"></a>数据可视化</h2>\n<h3><a id=\"Flask_444\"></a>Flask框架</h3>\n<ul>\n<li>web框架</li>\n</ul>\n<p>新建一个flask框架</p>\n<ul>\n<li>app.py的测试文件：</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask, render_template, request\n<span class=\"hljs-keyword\">import</span> datetime\n\napp = Flask(__name__)\n\n\n<span class=\"hljs-comment\"># 通过访问路径，获取用户的字符串参数</span>\n<span class=\"hljs-meta\">@app.route(\'/index/&lt;name&gt;\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hello_word</span><span class=\"hljs-params\">(name)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\'hello word %s\'</span>%name\n\n\n<span class=\"hljs-comment\"># 通过访问路径，获取用户的字符串参数</span>\n<span class=\"hljs-meta\">@app.route(\'/index/&lt;int:id&gt;\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hello_word2</span><span class=\"hljs-params\">(id)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\'hello %d\'</span>%id\n\n\n<span class=\"hljs-comment\"># 返回给用户渲染后的网页文件</span>\n<span class=\"hljs-meta\">@app.route(\'/\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span><span class=\"hljs-params\">()</span>:</span>\n    time = datetime.date.today()        <span class=\"hljs-comment\"># 向网页页面传递的参数</span>\n    name = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]                    <span class=\"hljs-comment\"># 列表类型</span>\n    dic = {<span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"黄耀辉\"</span>, <span class=\"hljs-string\">\"age\"</span>: <span class=\"hljs-string\">\"18\"</span>}  <span class=\"hljs-comment\"># 字典类型</span>\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"index.html\"</span>, time=time, name=name, dic=dic)\n\n\n<span class=\"hljs-meta\">@app.route(\'/register\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">register</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"register.html\"</span>)\n\n\n<span class=\"hljs-meta\">@app.route(\'/result\', methods=[\'POST\'])</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">register_result</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-keyword\">if</span> request.method == <span class=\"hljs-string\">\'POST\'</span>:\n        result = request.form\n        <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"result.html\"</span>, result=result)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"error.html\"</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\'__main__\'</span>:\n    app.run(debug=<span class=\"hljs-keyword\">True</span>)\n\n</code></div></pre>\n<ul>\n<li>html中的数据操作</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>豆瓣爬虫<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>时间:{{time}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    测试列表：\n    {%for i in name%}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n        {{i}}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    {% endfor %}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    测试字典：\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span>\n        {% for key,value in dic.items() %}\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{key}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{value}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n        {% endfor %}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n</code></div></pre>\n<ul>\n<li>表单提交</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"{{url_for(\'result\')}}\"</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"post\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>姓名: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>性别: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"sex\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>年龄: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"age\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>地址: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"address\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n</code></div></pre>\n<h3><a id=\"Echarts_540\"></a>Echarts应用</h3>\n<ul>\n<li>百度数据可视化应用<br />\n<a href=\"https://echarts.apache.org/examples/zh/index.html#chart-type-drag\" target=\"_blank\">官网地址链接</a></li>\n</ul>\n<h3><a id=\"WorldCloud_545\"></a>WorldCloud应用</h3>\n<ul>\n<li>词云<br />\n<a href=\"https://amueller.github.io/word_cloud/\" target=\"_blank\">官网地址地址</a></li>\n</ul>\n<h2><a id=\"_549\"></a>完整代码</h2>\n<ul>\n<li>app.py</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask, render_template, request\n<span class=\"hljs-keyword\">import</span> sqlite3\n<span class=\"hljs-keyword\">import</span> jieba    <span class=\"hljs-comment\"># 分词</span>\n<span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot <span class=\"hljs-keyword\">as</span> plt    <span class=\"hljs-comment\"># 绘图，数据可视化</span>\n<span class=\"hljs-keyword\">from</span> wordcloud <span class=\"hljs-keyword\">import</span> WordCloud         <span class=\"hljs-comment\"># 词云</span>\n<span class=\"hljs-keyword\">from</span> PIL <span class=\"hljs-keyword\">import</span> Image                   <span class=\"hljs-comment\"># 图片处理</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np                      <span class=\"hljs-comment\"># 矩阵运算</span>\n\n\napp = Flask(__name__)\n\n\n<span class=\"hljs-meta\">@app.route(\'/\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">home</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"home.html\"</span>)\n\n\n<span class=\"hljs-meta\">@app.route(\'/movie\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">movie</span><span class=\"hljs-params\">()</span>:</span>\n    movies = []\n    con = sqlite3.connect(<span class=\"hljs-string\">\"./douban/test.db\"</span>)\n    cur = con.cursor()\n    sql = <span class=\"hljs-string\">\"select * from doubanTop250\"</span>\n    data = cur.execute(sql)\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> data:\n        movies.append(item)\n\n    cur.close()\n    con.close()\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"movie.html\"</span>, movies=movies)\n\n\n<span class=\"hljs-meta\">@app.route(\'/score\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">score</span><span class=\"hljs-params\">()</span>:</span>\n    find_score = []\n    find_number = []\n    con = sqlite3.connect(<span class=\"hljs-string\">\"./douban/test.db\"</span>)\n    cur = con.cursor()\n    sql = <span class=\"hljs-string\">\"select find_score,count(find_score) from doubanTop250 group by find_score\"</span>\n    data = cur.execute(sql)\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> data:\n        find_score.append(item[<span class=\"hljs-number\">0</span>])\n        find_number.append(item[<span class=\"hljs-number\">1</span>])\n    cur.close()\n    con.close()\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"score.html\"</span>, score=find_score, number=find_number)\n\n\n<span class=\"hljs-meta\">@app.route(\'/word\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">word</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\"># 获取数据</span>\n    con = sqlite3.connect(<span class=\"hljs-string\">\"./douban/test.db\"</span>)\n    cur = con.cursor()\n    sql=<span class=\"hljs-string\">\"select find_sign from doubanTop250\"</span>\n    data = con.execute(sql)\n    <span class=\"hljs-comment\"># 拼接</span>\n    text = <span class=\"hljs-string\">\"\"</span>\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> data:\n        text = text + item[<span class=\"hljs-number\">0</span>]\n    cut = jieba.cut(text)\n    string = <span class=\"hljs-string\">\" \"</span>.join(cut)\n    cur.close()\n    con.close()\n    <span class=\"hljs-comment\"># 找到一张图片</span>\n    img = Image.open(<span class=\"hljs-string\">\"./static/timg.jpg\"</span>)    <span class=\"hljs-comment\"># 打开遮罩图片</span>\n    img_array = np.array(img)                <span class=\"hljs-comment\"># 将图片转换为数组</span>\n    wold_cloud = WordCloud(\n        background_color=<span class=\"hljs-string\">\"#E4E7ED\"</span>,\n        mask=img_array,\n        font_path=<span class=\"hljs-string\">\"STKAITI.TTF\"</span>,    <span class=\"hljs-comment\"># 字体所在位置</span>\n    ).generate_from_text(string)    <span class=\"hljs-comment\"># 放入词</span>\n    <span class=\"hljs-comment\"># 绘制图片</span>\n    fig = plt.figure(<span class=\"hljs-number\">1</span>)\n    plt.imshow(wold_cloud)\n    plt.axis(<span class=\"hljs-string\">\'off\'</span>)     <span class=\"hljs-comment\"># 不显示坐标轴</span>\n    <span class=\"hljs-comment\"># plt.show()  # 显示生成的词云图片</span>\n    plt.savefig(<span class=\"hljs-string\">\"./static/word.jpg\"</span>, dpi=<span class=\"hljs-number\">500</span>)\n\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"word.html\"</span>)\n\n\n<span class=\"hljs-meta\">@app.route(\'/author\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">author</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"author.html\"</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\'__main__\'</span>:\n    app.run(debug=<span class=\"hljs-keyword\">True</span>)\n</code></div></pre>\n<ul>\n<li>前端页面</li>\n<li>home.html</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"utf-8\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>豆瓣top260<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"description\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"Premium Bootstrap 4 Landing Page Template\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"keywords\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"bootstrap 4, premium, marketing, multipurpose\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"Shreethemes\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"author\"</span> /&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- favicon --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"shortcut icon\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"images/favicon.ico\"</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Bootstrap css --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"static/css/bootstrap.min.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span> /&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- 图标库 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"static/css/materialdesignicons.min.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"static/css/unicons.css\"</span> /&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Pe7 Icon --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"static/css/pe-icon-7.css\"</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Icons --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"static/css/magnific-popup.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span> /&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Main css File --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"static/css/style.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"static/css/default.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"color-opt\"</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Navbar STart 导航栏--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"topnav\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"defaultscroll sticky\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background: #409EFF\"</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n		<span class=\"hljs-comment\">&lt;!-- Logo container--&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"logo\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">\"_blank\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"color: #0b0b0b\"</span>&gt;</span>\n				<span class=\"hljs-comment\">&lt;!-- Landkey --&gt;</span>\n				豆瓣Top250\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"navigation\"</span>&gt;</span>\n			<span class=\"hljs-comment\">&lt;!-- Navigation Menu--&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"navigation-menu\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"has-submenu\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span>&gt;</span>首页<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"has-submenu\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/movie\"</span>&gt;</span>电影<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"has-submenu\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/score\"</span>&gt;</span>评分<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"has-submenu\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/word\"</span>&gt;</span>词云<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"has-submenu\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/author\"</span>&gt;</span>作者<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end navigation menu--&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end navigation--&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end container--&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end header--&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Navbar End --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"section\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"price\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background: #E4E7ED;min-height: 600px\"</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row justify-content-center\"</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-12\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"section-title text-center mb-4 pb-2\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h4</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"title mb-4\"</span>&gt;</span>豆瓣电影Top250数据分析<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h4</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"text-muted para-desc mx-auto mb-0\"</span>&gt;</span>应用Python爬虫、Flask框架、Echarts、Word Cloud等技术实现<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end col--&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end row--&gt;</span>\n\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row\"</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-lg-3 col-md-6 col-12 mt-4 pt-2\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/movie\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card service-wrapper rounded border-0 shadow px-4 py-5\"</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"icon text-center text-primary h1 shadow rounded bg-white\"</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"uim uim-airplay\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content mt-4\"</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h5</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"title\"</span>&gt;</span>经典电影<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h5</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end col--&gt;</span>\n\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-lg-3 col-md-6 col-12 mt-4 pt-2\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card service-wrapper rounded border-0 shadow px-4 py-5\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/score\"</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"icon text-center text-primary h1 shadow rounded bg-white\"</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"uim uim-circle-layer\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content mt-4\"</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h5</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"title\"</span>&gt;</span>评分统计<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h5</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end col--&gt;</span>\n\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-lg-3 col-md-6 col-12 mt-4 pt-2\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card service-wrapper rounded border-0 shadow px-4 py-5\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/word\"</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"icon text-center text-primary h1 shadow rounded bg-white\"</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"uim uim-signal-alt-3\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content mt-4\"</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h5</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"title\"</span>&gt;</span>词汇统计<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h5</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end col--&gt;</span>\n\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-lg-3 col-md-6 col-12 mt-4 pt-2\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card service-wrapper rounded border-0 shadow px-4 py-5\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/author\"</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"icon text-center text-primary h1 shadow rounded bg-white\"</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"uim uim-flip-h-alt\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content mt-4\"</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h5</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"title\"</span>&gt;</span>作者信息<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h5</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end col--&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end row--&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end container--&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end section--&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-dark footer-bar py-4\"</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row justify-content-center\"</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-12 text-center\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"foot-color mb-0\"</span>&gt;</span>persistenthuang@163.com<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- javascript --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/bootstrap.bundle.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/jquery.easing.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/scrollspy.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Magnific popup --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/jquery.magnific-popup.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/magnific.init.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Parallax --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/parallax.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- 图标库 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/feather.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Contact --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/contact.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Main Js --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/app.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></div></pre>\n<ul>\n<li>move.html</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-comment\">&lt;!-- Start 评分 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"section\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"price\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background: #E4E7ED;min-height: 600px\"</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row justify-content-center\"</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-12\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"section-title text-center mb-4 pb-2\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h4</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"title mb-4\"</span>&gt;</span>豆瓣电影Top250电影<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h4</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end col--&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end row--&gt;</span>\n		<span class=\"hljs-comment\">&lt;!--表格--&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"table table-hover table-light\"</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>排名<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>中文名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>外文名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>评分<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>人数<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>一句话描述<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>其他信息<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n			{%for movie in movies%}\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{movie[0]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"{{movie[1]}}\"</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">\"_blank\"</span>&gt;</span>\n						{{movie[3]}}\n					<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{movie[4]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{movie[5]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{movie[6]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{movie[7]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{movie[8]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n			{%endfor%}\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end container--&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end section--&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-dark footer-bar py-4\"</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row justify-content-center\"</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-12 text-center\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"foot-color mb-0\"</span>&gt;</span>persistenthuang@163.com<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>\n</code></div></pre>\n<ul>\n<li>score.html</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-comment\">&lt;!-- Start 评分 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"section\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"price\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background: #E4E7ED;min-height: 600px\"</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row justify-content-center\"</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-12\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"section-title text-center mb-4 pb-2\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h4</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"title mb-4\"</span>&gt;</span>豆瓣电影Top250评分分布图<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h4</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end col--&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end row--&gt;</span>\n\n		<span class=\"hljs-comment\">&lt;!-- 为 ECharts 准备一个具备大小（宽高）的 DOM --&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"main\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width: 100%;height:450px;margin: 0 auto;\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end container--&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end section--&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-dark footer-bar py-4\"</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row justify-content-center\"</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-12 text-center\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"foot-color mb-0\"</span>&gt;</span>persistenthuang@163.com<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">\n	<span class=\"hljs-comment\">// 基于准备好的dom，初始化echarts实例</span>\n	<span class=\"hljs-keyword\">var</span> myChart = echarts.init( <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\'main\'</span>));\n	<span class=\"hljs-keyword\">var</span> dataAxis = {{ score }};\n	<span class=\"hljs-keyword\">var</span> data = {{ number }};\n	<span class=\"hljs-keyword\">var</span> yMax = <span class=\"hljs-number\">50</span>;\n	<span class=\"hljs-keyword\">var</span> dataShadow = [];\n\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; data.length; i++) {\n		dataShadow.push(yMax);\n	}\n\n	option = {\n		<span class=\"hljs-attr\">xAxis</span>: {\n			<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'category\'</span>,\n			<span class=\"hljs-attr\">data</span>: dataAxis,\n			<span class=\"hljs-attr\">axisLabel</span>: {\n				<span class=\"hljs-attr\">inside</span>: <span class=\"hljs-literal\">true</span>,\n				<span class=\"hljs-attr\">textStyle</span>: {\n					<span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#1c1b1b\'</span>\n				}\n			},\n			<span class=\"hljs-attr\">axisTick</span>: {\n				<span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">false</span>\n			},\n			<span class=\"hljs-attr\">axisLine</span>: {\n				<span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">false</span>\n			},\n			<span class=\"hljs-attr\">z</span>: <span class=\"hljs-number\">10</span>\n		},\n		<span class=\"hljs-attr\">yAxis</span>: {\n			<span class=\"hljs-attr\">axisLine</span>: {\n				<span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">false</span>\n			},\n			<span class=\"hljs-attr\">axisTick</span>: {\n				<span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">false</span>\n			},\n			<span class=\"hljs-attr\">axisLabel</span>: {\n				<span class=\"hljs-attr\">textStyle</span>: {\n					<span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#999\'</span>\n				}\n			}\n		},\n		<span class=\"hljs-attr\">dataZoom</span>: [\n			{\n				<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'inside\'</span>\n			}\n		],\n		<span class=\"hljs-attr\">series</span>: [\n			{ <span class=\"hljs-comment\">// For shadow</span>\n				type: <span class=\"hljs-string\">\'bar\'</span>,\n				<span class=\"hljs-attr\">itemStyle</span>: {\n					<span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'rgba(0,0,0,0.05)\'</span>\n				},\n				<span class=\"hljs-attr\">barGap</span>: <span class=\"hljs-string\">\'-100%\'</span>,\n				<span class=\"hljs-attr\">barCategoryGap</span>: <span class=\"hljs-string\">\'40%\'</span>,\n				<span class=\"hljs-attr\">data</span>: dataShadow,\n				<span class=\"hljs-attr\">animation</span>: <span class=\"hljs-literal\">false</span>\n			},\n			{\n				<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'bar\'</span>,\n				<span class=\"hljs-attr\">itemStyle</span>: {\n					<span class=\"hljs-attr\">color</span>: <span class=\"hljs-keyword\">new</span> echarts.graphic.LinearGradient(\n							<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>,\n							[\n								{<span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#83bff6\'</span>},\n								{<span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#188df0\'</span>},\n								{<span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#188df0\'</span>}\n							]\n					)\n				},\n				<span class=\"hljs-attr\">emphasis</span>: {\n					<span class=\"hljs-attr\">itemStyle</span>: {\n						<span class=\"hljs-attr\">color</span>: <span class=\"hljs-keyword\">new</span> echarts.graphic.LinearGradient(\n								<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>,\n								[\n									{<span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#2378f7\'</span>},\n									{<span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0.7</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#2378f7\'</span>},\n									{<span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#83bff6\'</span>}\n								]\n						)\n					}\n				},\n				<span class=\"hljs-attr\">data</span>: data\n			}\n		]\n	};\n\n	<span class=\"hljs-comment\">// Enable data zoom when user click bar.</span>\n	<span class=\"hljs-keyword\">var</span> zoomSize = <span class=\"hljs-number\">6</span>;\n	myChart.on(<span class=\"hljs-string\">\'click\'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">params</span>) </span>{\n		<span class=\"hljs-built_in\">console</span>.log(dataAxis[<span class=\"hljs-built_in\">Math</span>.max(params.dataIndex - zoomSize / <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)]);\n		myChart.dispatchAction({\n			<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'dataZoom\'</span>,\n			<span class=\"hljs-attr\">startValue</span>: dataAxis[<span class=\"hljs-built_in\">Math</span>.max(params.dataIndex - zoomSize / <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)],\n			<span class=\"hljs-attr\">endValue</span>: dataAxis[<span class=\"hljs-built_in\">Math</span>.min(params.dataIndex + zoomSize / <span class=\"hljs-number\">2</span>, data.length - <span class=\"hljs-number\">1</span>)]\n		});\n	});\n	<span class=\"hljs-comment\">// 使用刚指定的配置项和数据显示图表。</span>\n	myChart.setOption(option);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></div></pre>\n<ul>\n<li>word.html</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\">&lt;section <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">section</span>\" <span class=\"hljs-title\">id</span>=\"<span class=\"hljs-title\">service</span>\" <span class=\"hljs-title\">style</span>=\"<span class=\"hljs-title\">background</span>:</span> <span class=\"hljs-comment\">#E4E7ED;min-height: 600px\"&gt;</span>\n	&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">container</span> <span class=\"hljs-title\">mt</span>-60 <span class=\"hljs-title\">mt</span>-5\"&gt;\n		&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">row</span> <span class=\"hljs-title\">align</span>-<span class=\"hljs-title\">items</span>-<span class=\"hljs-title\">center</span>\"&gt;\n			&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">col</span>-<span class=\"hljs-title\">lg</span>-8 <span class=\"hljs-title\">col</span>-<span class=\"hljs-title\">md</span>-8\"&gt;\n				&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">mr</span>-<span class=\"hljs-title\">lg</span>-5\"&gt;\n					&lt;<span class=\"hljs-title\">img</span> <span class=\"hljs-title\">src</span>=\"./../<span class=\"hljs-title\">static</span>/<span class=\"hljs-title\">word</span>.<span class=\"hljs-title\">jpg</span>\" <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">img</span>-<span class=\"hljs-title\">fluid</span>\" <span class=\"hljs-title\">alt</span>=\"\"&gt;\n				&lt;/<span class=\"hljs-title\">div</span>&gt;\n			&lt;/<span class=\"hljs-title\">div</span>&gt;&lt;!--<span class=\"hljs-title\">end</span> <span class=\"hljs-title\">col</span>--&gt;\n\n			&lt;div class=\"col-lg-4 col-md-4 mt-4 mt-sm-0 pt-2 pt-sm-0\"&gt;\n				&lt;div class=\"section-title\"&gt;\n					&lt;h2 class=\"text-primary\"&gt;\n						&lt;i class=\"uim uim-google-play\"&gt;&lt;/i&gt;\n					&lt;/h2&gt;\n					&lt;h4 class=\"title mt-3 mb-4\"&gt;词频统计&lt;/h4&gt;\n					&lt;p class=\"text-blue para-desc\"&gt;根据250部电影的一句话概述，提取的词云树，让我们了解一下经典电影都有什么相同点&lt;/p&gt;\n				&lt;/div&gt;\n			&lt;/div&gt;&lt;!--end col--&gt;\n		&lt;/div&gt;&lt;!--end row--&gt;\n	&lt;/div&gt;&lt;!--end container--&gt;\n&lt;/section&gt;&lt;!--end section--&gt;\n&lt;!-- Services End --&gt;\n\n\n&lt;footer class=\"bg-dark footer-bar py-4\"&gt;\n	&lt;div class=\"container\"&gt;\n		&lt;div class=\"row justify-content-center\"&gt;\n			&lt;div class=\"col-12 text-center\"&gt;\n				&lt;p class=\"foot-color mb-0\"&gt;persistenthuang@163.com&lt;/p&gt;\n			&lt;/div&gt;\n		&lt;/div&gt;\n	&lt;/div&gt;\n&lt;/footer&gt;\n</span></code></div></pre>\n','@[toc](目录)\n\n# python爬虫\n- 网络爬虫：按照一定规则，自动抓取互联网信息的程序或者脚本\n[学习视频地址：https://www.bilibili.com/video/BV12E411A7ZQ/?p=28](https://www.bilibili.com/video/BV12E411A7ZQ/?p=28)\n\n\n## 环境准备\n- 导入包配置\n\n~~~python\nimport sys\nfrom bs4 import BeautifulSoup  # 网页解析，获取数据\nimport re  # 正则表达式，进行文字匹配\nimport urllib.request, urllib.error  # 制定URl，获取网页数据\nimport xlwt  # 进行excel操作\nimport sqlite3  # 进行sqlLite数据库操作\n~~~\n\n- 基础文件结构\n\n~~~python\n\"\"\"\n爬取豆瓣电影排名250电影\n\"\"\"\ndef main():\n    url = \'https://movie.douban.com/top250?start=0\'\n    savepath=\'.\\\\doubanTop250.xls\'\n    # 1.爬取网页\n    datalist = get_data(url)\n\n    # 3.保存数据\n    sava_data()\n\n\ndef get_data(url):\n    datalist = []\n    # 2.逐一解析数据\n    return datalist\n\n\ndef sava_data(savepath):\n    print(\"save\")\n\n\nif __name__ == \'__main__\':\n    main()\n\n~~~\n\n## 预备知识\n### Urllib\n\n```python\nimport urllib.request\nimport urllib.parse\n\n# 通过get请求访问\nresponse = urllib.request.urlopen(\"http://www.baidu.com\")\nprint(response.read().decode(\'utf-8\'))  # 对获取到的源码进行utf-8解码\n\n\n# 通过post请求访问:http://httpbin.org\ndata = bytes(urllib.parse.urlencode({\"hello\": \"word\"}), encoding=\"utf-8\")\nresponse = urllib.request.urlopen(\"http://httpbin.org/post\",data=data)\nprint(response.read().decode(\'utf-8\'))\n\n\n# 超时处理\ntry:\n    response = urllib.request.urlopen(\"http://httpbin.org/get\",timeout=1)\n    print(response.read().decode(\'utf-8\'))\nexcept Exception as error:\n    print(error)\n\n# 响应头\nurl = \"http://douban.com\"\nheaders = {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36 Edg/85.0.564.68\"\n}\nreq = urllib.request.Request(url=url, headers=headers, method=\"POST\")\nresponse = urllib.request.urlopen(req, timeout=3)\nprint(response.status)\nprint(response.read().decode(\'utf-8\'))\n```\n\n### BeautifulSoup\n- 将复杂的html转换成一个复杂的树形结构，每个节点都是python对象\n- 所有对象可以分文四种：\n  - Tag:标签及其内容:(但是只是第一个标签)\n  - NavigableString:标签里的内容\n  - BeautifulSoup:自身，整个文档\n  - Comment:注释:是一个特殊的NavigableString输出的内容不包含注释符号\n\n```python\nfrom bs4 import BeautifulSoup\nfile = open(\"./../baidu.html\", \"rb\")\nhtml = file.read()\nbs = BeautifulSoup(html, \"html.parser\")\n\n# 1. tag:标签及其内容:(但是只是第一个标签)\nprint(bs.title)\nprint(bs.a)\nprint(bs.a.attrs)   # 得到标签的属性以字典的格式储存\nprint(type(bs.a))\n\n\n# 2.NavigableString:标签里的内容\nprint(bs.title.string)\nprint(type(bs.title.string))\n\n# 3.BeautifulSoup:自身，整个文档\nprint(bs.name)\nprint(type(bs))\n\n# 4.Comment:注释:是一个特殊的NavigableString输出的内容不包含注释符号\nprint(bs.a.string)\n```\n\n - 文档的遍历和查找\n\n~~~python\n# 文档的遍历:contents\nprint(bs.head.contents[1])\n\nprint(\"---------------------------------\")\n# 文档的搜索\n# 字符串过滤:查找与字符串完全匹配的内容\na_list = bs.find_all(\"a\")  # 查找所有的a标签\nprint(a_list)\n\n\nprint(\"---------------------------------\")\n\n# 正则表达式搜索:使用search()方法来匹配\nimport re\n\na_list1 = bs.find_all(re.compile(\"a\"))\nprint(a_list1)\n\nprint(\"---------------------------------\")\n\n# 使用方法来搜索:传入一个函数，根据函数的要求来搜索\ndef name_is_exists(tag):\n    return tag.has_attr(\"name\")\n\n\na_list2 = bs.find_all(name_is_exists)\nprint(a_list2)\n\nprint(\"---------------------------------\")\n\n# keywords:参数搜索\n# a_list3 = bs.find_all(class_=True)\na_list3 = bs.find_all(text=\"新闻\")\na_list3 = bs.find_all(text=re.compile(\"\\d\"),limit=2)    # 根据正则表达式匹配内容，limit限制查找个数\nfor item in a_list3:\n    print(item)\n\n\nprint(\"---------------------------------\")\n# 选择器类似css中的选择器\nprint(bs.select(\"title\"))        # 通过标签\nprint(bs.select(\".classname\"))   # 通过类名\nprint(bs.select(\"#idname\"))      # 通过id查找\nprint(bs.select(\"a[class=\'classname\']\"))      # 通过属性查找\nprint(bs.select(\"head>title\"))      # 通过子标签\n~~~\n\n\n### 正则表达式\n参考文档链接：[https://www.runoob.com/regexp/regexp-syntax.html](https://www.runoob.com/regexp/regexp-syntax.html)\n\n- python中的re库\n![123](https://img-blog.csdnimg.cn/20201004203732333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n```python\n# 正则表达式：字符串匹配（判断字符串是否符合一定的标准）\nimport re\n# 创建模式对象\npat = re.compile(\"AA\")  # 此处的AA是正则表达式\na = pat.search(\"AAA\")            # search字符串被校验的内容\nprint(a)\n\na = re.search(\"abc\", \"aabcc\")    # 前面的字符串是规则，后面的字符串是被匹配的对象\nprint(a)\n\na = re.findall(\"[a-z]+\", \"aABCXabuhua\")  # 找到所有的匹配项\nprint(a)\n\na = re.sub(\"a\", \"A\", \"abcdefg\")   #找到a用A替换\nprint(a)\n# 建议在正则表达式中，被比较的字符串前面加上r，不用担心转义字符的问题\n```\n\n\n### xlwt表格操作\n- 简单操作\n\n```python\nimport xlwt\nwork_book = xlwt.Workbook(encoding=\"utf-8\")\nwork_sheet = work_book.add_sheet(\"sheet1\")\nwork_sheet.write(0, 0, \'hello\') # 参数：行、列、内容\nwork_book.save(\'student.xls\')\n```\n\n## sqlite3数据库操作\n- 建表语句\n\n~~~python\nimport sqlite3\nconnet = sqlite3.connect(\"test.db\") # 打开或创建文件\n# 建表\nc = connet.cursor()  # 获取游标\nsql = \'\'\'\n    create table if not exists doubanTop250 (\n        id integer not null primary key autoincrement,\n        find_link text not null,\n        find_image text,\n        find_ctitle char(100),\n        find_otitle  char(100),\n        find_score int(4),\n        find_judge_number int(10),\n        find_sign char(200),\n        find_description text\n    )\n\'\'\'\nc.execute(sql)      # 执行sql语句\nconnet.commit()     # 提交\nconnet.close()      # 关闭数据库\n\n~~~\n\n- 插入语句\n\n~~~python\nimport sqlite3\nconnet = sqlite3.connect(\"test.db\") # 打开或创建文件\n# 建表\nc = connet.cursor()  # 获取游标\nsql = \'\'\'\n    insert into doubanTop250 (find_link,find_image,find_ctitle,find_otitle,find_score,find_judge_number,find_sign,find_description)\n    values (\"1\",\"1\",\"1\",\"1\",1,1,\"1\",\"1\");\n\'\'\'\nc.execute(sql)      # 执行sql语句\nconnet.commit()     # 提交\nconnet.close()      # 关闭数据库\n~~~\n\n- 查询语句\n\n~~~python\nimport sqlite3\nconnet = sqlite3.connect(\"test.db\") # 打开或创建文件\n# 建表\nc = connet.cursor()  # 获取游标\nsql = \'\'\'\n    select * from doubanTop250;\n\'\'\'\nresponse = c.execute(sql)      # 执行sql语句\nfor i in response:\n    for j in  range(0,8):\n        print(i[j])\n\nconnet.commit()     # 提交\nconnet.close()      # 关闭数据库\n~~~\n\n## 获取数据\n- 根据一个URL获取一个页面的html数据\n\n```python\n# 得到一个指定页面的信息\ndef ask_url(url):\n    head = {\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0\"\n    }\n    \"\"\"\n    head:模拟浏览器头部信息\n    \"User-Agent\":用户代理\n    \"\"\"\n    request = urllib.request.Request(url=url, headers=head)\n    html = \"\"\n    try:\n        response = urllib.request.urlopen(request)\n        html = response.read().decode(\"utf-8\")\n    except Exception as e:\n        if hasattr(e,\"code\"):\n            print(e.code)\n        if hasattr(e,\"reason\"):\n            print(e.reason)\n    return html\n\n```\n\n## 解析数据\n- 豆瓣排名分析\n![123123](https://img-blog.csdnimg.cn/20201004211017864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n```python\n# 定义一些全局变量\n# 电影链接正则表达式\nfind_link = re.compile(r\'<a href=\"(.*?)\">\')\n# 电影图片链接正则表达式,re.S忽略换行符\n# find_image = re.compile(r\'<img(.*)src=\"(.*?)\" class=\"\">\', re.S)\nfind_image = re.compile(r\'<img.*src=\"(.*?)\"\', re.S)\n# 电影标题\nfind_title = re.compile(r\'<span class=\"title\">(.*)</span>\')\n# 影片评分\nfind_score = re.compile(r\'<span class=\"rating_num\" property=\"v:average\">(.*)</span>\')\n# 评价人数\nfind_judge_number = re.compile(r\'<span>(\\d*)人评价</span>\')\n# 概况\nfind_sign = re.compile(r\'<span class=\"inq\">(.*)</span>\')\n# 影片相关内容\nfind_description = re.compile(r\'<p class=\"\">(.*?)</p>\', re.S)\n```\n\n```python\ndef get_data(url):\n    datalist = []\n    for i in range(0, 10):      # 循环获取10个页面数据\n        urls = url + str(i*25)\n        html = ask_url(urls)    # 保存网页信息\n        # 2.逐一解析数据\n        soup = BeautifulSoup(html, \"html.parser\")\n        for item in soup.find_all(\'div\', class_=\"item\"):  # 查找符合要求的字符串，形成列表\n            data = []   # 保存一部电影的所有信息\n            item = str(item)\n\n            # 获取影片详情链接\n            link = re.findall(find_link, item)[0]  # re库通过正则表达式查找指定字符串\n            data.append(link)\n\n            img = re.findall(find_image, item)[0]\n            data.append(img)\n\n            title = re.findall(find_title, item)\n            # 判断中文外文名\n            if len(title) == 2:\n                ctitle = title[0]\n                data.append(ctitle)\n                otitle = title[1].replace(\"/\",\"\")   # 去掉名称前的斜杠\n                data.append(otitle)\n            else:\n                data.append(title)\n                data.append(\" \")    # 留空\n\n            score = re.findall(find_score, item)[0]\n            data.append(score)\n\n            judge_number = re.findall(find_judge_number, item)[0]\n            data.append(judge_number)\n\n            sign = re.findall(find_sign, item)\n            if len(sign) != 0:\n                data.append(sign[0].replace(\"。\", \"\"))\n            else:\n                data.append(\" \")\n\n            description = re.findall(find_description, item)[0]\n            description = re.sub(\'<br(\\s+)?/>(\\s+)?\',\"\",description)    # 去掉<br/>\n            description = re.sub(\'/\',\"\",description)\n            data.append(description.strip())    # 去掉前后的空格\n            print(data)\n            datalist.append(data)   # 处理好的\n\n    return datalist\n```\n\n\n## 保存数据到表格中\n\n```python\n# 保存数据\ndef sava_data(savepath, datalist):\n    print(\'------------save------------\')\n    work_book = xlwt.Workbook(encoding=\"utf-8\", style_compression=0)\n    work_sheet = work_book.add_sheet(\"doubanTop250\", cell_overwrite_ok=True)\n    col = (\"电影详情链接\", \"图片链接\" , \"影片中文名\", \"影片外文名\", \"评分\", \"评价数\", \"概况\", \"详情\")\n    for i in range(0, 8):\n        work_sheet.write(0, i, col[i])\n    for i in range(0, 250):\n        print(\"第%d条\" %i)\n        data = datalist[i]\n        for j in range(0, 8):\n            work_sheet.write(i+1, j, data[j])\n    work_book.save(savepath)    # 保存数据\n```\n\n## 保存数据到数据库中\n- 保存数据到数据库中\n\n~~~python\n\n# 保存数据到sqlite\ndef sava_data_sqlite(datalist):\n    print(\"------------SQLite------------\")\n    init_sqlite()   # 初始化数控库\n    # 插入数据\n    connet = sqlite3.connect(\"test.db\")  # 打开或创建文件\n    c = connet.cursor()  # 获取游标\n    for data in datalist:\n        for index in range(0, 8):\n            if index not in (4, 5):\n                data[index] = \'\"\'+data[index]+\'\"\'\n        sql = \'\'\'\n            insert into doubanTop250(find_link,find_image,find_ctitle,find_otitle,find_score,find_judge_number,find_sign,find_description)\n            values(%s)\'\'\'%\",\".join(data)\n        print(sql)\n        c.execute(sql)\n        connet.commit()\n\n    c.close()\n    connet.close()\n\n\n# 建表语句\ndef init_sqlite():\n    connet = sqlite3.connect(\"test.db\")  # 打开或创建文件\n    # 建表\n    c = connet.cursor()  # 获取游标\n    sql = \'\'\'\n        create table if not exists doubanTop250 (\n            id integer not null primary key autoincrement,\n            find_link text not null,\n            find_image text,\n            find_ctitle char(100),\n            find_otitle  char(100),\n            find_score int(4),\n            find_judge_number int(10),\n            find_sign char(200),\n            find_description text\n        )\n    \'\'\'\n    c.execute(sql)  # 执行sql语句\n    connet.commit()  # 提交\n    connet.close()  # 关闭数据库\n~~~\n\n\n## 数据可视化\n\n### Flask框架\n- web框架\n\n新建一个flask框架\n- app.py的测试文件：\n\n```python\nfrom flask import Flask, render_template, request\nimport datetime\n\napp = Flask(__name__)\n\n\n# 通过访问路径，获取用户的字符串参数\n@app.route(\'/index/<name>\')\ndef hello_word(name):\n    return \'hello word %s\'%name\n\n\n# 通过访问路径，获取用户的字符串参数\n@app.route(\'/index/<int:id>\')\ndef hello_word2(id):\n    return \'hello %d\'%id\n\n\n# 返回给用户渲染后的网页文件\n@app.route(\'/\')\ndef index():\n    time = datetime.date.today()        # 向网页页面传递的参数\n    name = [1, 2, 3]                    # 列表类型\n    dic = {\"name\": \"黄耀辉\", \"age\": \"18\"}  # 字典类型\n    return render_template(\"index.html\", time=time, name=name, dic=dic)\n\n\n@app.route(\'/register\')\ndef register():\n    return render_template(\"register.html\")\n\n\n@app.route(\'/result\', methods=[\'POST\'])\ndef register_result():\n    if request.method == \'POST\':\n        result = request.form\n        return render_template(\"result.html\", result=result)\n    else:\n        return render_template(\"error.html\")\n\n\nif __name__ == \'__main__\':\n    app.run(debug=True)\n\n```\n\n- html中的数据操作\n\n```html\n<body>\n<div>豆瓣爬虫</div>\n<div>时间:{{time}}</div>\n<div>\n    测试列表：\n    {%for i in name%}\n    <li>\n        {{i}}\n    </li>\n    {% endfor %}\n</div>\n<div>\n    测试字典：\n    <table>\n        {% for key,value in dic.items() %}\n        <tr>\n            <td>{{key}}</td>\n            <td>{{value}}</td>\n        </tr>\n        {% endfor %}\n    </table>\n</div>\n</body>\n```\n\n\n\n- 表单提交\n\n~~~html\n<form action=\"{{url_for(\'result\')}}\" method=\"post\">\n    <p>姓名: <input type=\"text\" name=\"name\"></p>\n    <p>性别: <input type=\"text\" name=\"sex\"></p>\n    <p>年龄: <input type=\"text\" name=\"age\"></p>\n    <p>地址: <input type=\"text\" name=\"address\"></p>\n    <p><input type=\"submit\"></p>\n</form>\n~~~\n\n\n### Echarts应用\n- 百度数据可视化应用\n[官网地址链接](https://echarts.apache.org/examples/zh/index.html#chart-type-drag)\n\n\n### WorldCloud应用\n- 词云\n[官网地址地址](https://amueller.github.io/word_cloud/)\n\n## 完整代码\n\n- app.py\n\n~~~python\nfrom flask import Flask, render_template, request\nimport sqlite3\nimport jieba    # 分词\nfrom matplotlib import pyplot as plt    # 绘图，数据可视化\nfrom wordcloud import WordCloud         # 词云\nfrom PIL import Image                   # 图片处理\nimport numpy as np                      # 矩阵运算\n\n\napp = Flask(__name__)\n\n\n@app.route(\'/\')\ndef home():\n    return render_template(\"home.html\")\n\n\n@app.route(\'/movie\')\ndef movie():\n    movies = []\n    con = sqlite3.connect(\"./douban/test.db\")\n    cur = con.cursor()\n    sql = \"select * from doubanTop250\"\n    data = cur.execute(sql)\n    for item in data:\n        movies.append(item)\n\n    cur.close()\n    con.close()\n    return render_template(\"movie.html\", movies=movies)\n\n\n@app.route(\'/score\')\ndef score():\n    find_score = []\n    find_number = []\n    con = sqlite3.connect(\"./douban/test.db\")\n    cur = con.cursor()\n    sql = \"select find_score,count(find_score) from doubanTop250 group by find_score\"\n    data = cur.execute(sql)\n    for item in data:\n        find_score.append(item[0])\n        find_number.append(item[1])\n    cur.close()\n    con.close()\n    return render_template(\"score.html\", score=find_score, number=find_number)\n\n\n@app.route(\'/word\')\ndef word():\n    # 获取数据\n    con = sqlite3.connect(\"./douban/test.db\")\n    cur = con.cursor()\n    sql=\"select find_sign from doubanTop250\"\n    data = con.execute(sql)\n    # 拼接\n    text = \"\"\n    for item in data:\n        text = text + item[0]\n    cut = jieba.cut(text)\n    string = \" \".join(cut)\n    cur.close()\n    con.close()\n    # 找到一张图片\n    img = Image.open(\"./static/timg.jpg\")    # 打开遮罩图片\n    img_array = np.array(img)                # 将图片转换为数组\n    wold_cloud = WordCloud(\n        background_color=\"#E4E7ED\",\n        mask=img_array,\n        font_path=\"STKAITI.TTF\",    # 字体所在位置\n    ).generate_from_text(string)    # 放入词\n    # 绘制图片\n    fig = plt.figure(1)\n    plt.imshow(wold_cloud)\n    plt.axis(\'off\')     # 不显示坐标轴\n    # plt.show()  # 显示生成的词云图片\n    plt.savefig(\"./static/word.jpg\", dpi=500)\n\n    return render_template(\"word.html\")\n\n\n@app.route(\'/author\')\ndef author():\n    return render_template(\"author.html\")\n\n\nif __name__ == \'__main__\':\n    app.run(debug=True)\n~~~\n\n- 前端页面\n- home.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n<meta charset=\"utf-8\" />\n<title>豆瓣top260</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<meta name=\"description\" content=\"Premium Bootstrap 4 Landing Page Template\" />\n<meta name=\"keywords\" content=\"bootstrap 4, premium, marketing, multipurpose\" />\n<meta content=\"Shreethemes\" name=\"author\" />\n<!-- favicon -->\n<link rel=\"shortcut icon\" href=\"images/favicon.ico\">\n<!-- Bootstrap css -->\n<link href=\"static/css/bootstrap.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n<!-- 图标库 -->\n<link href=\"static/css/materialdesignicons.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n<link rel=\"stylesheet\" href=\"static/css/unicons.css\" />\n<!-- Pe7 Icon -->\n<link rel=\"stylesheet\" type=\"text/css\" href=\"static/css/pe-icon-7.css\">\n<!-- Icons -->\n<link href=\"static/css/magnific-popup.css\" rel=\"stylesheet\" type=\"text/css\" />\n<!-- Main css File -->\n<link href=\"static/css/style.css\" rel=\"stylesheet\" type=\"text/css\" />\n<link href=\"static/css/default.css\" rel=\"stylesheet\" id=\"color-opt\">\n\n</head>\n\n<body>\n<!-- Navbar STart 导航栏-->\n<header id=\"topnav\" class=\"defaultscroll sticky\" style=\"background: #409EFF\">\n	<div class=\"container\">\n		<!-- Logo container-->\n		<div>\n			<a class=\"logo\" href=\"/\" target=\"_blank\" style=\"color: #0b0b0b\">\n				<!-- Landkey -->\n				豆瓣Top250\n			</a>\n		</div>\n\n		<div id=\"navigation\">\n			<!-- Navigation Menu-->\n			<ul class=\"navigation-menu\">\n				<li class=\"has-submenu\">\n					<a href=\"/\">首页</a>\n				</li>\n				<li class=\"has-submenu\">\n					<a href=\"/movie\">电影</a>\n				</li>\n				<li class=\"has-submenu\">\n					<a href=\"/score\">评分</a>\n				</li>\n				<li class=\"has-submenu\">\n					<a href=\"/word\">词云</a>\n				</li>\n				<li class=\"has-submenu\">\n					<a href=\"/author\">作者</a>\n				</li>\n			</ul><!--end navigation menu-->\n		</div><!--end navigation-->\n	</div><!--end container-->\n</header><!--end header-->\n<!-- Navbar End -->\n\n<section class=\"section\" id=\"price\" style=\"background: #E4E7ED;min-height: 600px\">\n	<div class=\"container\">\n		<div class=\"row justify-content-center\">\n			<div class=\"col-12\">\n				<div class=\"section-title text-center mb-4 pb-2\">\n					<h4 class=\"title mb-4\">豆瓣电影Top250数据分析</h4>\n					<p class=\"text-muted para-desc mx-auto mb-0\">应用Python爬虫、Flask框架、Echarts、Word Cloud等技术实现</p>\n				</div>\n			</div><!--end col-->\n		</div><!--end row-->\n\n		<div class=\"row\">\n			<div class=\"col-lg-3 col-md-6 col-12 mt-4 pt-2\">\n				<a href=\"/movie\">\n					<div class=\"card service-wrapper rounded border-0 shadow px-4 py-5\">\n						<div class=\"icon text-center text-primary h1 shadow rounded bg-white\">\n							<i class=\"uim uim-airplay\"></i>\n						</div>\n						<div class=\"content mt-4\">\n							<h5 class=\"title\">经典电影</h5>\n						</div>\n					</div>\n				</a>\n			</div><!--end col-->\n\n			<div class=\"col-lg-3 col-md-6 col-12 mt-4 pt-2\">\n				<div class=\"card service-wrapper rounded border-0 shadow px-4 py-5\">\n					<a href=\"/score\">\n						<div class=\"icon text-center text-primary h1 shadow rounded bg-white\">\n							<i class=\"uim uim-circle-layer\"></i>\n						</div>\n						<div class=\"content mt-4\">\n							<h5 class=\"title\">评分统计</h5>\n						</div>\n					</a>\n				</div>\n			</div><!--end col-->\n\n			<div class=\"col-lg-3 col-md-6 col-12 mt-4 pt-2\">\n				<div class=\"card service-wrapper rounded border-0 shadow px-4 py-5\">\n					<a href=\"/word\">\n						<div class=\"icon text-center text-primary h1 shadow rounded bg-white\">\n							<i class=\"uim uim-signal-alt-3\"></i>\n						</div>\n						<div class=\"content mt-4\">\n							<h5 class=\"title\">词汇统计</h5>\n						</div>\n					</a>\n				</div>\n			</div><!--end col-->\n\n			<div class=\"col-lg-3 col-md-6 col-12 mt-4 pt-2\">\n				<div class=\"card service-wrapper rounded border-0 shadow px-4 py-5\">\n					<a href=\"/author\">\n						<div class=\"icon text-center text-primary h1 shadow rounded bg-white\">\n							<i class=\"uim uim-flip-h-alt\"></i>\n						</div>\n						<div class=\"content mt-4\">\n							<h5 class=\"title\">作者信息</h5>\n						</div>\n					</a>\n				</div>\n			</div><!--end col-->\n		</div><!--end row-->\n	</div><!--end container-->\n</section><!--end section-->\n\n<footer class=\"bg-dark footer-bar py-4\">\n	<div class=\"container\">\n		<div class=\"row justify-content-center\">\n			<div class=\"col-12 text-center\">\n				<p class=\"foot-color mb-0\">persistenthuang@163.com</p>\n			</div>\n		</div>\n	</div>\n</footer>\n\n<!-- javascript -->\n<script src=\"static/js/jquery.min.js\"></script>\n<script src=\"static/js/bootstrap.bundle.min.js\"></script>\n<script src=\"static/js/jquery.easing.min.js\"></script>\n<script src=\"static/js/scrollspy.min.js\"></script>\n<!-- Magnific popup -->\n<script src=\"static/js/jquery.magnific-popup.min.js\"></script>\n<script src=\"static/js/magnific.init.js\"></script>\n<!-- Parallax -->\n<script src=\"static/js/parallax.js\"></script>\n<!-- 图标库 -->\n<script src=\"static/js/bundle.js\"></script>\n<script src=\"static/js/feather.min.js\"></script>\n<!-- Contact -->\n<script src=\"static/js/contact.js\"></script>\n<!-- Main Js -->\n<script src=\"static/js/app.js\"></script>\n</body>\n</html>\n```\n- move.html\n\n```html\n<!-- Start 评分 -->\n<section class=\"section\" id=\"price\" style=\"background: #E4E7ED;min-height: 600px\">\n	<div class=\"container\">\n		<div class=\"row justify-content-center\">\n			<div class=\"col-12\">\n				<div class=\"section-title text-center mb-4 pb-2\">\n					<h4 class=\"title mb-4\">豆瓣电影Top250电影</h4>\n				</div>\n			</div><!--end col-->\n		</div><!--end row-->\n		<!--表格-->\n		<table class=\"table table-hover table-light\">\n			<tr>\n				<td>排名</td>\n				<td>中文名称</td>\n				<td>外文名称</td>\n				<td>评分</td>\n				<td>人数</td>\n				<td>一句话描述</td>\n				<td>其他信息</td>\n			</tr>\n			{%for movie in movies%}\n			<tr>\n				<td>{{movie[0]}}</td>\n				<td>\n					<a href=\"{{movie[1]}}\" target=\"_blank\">\n						{{movie[3]}}\n					</a>\n				</td>\n				<td>{{movie[4]}}</td>\n				<td>{{movie[5]}}</td>\n				<td>{{movie[6]}}</td>\n				<td>{{movie[7]}}</td>\n				<td>{{movie[8]}}</td>\n			</tr>\n			{%endfor%}\n		</table>\n	</div><!--end container-->\n</section><!--end section-->\n\n<footer class=\"bg-dark footer-bar py-4\">\n	<div class=\"container\">\n		<div class=\"row justify-content-center\">\n			<div class=\"col-12 text-center\">\n				<p class=\"foot-color mb-0\">persistenthuang@163.com</p>\n			</div>\n		</div>\n	</div>\n</footer>\n```\n\n- score.html\n\n~~~html\n<!-- Start 评分 -->\n<section class=\"section\" id=\"price\" style=\"background: #E4E7ED;min-height: 600px\">\n	<div class=\"container\">\n		<div class=\"row justify-content-center\">\n			<div class=\"col-12\">\n				<div class=\"section-title text-center mb-4 pb-2\">\n					<h4 class=\"title mb-4\">豆瓣电影Top250评分分布图</h4>\n				</div>\n			</div><!--end col-->\n		</div><!--end row-->\n\n		<!-- 为 ECharts 准备一个具备大小（宽高）的 DOM -->\n		<div id=\"main\" style=\"width: 100%;height:450px;margin: 0 auto;\"></div>\n	</div><!--end container-->\n</section><!--end section-->\n\n\n<footer class=\"bg-dark footer-bar py-4\">\n	<div class=\"container\">\n		<div class=\"row justify-content-center\">\n			<div class=\"col-12 text-center\">\n				<p class=\"foot-color mb-0\">persistenthuang@163.com</p>\n			</div>\n		</div>\n	</div>\n</footer>\n\n<script type=\"text/javascript\">\n	// 基于准备好的dom，初始化echarts实例\n	var myChart = echarts.init( document.getElementById(\'main\'));\n	var dataAxis = {{ score }};\n	var data = {{ number }};\n	var yMax = 50;\n	var dataShadow = [];\n\n	for (var i = 0; i < data.length; i++) {\n		dataShadow.push(yMax);\n	}\n\n	option = {\n		xAxis: {\n			type: \'category\',\n			data: dataAxis,\n			axisLabel: {\n				inside: true,\n				textStyle: {\n					color: \'#1c1b1b\'\n				}\n			},\n			axisTick: {\n				show: false\n			},\n			axisLine: {\n				show: false\n			},\n			z: 10\n		},\n		yAxis: {\n			axisLine: {\n				show: false\n			},\n			axisTick: {\n				show: false\n			},\n			axisLabel: {\n				textStyle: {\n					color: \'#999\'\n				}\n			}\n		},\n		dataZoom: [\n			{\n				type: \'inside\'\n			}\n		],\n		series: [\n			{ // For shadow\n				type: \'bar\',\n				itemStyle: {\n					color: \'rgba(0,0,0,0.05)\'\n				},\n				barGap: \'-100%\',\n				barCategoryGap: \'40%\',\n				data: dataShadow,\n				animation: false\n			},\n			{\n				type: \'bar\',\n				itemStyle: {\n					color: new echarts.graphic.LinearGradient(\n							0, 0, 0, 1,\n							[\n								{offset: 0, color: \'#83bff6\'},\n								{offset: 0.5, color: \'#188df0\'},\n								{offset: 1, color: \'#188df0\'}\n							]\n					)\n				},\n				emphasis: {\n					itemStyle: {\n						color: new echarts.graphic.LinearGradient(\n								0, 0, 0, 1,\n								[\n									{offset: 0, color: \'#2378f7\'},\n									{offset: 0.7, color: \'#2378f7\'},\n									{offset: 1, color: \'#83bff6\'}\n								]\n						)\n					}\n				},\n				data: data\n			}\n		]\n	};\n\n	// Enable data zoom when user click bar.\n	var zoomSize = 6;\n	myChart.on(\'click\', function (params) {\n		console.log(dataAxis[Math.max(params.dataIndex - zoomSize / 2, 0)]);\n		myChart.dispatchAction({\n			type: \'dataZoom\',\n			startValue: dataAxis[Math.max(params.dataIndex - zoomSize / 2, 0)],\n			endValue: dataAxis[Math.min(params.dataIndex + zoomSize / 2, data.length - 1)]\n		});\n	});\n	// 使用刚指定的配置项和数据显示图表。\n	myChart.setOption(option);\n</script>\n~~~\n\n- word.html\n```python\n<section class=\"section\" id=\"service\" style=\"background: #E4E7ED;min-height: 600px\">\n	<div class=\"container mt-60 mt-5\">\n		<div class=\"row align-items-center\">\n			<div class=\"col-lg-8 col-md-8\">\n				<div class=\"mr-lg-5\">\n					<img src=\"./../static/word.jpg\" class=\"img-fluid\" alt=\"\">\n				</div>\n			</div><!--end col-->\n\n			<div class=\"col-lg-4 col-md-4 mt-4 mt-sm-0 pt-2 pt-sm-0\">\n				<div class=\"section-title\">\n					<h2 class=\"text-primary\">\n						<i class=\"uim uim-google-play\"></i>\n					</h2>\n					<h4 class=\"title mt-3 mb-4\">词频统计</h4>\n					<p class=\"text-blue para-desc\">根据250部电影的一句话概述，提取的词云树，让我们了解一下经典电影都有什么相同点</p>\n				</div>\n			</div><!--end col-->\n		</div><!--end row-->\n	</div><!--end container-->\n</section><!--end section-->\n<!-- Services End -->\n\n\n<footer class=\"bg-dark footer-bar py-4\">\n	<div class=\"container\">\n		<div class=\"row justify-content-center\">\n			<div class=\"col-12 text-center\">\n				<p class=\"foot-color mb-0\">persistenthuang@163.com</p>\n			</div>\n		</div>\n	</div>\n</footer>\n```\n',2,'123456',0),(19,5,'2020-10-18 11:44:34','python爬虫-分析猎聘网求职信息','使用python爬取猎聘网的职位数据，关键词“数据挖掘”，爬取热门数据4000多条数据，使用可视化工具绘制图表显示数据。','https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3457606070,4283347864&fm=26&gp=0.jpg','<p><h3>目录</h3><ul><li><a href=\"#_2\">猎聘网信息爬取</a></li><ul><li><a href=\"#_15\">爬取职位链接</a></li><ul><li><a href=\"#1_URL_16\">1. 构建URL：</a></li><li><a href=\"#2__54\">2. 获取网页</a></li><li><a href=\"#3__83\">3. 解析网页</a></li><li><a href=\"#4__125\">4. 保存数据到表格</a></li></ul><li><a href=\"#_141\">爬取职位详情信息</a></li><ul><li><a href=\"#1__147\">1. 基本步骤</a></li><li><a href=\"#2__177\">2. 获取表格链接</a></li><li><a href=\"#3__194\">3. 获取职位详情信息网页</a></li><li><a href=\"#4__198\">4. 解析详情网页得到数据</a></li><li><a href=\"#5__270\">5. 保存数据到数据库</a></li></ul><li><a href=\"#_311\">可视化职位信息</a></li><ul><li><a href=\"#1__315\">1. 首页</a></li><li><a href=\"#2__322\">2. 职位列表</a></li><li><a href=\"#3__355\">3. 薪水分析</a></li><li><a href=\"#4__405\">4. 职位描述词云</a></li><li><a href=\"#5_apppy_414\">5. app.py文件代码</a></li></ul></ul></ul></p>\n<h1><a id=\"_2\"></a>猎聘网信息爬取</h1>\n<p><img src=\"https://img-blog.csdnimg.cn/20201015191425645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"121212121\" /></p>\n<ul>\n<li>爬取猎聘网信息是为了完成需求分析这门课的作业</li>\n<li>哎，为了完成作业，五天入门python爬虫，找了个视频就开始了，学习笔记如下<a href=\"https://blog.csdn.net/qq_43309907/article/details/108919658\" target=\"_blank\">爬取豆瓣笔记</a></li>\n<li>这篇博客用来记录，爬取猎聘网的整个过程</li>\n<li>爬取过程整体分为三个过程：\n<ul>\n<li>爬取职位链接</li>\n<li>爬取职位详情信息</li>\n<li>可视化信息统计</li>\n</ul>\n</li>\n</ul>\n<h2><a id=\"_15\"></a>爬取职位链接</h2>\n<h3><a id=\"1_URL_16\"></a>1. 构建URL：</h3>\n<pre><div class=\"hljs\"><code class=\"lang-python\">https://www.liepin.com/zhaopin/?compkind=&amp;dqs=<span class=\"hljs-number\">010</span>&amp;pubTime=&amp;pageSize=<span class=\"hljs-number\">40</span>&amp;salary=&amp;compTag=&amp;sortFlag=&amp;compIds=&amp;subIndustry=&amp;jobKind=&amp;industries=&amp;compscale=&amp;key=%E6%<span class=\"hljs-number\">95</span>%B0%E6%<span class=\"hljs-number\">8</span>D%AE%E6%<span class=\"hljs-number\">8</span>C%<span class=\"hljs-number\">96</span>%E6%<span class=\"hljs-number\">8</span>E%<span class=\"hljs-number\">98</span>&amp;siTag=LiAE77uh7ygbLjiB5afMYg%<span class=\"hljs-number\">7</span>EfA9rXquZc5IkJpXC-Ycixw&amp;d_sfrom=search_fp&amp;d_ckId=cd34a20d8742a36fa58243aee1ca77fe&amp;d_curPage=<span class=\"hljs-number\">0</span>&amp;d_pageSize=<span class=\"hljs-number\">40</span>&amp;d_headId=cd34a20d8742a36fa58243aee1ca77fe\n</code></div></pre>\n<ul>\n<li>https://www.liepin.com：域名</li>\n<li>/zhaopin/：网站前缀</li>\n<li>?：问号后面接参数</li>\n<li>这里我们要爬取关键词为“数据挖掘”各个地区的职位信息来分析，所以要分析的关键词为（key），和地区参数（dqs）以&amp;相连</li>\n<li>参考上述URL：（key=%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98），后面一串乱码是因为汉字在作为关键词时要序列化</li>\n<li>因为这里用urllib这个包来获取网页，所以要把汉字序列化，如果使用requests包来获取就不用</li>\n<li>调用（urllib.parse.quote(“数据挖掘”, ‘utf-8’)）这个函数来序列化汉字</li>\n</ul>\n<p>参考代码如下</p>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    job_list = []\n    key = <span class=\"hljs-string\">\"数据挖掘\"</span>\n    dqs = [<span class=\"hljs-string\">\"010\"</span>, <span class=\"hljs-string\">\"020\"</span>, <span class=\"hljs-string\">\"050020\"</span>, <span class=\"hljs-string\">\"050090\"</span>, <span class=\"hljs-string\">\"030\"</span>, <span class=\"hljs-string\">\"060080\"</span>, <span class=\"hljs-string\">\"040\"</span>, <span class=\"hljs-string\">\"060020\"</span>, <span class=\"hljs-string\">\"070020\"</span>, <span class=\"hljs-string\">\"210040\"</span>, <span class=\"hljs-string\">\"280020\"</span>, <span class=\"hljs-string\">\"170020\"</span>]\n    new_key = urllib.parse.quote(key, <span class=\"hljs-string\">\'utf-8\'</span>)\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> dqs:\n        url = <span class=\"hljs-string\">\"https://www.liepin.com/zhaopin/?key=\"</span>+new_key+<span class=\"hljs-string\">\"&amp;dqs=\"</span>+item\n        print(url)\n        <span class=\"hljs-comment\"># 获取职位列表链接</span>\n        job_html = get_job_html(url)\n        <span class=\"hljs-comment\"># 解析网页分析网页得到链接</span>\n        link_list = get_job_link(job_html)\n        <span class=\"hljs-comment\"># 把链接储存到数组中</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> link_list:\n            job_list.append(i)\n    <span class=\"hljs-comment\"># 保存职位链接到表格中</span>\n    save_link(job_list)\n</code></div></pre>\n<h3><a id=\"2__54\"></a>2. 获取网页</h3>\n<ul>\n<li>这里获取网页调用一个包：（from fake_useragent import UserAgent）</li>\n<li>需要在pip中安装：<mark>pip install fake_useragent</mark></li>\n<li>首先要构造一个请求头：猎聘网的反爬虫不是很强大，不用登录就可以访问，调用<mark>UserAgent().random</mark> 可以随机生成浏览器标识，这样就不会被阻止</li>\n<li>如果网站的反扒做的很好就要在网页的请求头上添加相应的参数，参考如下图</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20201015193453131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"1212121\" /><br />\n参考代码：</p>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_job_html</span><span class=\"hljs-params\">(url)</span>:</span>\n    print(<span class=\"hljs-string\">\"-------爬取job网页-------\"</span>)\n    html = <span class=\"hljs-string\">\"\"</span>\n    head = {\n        <span class=\"hljs-string\">\"User-Agent\"</span>: UserAgent().random\n    }\n    <span class=\"hljs-string\">\"\"\"\n    head:模拟浏览器头部信息\n    \"User-Agent\":浏览器标识\n    \"\"\"</span>\n    request = urllib.request.Request(url=url, headers=head)\n    <span class=\"hljs-keyword\">try</span>:\n        response = urllib.request.urlopen(request)\n        html = response.read().decode(<span class=\"hljs-string\">\"utf-8\"</span>)\n    <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">None</span>\n    <span class=\"hljs-keyword\">return</span> html\n</code></div></pre>\n<h3><a id=\"3__83\"></a>3. 解析网页</h3>\n<ul>\n<li>\n<p>分析网页元素获取数据<br />\n<img src=\"https://img-blog.csdnimg.cn/2020101519420828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121212\" /></p>\n</li>\n<li>\n<p>由于每一个页面只有40条数据，所以要实现自动获取获取下一页链接，来实现自动爬取，找到网页种的元素（下一页）获取下一页的链接，实现递归爬取</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20201015194850191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"121212\" /></p>\n<p>参考代码如下</p>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_job_link</span><span class=\"hljs-params\">(html)</span>:</span>\n    job_link = []\n    <span class=\"hljs-comment\"># 解析网页得到链接</span>\n    soup = BeautifulSoup(html, <span class=\"hljs-string\">\"html.parser\"</span>)\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> soup.find_all(<span class=\"hljs-string\">\'h3\'</span>):\n        <span class=\"hljs-keyword\">if</span> item.has_attr(<span class=\"hljs-string\">\"title\"</span>):\n            <span class=\"hljs-comment\"># 抽取链接内容</span>\n            link = item.find_all(<span class=\"hljs-string\">\"a\"</span>)[<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">\"href\"</span>]\n        job_link.append(link)\n        print(link)\n\n    <span class=\"hljs-keyword\">try</span>:\n        find_next_link = soup.select(<span class=\"hljs-string\">\".pager &gt; div.pagerbar &gt; a\"</span>)[<span class=\"hljs-number\">7</span>][<span class=\"hljs-string\">\'href\'</span>]\n        <span class=\"hljs-keyword\">if</span> find_next_link == <span class=\"hljs-string\">\"javascript:\"</span>:\n            <span class=\"hljs-keyword\">return</span> job_link\n        <span class=\"hljs-comment\"># 拼接上域名</span>\n        find_next_link = <span class=\"hljs-string\">\"https://www.liepin.com\"</span> + str(find_next_link).replace(<span class=\"hljs-string\">\'°\'</span>, <span class=\"hljs-string\">\'0\'</span>)\n        print(find_next_link)\n        <span class=\"hljs-comment\"># 获取到下一个网页的数据</span>\n        next_html = get_job_html(find_next_link)\n        <span class=\"hljs-comment\"># 解析网页</span>\n        <span class=\"hljs-keyword\">if</span> next_html <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">None</span>:\n            next_link = get_job_link(next_html)\n            <span class=\"hljs-keyword\">for</span> link <span class=\"hljs-keyword\">in</span> next_link:\n                job_link.append(link)\n    <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n        print(e)\n    <span class=\"hljs-keyword\">finally</span>:\n        <span class=\"hljs-keyword\">return</span> job_link\n</code></div></pre>\n<h3><a id=\"4__125\"></a>4. 保存数据到表格</h3>\n<ul>\n<li>表格操作很简单，就不赘述</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">save_link</span><span class=\"hljs-params\">(link_list)</span>:</span>\n    work_book = xlwt.Workbook(encoding=<span class=\"hljs-string\">\"utf-8\"</span>, style_compression=<span class=\"hljs-number\">0</span>)\n    work_sheet = work_book.add_sheet(<span class=\"hljs-string\">\"job_link\"</span>, cell_overwrite_ok=<span class=\"hljs-keyword\">True</span>)\n    col = <span class=\"hljs-string\">\"Link\"</span>\n    work_sheet.write(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, col)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, len(link_list)):\n        print(<span class=\"hljs-string\">\"第%d条\"</span> % i)\n        data = link_list[i]\n        work_sheet.write(i+<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, str(data))\n    work_book.save(<span class=\"hljs-string\">\"job_link.xls\"</span>)    <span class=\"hljs-comment\"># 保存数据</span>\n</code></div></pre>\n<h2><a id=\"_141\"></a>爬取职位详情信息</h2>\n<ul>\n<li>\n<p>获取到职位链接后保存在表格中，下一步就是访问这个些链接，爬取到详细信息，并保存到数据库中</p>\n</li>\n<li>\n<p>爬取开始就发现有链接的规律，有两种链接，第一种是正常的可以直接访问的，还有一种没有添加域名的，所以我们有加上域名<br />\n<img src=\"https://img-blog.csdnimg.cn/20201015194535556.png#pic_center\" alt=\"1212\" /></p>\n</li>\n</ul>\n<h3><a id=\"1__147\"></a>1. 基本步骤</h3>\n<ul>\n<li>获取表格中的链接</li>\n<li>获取网页</li>\n<li>解析网页</li>\n<li>保存数据</li>\n</ul>\n<p><strong>基本框架的搭建：</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\"># 读取表格链接</span>\n    links = read_excel_get_link()\n    <span class=\"hljs-comment\"># 获取链接网页</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, len(links)):\n        <span class=\"hljs-keyword\">if</span> links[i][<span class=\"hljs-number\">0</span>] != <span class=\"hljs-string\">\'h\'</span>:\n            links[i] = <span class=\"hljs-string\">\"https://www.liepin.com\"</span> + links[i]\n        print(links[i])\n        <span class=\"hljs-comment\"># 获取网页</span>\n        message_html = getLink.get_job_html(links[i])\n        <span class=\"hljs-keyword\">if</span> message_html <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">None</span>:\n            <span class=\"hljs-comment\"># 解析数据</span>\n            message_data = get_message_data(message_html)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-comment\"># 保存一条数据</span>\n        <span class=\"hljs-keyword\">try</span>:\n            save_datas_sql(message_data)\n        <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n            <span class=\"hljs-keyword\">continue</span>\n</code></div></pre>\n<h3><a id=\"2__177\"></a>2. 获取表格链接</h3>\n<ul>\n<li>表格操作不在赘述</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">read_excel_get_link</span><span class=\"hljs-params\">()</span>:</span>\n    links = []\n    <span class=\"hljs-comment\"># 读取表格链接数据</span>\n    <span class=\"hljs-comment\"># 打开表格</span>\n    work_book = xlrd.open_workbook(<span class=\"hljs-string\">\"job_link.xls\"</span>)\n    <span class=\"hljs-comment\"># 获取sheet</span>\n    sheet = work_book.sheet_by_index(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, sheet.nrows):\n        link = sheet.cell(i, <span class=\"hljs-number\">0</span>).value\n        links.append(link)\n    <span class=\"hljs-keyword\">return</span> links\n</code></div></pre>\n<h3><a id=\"3__194\"></a>3. 获取职位详情信息网页</h3>\n<p><mark>message_html = getLink.get_job_html(links[i])</mark></p>\n<ul>\n<li>调用上面获取职位链接时的函数：get_job_html</li>\n</ul>\n<h3><a id=\"4__198\"></a>4. 解析详情网页得到数据</h3>\n<ul>\n<li>解析网页，获取到页面的元素：\n<ul>\n<li>职位名称</li>\n<li>公司</li>\n<li>薪水</li>\n<li>职位描述<br />\n<img src=\"https://img-blog.csdnimg.cn/20201015200232184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"21321312\" /></li>\n</ul>\n</li>\n</ul>\n<p>参看网页的元素：<br />\n<img src=\"https://img-blog.csdnimg.cn/20201015200731364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></p>\n<ul>\n<li>使用标签选择器来定位元素</li>\n<li>在爬取过程中有时会遇到一些转义字符的问题需要注意</li>\n</ul>\n<p>参考代码</p>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_message_data</span><span class=\"hljs-params\">(html)</span>:</span>\n    data = []\n    soup = BeautifulSoup(html, <span class=\"hljs-string\">\"html.parser\"</span>)\n    <span class=\"hljs-keyword\">try</span>:\n        <span class=\"hljs-comment\"># 岗位名称</span>\n        title = soup.select(<span class=\"hljs-string\">\".title-info &gt; h1\"</span>)[<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">\'title\'</span>]\n        data.append(title)\n\n        <span class=\"hljs-comment\"># 公司</span>\n        company = soup.select(<span class=\"hljs-string\">\".title-info &gt; h3 &gt; a\"</span>)\n        <span class=\"hljs-keyword\">if</span> len(company) != <span class=\"hljs-number\">0</span>:\n            company = company[<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">\'title\'</span>]\n        <span class=\"hljs-keyword\">else</span>:\n            company = <span class=\"hljs-string\">\" \"</span>\n        data.append(company)\n\n        <span class=\"hljs-comment\"># 薪水</span>\n        salary = soup.select(<span class=\"hljs-string\">\".job-title-left &gt; p\"</span>)\n        <span class=\"hljs-keyword\">if</span> len(salary) != <span class=\"hljs-number\">0</span>:\n            salary = salary[<span class=\"hljs-number\">0</span>].contents[<span class=\"hljs-number\">0</span>]\n        <span class=\"hljs-keyword\">else</span>:\n            salary = <span class=\"hljs-string\">\" \"</span>\n        salary = salary \\\n            .replace(<span class=\"hljs-string\">\'\\n\'</span>, <span class=\"hljs-string\">\'\'</span>) \\\n            .replace(<span class=\"hljs-string\">\'\\t\'</span>, <span class=\"hljs-string\">\'\'</span>) \\\n            .replace(<span class=\"hljs-string\">\'\\r\'</span>, <span class=\"hljs-string\">\'\'</span>) \\\n            .replace(<span class=\"hljs-string\">\' \'</span>, <span class=\"hljs-string\">\'\'</span>) \\\n            .replace(<span class=\"hljs-string\">\'\"\'</span>, <span class=\"hljs-string\">\'\'</span>)\n        data.append(salary)\n\n        <span class=\"hljs-comment\"># 描述</span>\n        description = soup.select(<span class=\"hljs-string\">\".content.content-word\"</span>)\n        <span class=\"hljs-keyword\">if</span> len(description) != <span class=\"hljs-number\">0</span>:\n            all_des = description[<span class=\"hljs-number\">0</span>].contents\n            description = <span class=\"hljs-string\">\" \"</span>\n            <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> all_des:\n                <span class=\"hljs-keyword\">if</span> type(item) == bs4.element.NavigableString:\n                    <span class=\"hljs-comment\"># print(item)</span>\n                    description = description + item\n            <span class=\"hljs-comment\"># print(description)</span>\n        <span class=\"hljs-keyword\">else</span>:\n            description = <span class=\"hljs-string\">\" \"</span>\n        description = description \\\n            .replace(<span class=\"hljs-string\">\'\\n\'</span>, <span class=\"hljs-string\">\'\'</span>) \\\n            .replace(<span class=\"hljs-string\">\'\\t\'</span>, <span class=\"hljs-string\">\'\'</span>) \\\n            .replace(<span class=\"hljs-string\">\'\\r\'</span>, <span class=\"hljs-string\">\'\'</span>) \\\n            .replace(<span class=\"hljs-string\">\' \'</span>, <span class=\"hljs-string\">\'\'</span>) \\\n            .replace(<span class=\"hljs-string\">\'\"\'</span>, <span class=\"hljs-string\">\'\'</span>)\n        data.append(description)\n    <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n        print(e)\n    <span class=\"hljs-keyword\">finally</span>:\n        print(data)\n        <span class=\"hljs-keyword\">return</span> data\n</code></div></pre>\n<h3><a id=\"5__270\"></a>5. 保存数据到数据库</h3>\n<ul>\n<li>使用sqlite3数据库可以很好的储存数据 ，也方便查询数据</li>\n</ul>\n<p><strong>创建数据库代码</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-comment\"># 建表语句</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">init_job_sqlite</span><span class=\"hljs-params\">()</span>:</span>\n    connet = sqlite3.connect(<span class=\"hljs-string\">\"job_message.db\"</span>)  <span class=\"hljs-comment\"># 打开或创建文件</span>\n    <span class=\"hljs-comment\"># 建表</span>\n    c = connet.cursor()  <span class=\"hljs-comment\"># 获取游标</span>\n    sql = <span class=\"hljs-string\">\'\'\'\n        create table if not exists job_message(\n            id integer not null primary key autoincrement,\n            title text not null,\n            company text,\n            salary text,\n            description  text\n        )\n    \'\'\'</span>\n    c.execute(sql)  <span class=\"hljs-comment\"># 执行sql语句</span>\n    connet.commit()  <span class=\"hljs-comment\"># 提交</span>\n    connet.close()  <span class=\"hljs-comment\"># 关闭数据库</span>\n</code></div></pre>\n<p><strong>插入数据到数据库中实现数据的储存</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">save_datas_sql</span><span class=\"hljs-params\">(data)</span>:</span>\n    init_job_sqlite()  <span class=\"hljs-comment\"># 初始化数控库</span>\n    <span class=\"hljs-comment\"># 插入数据</span>\n    connet = sqlite3.connect(<span class=\"hljs-string\">\"job_message.db\"</span>)  <span class=\"hljs-comment\"># 打开或创建文件</span>\n    c = connet.cursor()  <span class=\"hljs-comment\"># 获取游标</span>\n    <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>):\n        data[index] = <span class=\"hljs-string\">\'\"\'</span> + data[index] + <span class=\"hljs-string\">\'\"\'</span>\n    sql = <span class=\"hljs-string\">\'\'\'\n        insert into job_message(title,company,salary,description)\n        values(%s)\'\'\'</span> % <span class=\"hljs-string\">\",\"</span>.join(data)\n    c.execute(sql)\n    connet.commit()\n</code></div></pre>\n<h2><a id=\"_311\"></a>可视化职位信息</h2>\n<ul>\n<li>这里使用flask框架搭建一个简单网站实现数据的可视化</li>\n<li>首先在网上随便找一个网页模板下载下来：<a href=\"http://sc.chinaz.com/moban/\" target=\"_blank\">参考下载网站</a></li>\n</ul>\n<h3><a id=\"1__315\"></a>1. 首页</h3>\n<ul>\n<li>一些前端展示，这里不在赘述</li>\n<li>在这里贴上我的文件结构<br />\n<img src=\"https://img-blog.csdnimg.cn/20201015202904706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"123456\" /></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20201015202222983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></p>\n<h3><a id=\"2__322\"></a>2. 职位列表</h3>\n<ul>\n<li>这里就是一个查询数据库的过程</li>\n<li>把数据库中的数据展示在网页上</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20201015202356970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></p>\n<ul>\n<li>\n<p>关于数据库中的数据如何展现在静态网页上，我这上一篇学习的博客中有记录<a href=\"https://blog.csdn.net/qq_43309907/article/details/108919658\" target=\"_blank\">爬取豆瓣笔记</a></p>\n</li>\n<li>\n<p>由于数据太多，这里选取前100条数据显示出来</p>\n</li>\n<li>\n<p>python代码参考下面的app.py中的代码</p>\n</li>\n<li>\n<p>关键前端代码如下</p>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"table table-hover table-light\"</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>id<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>职位<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>公司<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>工资<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>职位描述<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n			{%for job in jobs%}\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{job[0]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{job[1]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{job[2]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{job[3]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{job[4]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n			{%endfor%}\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n</code></div></pre>\n<h3><a id=\"3__355\"></a>3. 薪水分析</h3>\n<ul>\n<li>关于薪水的分布，我们可以用把数据库中的数据读取出来，做个计算，统计薪水的分布图\n<ul>\n<li>薪水的格式都是：a-bk·c薪，统计公式：ave = (x + y) / 2 * z/10得到统计结果，并排序一下</li>\n<li>这里使用百度的echarts来实现，<a href=\"https://echarts.apache.org/examples/zh/index.html\" target=\"_blank\">百度echarts跳转链接</a></li>\n<li>这里要引入一个js文件：<a href=\"https://echarts.apache.org/zh/tutorial.html#5%20%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%20ECharts\" target=\"_blank\">上手链接</a></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20201015203114601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"121212\" /><br />\n关键前端代码：</p>\n<pre><div class=\"hljs\"><code class=\"lang-html\">		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"main\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width: 100%;height:450px;margin: 0 auto;\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">\n	<span class=\"hljs-comment\">// 基于准备好的dom，初始化echarts实例</span>\n	<span class=\"hljs-keyword\">var</span> myChart = echarts.init( <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\'main\'</span>));\n	<span class=\"hljs-keyword\">var</span> data = {{ data }};\n	option = {\n		<span class=\"hljs-attr\">xAxis</span>: {\n			<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'value\'</span>,\n			<span class=\"hljs-attr\">splitLine</span>: {\n				<span class=\"hljs-attr\">lineStyle</span>: {\n					<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'dashed\'</span>\n				}\n			},\n			<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"年薪/万\"</span>,\n			<span class=\"hljs-attr\">splitNumber</span>: <span class=\"hljs-number\">10</span>\n		},\n		<span class=\"hljs-attr\">yAxis</span>: {\n			<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'value\'</span>,\n			<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"统计/个\"</span>,\n			<span class=\"hljs-attr\">splitLine</span>: {\n				<span class=\"hljs-attr\">lineStyle</span>: {\n					<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'dashed\'</span>\n				}\n			}\n		},\n		<span class=\"hljs-attr\">series</span>: [{\n			<span class=\"hljs-attr\">symbolSize</span>: <span class=\"hljs-number\">10</span>,\n			<span class=\"hljs-attr\">data</span>: data,\n			<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'scatter\'</span>\n		}]\n	};\n\n\n	<span class=\"hljs-comment\">// 使用刚指定的配置项和数据显示图表。</span>\n	myChart.setOption(option);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></div></pre>\n<h3><a id=\"4__405\"></a>4. 职位描述词云</h3>\n<ul>\n<li>词云的生成使用jieba分词器来实现</li>\n<li>使用wordcloud来绘图：<a href=\"http://amueller.github.io/word_cloud/generated/wordcloud.WordCloud.html\" target=\"_blank\">参考文档链接</a></li>\n<li>具体实现参考下方app.py代码</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20201015203600789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"23131312\" /></p>\n<h3><a id=\"5_apppy_414\"></a>5. app.py文件代码</h3>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask, render_template\n<span class=\"hljs-keyword\">import</span> sqlite3\n<span class=\"hljs-keyword\">import</span> jieba  <span class=\"hljs-comment\"># 分词</span>\n<span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot <span class=\"hljs-keyword\">as</span> plt  <span class=\"hljs-comment\"># 绘图，数据可视化</span>\n<span class=\"hljs-keyword\">from</span> wordcloud <span class=\"hljs-keyword\">import</span> WordCloud  <span class=\"hljs-comment\"># 词云</span>\n<span class=\"hljs-keyword\">from</span> PIL <span class=\"hljs-keyword\">import</span> Image  <span class=\"hljs-comment\"># 图片处理</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np  <span class=\"hljs-comment\"># 矩阵运算</span>\n<span class=\"hljs-keyword\">import</span> re\n\napp = Flask(__name__)\n\n\n<span class=\"hljs-meta\">@app.route(\'/\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">home</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"home.html\"</span>)\n\n\n<span class=\"hljs-meta\">@app.route(\'/job\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">movie</span><span class=\"hljs-params\">()</span>:</span>\n    list = []\n    connet = sqlite3.connect(<span class=\"hljs-string\">\"./liepin/job_message.db\"</span>)  <span class=\"hljs-comment\"># 打开或创建文件</span>\n    c = connet.cursor()  <span class=\"hljs-comment\"># 获取游标</span>\n    sql = <span class=\"hljs-string\">\'\'\'select * from job_message LIMIT ((0-1)*100),100\'\'\'</span>\n    datas = c.execute(sql)\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> datas:\n        list.append(item)\n    c.close()\n    connet.close()\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"job.html\"</span>, jobs=list)\n\n\n<span class=\"hljs-meta\">@app.route(\'/salary\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">score</span><span class=\"hljs-params\">()</span>:</span>\n    data = []\n    con = sqlite3.connect(<span class=\"hljs-string\">\"./liepin/job_message.db\"</span>)\n    cur = con.cursor()\n    sql = <span class=\"hljs-string\">\"select salary,count(salary) from job_message group by salary\"</span>\n    datas = cur.execute(sql)\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> datas:\n        point = []\n        s = re.search(<span class=\"hljs-string\">r\"(\\d*)-(\\d*)k·(\\d*)薪\"</span>, item[<span class=\"hljs-number\">0</span>])\n        <span class=\"hljs-keyword\">if</span> s <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">None</span>:\n            <span class=\"hljs-keyword\">continue</span>\n        x = int(s.group(<span class=\"hljs-number\">1</span>))\n        y = int(s.group(<span class=\"hljs-number\">2</span>))\n        z = int(s.group(<span class=\"hljs-number\">3</span>))\n        ave = (x + y) / <span class=\"hljs-number\">2</span> * z/<span class=\"hljs-number\">10</span>\n        point.append(ave)\n        point.append(int(item[<span class=\"hljs-number\">1</span>]))\n        data.append(point)\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, len(data)):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, len(data) - <span class=\"hljs-number\">1</span>):\n            <span class=\"hljs-keyword\">if</span> data[j][<span class=\"hljs-number\">0</span>] &gt; data[j + <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]:\n                a = data[j][<span class=\"hljs-number\">0</span>]\n                data[j][<span class=\"hljs-number\">0</span>] = data[j + <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]\n                data[j + <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] = a\n                b = data[j][<span class=\"hljs-number\">1</span>]\n                data[j][<span class=\"hljs-number\">1</span>] = data[j + <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]\n                data[j + <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] = b\n    print(data)\n    cur.close()\n    con.close()\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"salary.html\"</span>, data=data)\n\n\n<span class=\"hljs-meta\">@app.route(\'/word\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">word</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\"># 获取数据</span>\n    con = sqlite3.connect(<span class=\"hljs-string\">\"./liepin/job_message.db\"</span>)\n    cur = con.cursor()\n    sql = <span class=\"hljs-string\">\"select description from job_message\"</span>\n    data = con.execute(sql)\n    <span class=\"hljs-comment\"># 拼接</span>\n    text = <span class=\"hljs-string\">\"\"</span>\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> data:\n        text = text + item[<span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-comment\"># 停用词列表</span>\n    stopwords = [<span class=\"hljs-string\">\'任职\'</span>, <span class=\"hljs-string\">\'要求\'</span>, <span class=\"hljs-string\">\'职位\'</span>,\n                 <span class=\"hljs-string\">\'描述\'</span>, <span class=\"hljs-string\">\'优先\'</span>, <span class=\"hljs-string\">\'，\'</span>,\n                 <span class=\"hljs-string\">\'相关\'</span>, <span class=\"hljs-string\">\'专业\'</span>, <span class=\"hljs-string\">\'熟练\'</span>,\n                 <span class=\"hljs-string\">\'使用\'</span>, <span class=\"hljs-string\">\'工作\'</span>, <span class=\"hljs-string\">\'职责\'</span>]\n    cut = jieba.cut(text, cut_all=<span class=\"hljs-keyword\">False</span>)\n    print(type(cut))\n    final = []\n    <span class=\"hljs-keyword\">for</span> seg <span class=\"hljs-keyword\">in</span> cut:\n        <span class=\"hljs-keyword\">if</span> seg <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> stopwords:\n            print(seg)\n            final.append(seg)\n\n    string = <span class=\"hljs-string\">\" \"</span>.join(final)\n    cur.close()\n    con.close()\n    <span class=\"hljs-comment\"># 找到一张图片</span>\n    img = Image.open(<span class=\"hljs-string\">\"./static/timg.jpg\"</span>)  <span class=\"hljs-comment\"># 打开遮罩图片</span>\n    img_array = np.array(img)  <span class=\"hljs-comment\"># 将图片转换为数组</span>\n    wold_cloud = WordCloud(\n        background_color=<span class=\"hljs-string\">\"#FFFFFF\"</span>,\n        mask=img_array,\n        font_path=<span class=\"hljs-string\">\"STKAITI.TTF\"</span>,  <span class=\"hljs-comment\"># 字体所在位置</span>\n    ).generate_from_text(string)  <span class=\"hljs-comment\"># 放入词</span>\n    <span class=\"hljs-comment\"># 绘制图片</span>\n    fig = plt.figure(<span class=\"hljs-number\">1</span>)\n    plt.imshow(wold_cloud)\n    plt.axis(<span class=\"hljs-string\">\'off\'</span>)  <span class=\"hljs-comment\"># 不显示坐标轴</span>\n    <span class=\"hljs-comment\"># plt.show()  # 显示生成的词云图片</span>\n    plt.savefig(<span class=\"hljs-string\">\"./static/word.jpg\"</span>, dpi=<span class=\"hljs-number\">300</span>)\n\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"word.html\"</span>)\n\n\n<span class=\"hljs-meta\">@app.route(\'/author\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">author</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"author.html\"</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\'__main__\'</span>:\n    app.run(debug=<span class=\"hljs-keyword\">True</span>)\n\n</code></div></pre>\n','@[toc](目录)\n\n# 猎聘网信息爬取\n\n![121212121](https://img-blog.csdnimg.cn/20201015191425645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n- 爬取猎聘网信息是为了完成需求分析这门课的作业\n- 哎，为了完成作业，五天入门python爬虫，找了个视频就开始了，学习笔记如下[爬取豆瓣笔记](https://blog.csdn.net/qq_43309907/article/details/108919658)\n- 这篇博客用来记录，爬取猎聘网的整个过程\n- 爬取过程整体分为三个过程：\n  - 爬取职位链接\n  - 爬取职位详情信息\n  - 可视化信息统计\n\n## 爬取职位链接\n### 1. 构建URL：\n\n```python\nhttps://www.liepin.com/zhaopin/?compkind=&dqs=010&pubTime=&pageSize=40&salary=&compTag=&sortFlag=&compIds=&subIndustry=&jobKind=&industries=&compscale=&key=%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98&siTag=LiAE77uh7ygbLjiB5afMYg%7EfA9rXquZc5IkJpXC-Ycixw&d_sfrom=search_fp&d_ckId=cd34a20d8742a36fa58243aee1ca77fe&d_curPage=0&d_pageSize=40&d_headId=cd34a20d8742a36fa58243aee1ca77fe\n```\n- https://www.liepin.com：域名\n- /zhaopin/：网站前缀\n- ?：问号后面接参数\n- 这里我们要爬取关键词为“数据挖掘”各个地区的职位信息来分析，所以要分析的关键词为（key），和地区参数（dqs）以&相连\n- 参考上述URL：（key=%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98），后面一串乱码是因为汉字在作为关键词时要序列化\n- 因为这里用urllib这个包来获取网页，所以要把汉字序列化，如果使用requests包来获取就不用\n- 调用（urllib.parse.quote(“数据挖掘”, \'utf-8\')）这个函数来序列化汉字\n\n参考代码如下\n\n~~~python\ndef main():\n    job_list = []\n    key = \"数据挖掘\"\n    dqs = [\"010\", \"020\", \"050020\", \"050090\", \"030\", \"060080\", \"040\", \"060020\", \"070020\", \"210040\", \"280020\", \"170020\"]\n    new_key = urllib.parse.quote(key, \'utf-8\')\n    for item in dqs:\n        url = \"https://www.liepin.com/zhaopin/?key=\"+new_key+\"&dqs=\"+item\n        print(url)\n        # 获取职位列表链接\n        job_html = get_job_html(url)\n        # 解析网页分析网页得到链接\n        link_list = get_job_link(job_html)\n        # 把链接储存到数组中\n        for i in link_list:\n            job_list.append(i)\n    # 保存职位链接到表格中\n    save_link(job_list)\n~~~\n\n\n\n\n### 2. 获取网页\n- 这里获取网页调用一个包：（from fake_useragent import UserAgent）\n- 需要在pip中安装：==pip install fake_useragent==\n- 首先要构造一个请求头：猎聘网的反爬虫不是很强大，不用登录就可以访问，调用==UserAgent().random== 可以随机生成浏览器标识，这样就不会被阻止\n- 如果网站的反扒做的很好就要在网页的请求头上添加相应的参数，参考如下图\n\n![1212121](https://img-blog.csdnimg.cn/20201015193453131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n参考代码：\n\n~~~python\ndef get_job_html(url):\n    print(\"-------爬取job网页-------\")\n    html = \"\"\n    head = {\n        \"User-Agent\": UserAgent().random\n    }\n    \"\"\"\n    head:模拟浏览器头部信息\n    \"User-Agent\":浏览器标识\n    \"\"\"\n    request = urllib.request.Request(url=url, headers=head)\n    try:\n        response = urllib.request.urlopen(request)\n        html = response.read().decode(\"utf-8\")\n    except Exception as e:\n        return None\n    return html\n~~~\n\n### 3. 解析网页\n- 分析网页元素获取数据\n![12121212](https://img-blog.csdnimg.cn/2020101519420828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n- 由于每一个页面只有40条数据，所以要实现自动获取获取下一页链接，来实现自动爬取，找到网页种的元素（下一页）获取下一页的链接，实现递归爬取\n\n![121212](https://img-blog.csdnimg.cn/20201015194850191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n参考代码如下\n\n~~~python\ndef get_job_link(html):\n    job_link = []\n    # 解析网页得到链接\n    soup = BeautifulSoup(html, \"html.parser\")\n    for item in soup.find_all(\'h3\'):\n        if item.has_attr(\"title\"):\n            # 抽取链接内容\n            link = item.find_all(\"a\")[0][\"href\"]\n        job_link.append(link)\n        print(link)\n\n    try:\n        find_next_link = soup.select(\".pager > div.pagerbar > a\")[7][\'href\']\n        if find_next_link == \"javascript:\":\n            return job_link\n        # 拼接上域名\n        find_next_link = \"https://www.liepin.com\" + str(find_next_link).replace(\'°\', \'0\')\n        print(find_next_link)\n        # 获取到下一个网页的数据\n        next_html = get_job_html(find_next_link)\n        # 解析网页\n        if next_html is not None:\n            next_link = get_job_link(next_html)\n            for link in next_link:\n                job_link.append(link)\n    except Exception as e:\n        print(e)\n    finally:\n        return job_link\n~~~\n\n### 4. 保存数据到表格\n- 表格操作很简单，就不赘述\n\n~~~python\ndef save_link(link_list):\n    work_book = xlwt.Workbook(encoding=\"utf-8\", style_compression=0)\n    work_sheet = work_book.add_sheet(\"job_link\", cell_overwrite_ok=True)\n    col = \"Link\"\n    work_sheet.write(0, 0, col)\n    for i in range(0, len(link_list)):\n        print(\"第%d条\" % i)\n        data = link_list[i]\n        work_sheet.write(i+1, 0, str(data))\n    work_book.save(\"job_link.xls\")    # 保存数据\n~~~\n\n## 爬取职位详情信息\n- 获取到职位链接后保存在表格中，下一步就是访问这个些链接，爬取到详细信息，并保存到数据库中\n\n- 爬取开始就发现有链接的规律，有两种链接，第一种是正常的可以直接访问的，还有一种没有添加域名的，所以我们有加上域名\n![1212](https://img-blog.csdnimg.cn/20201015194535556.png#pic_center)\n\n### 1. 基本步骤\n- 获取表格中的链接\n- 获取网页\n- 解析网页\n- 保存数据\n\n**基本框架的搭建：**\n~~~python\ndef main():\n    # 读取表格链接\n    links = read_excel_get_link()\n    # 获取链接网页\n    for i in range(0, len(links)):\n        if links[i][0] != \'h\':\n            links[i] = \"https://www.liepin.com\" + links[i]\n        print(links[i])\n        # 获取网页\n        message_html = getLink.get_job_html(links[i])\n        if message_html is not None:\n            # 解析数据\n            message_data = get_message_data(message_html)\n        else:\n            continue\n        # 保存一条数据\n        try:\n            save_datas_sql(message_data)\n        except Exception as e:\n            continue\n~~~\n\n### 2. 获取表格链接\n- 表格操作不在赘述\n\n```python\ndef read_excel_get_link():\n    links = []\n    # 读取表格链接数据\n    # 打开表格\n    work_book = xlrd.open_workbook(\"job_link.xls\")\n    # 获取sheet\n    sheet = work_book.sheet_by_index(0)\n    for i in range(1, sheet.nrows):\n        link = sheet.cell(i, 0).value\n        links.append(link)\n    return links\n```\n\n### 3. 获取职位详情信息网页\n==message_html = getLink.get_job_html(links[i])==\n- 调用上面获取职位链接时的函数：get_job_html\n\n### 4. 解析详情网页得到数据\n- 解析网页，获取到页面的元素：\n  - 职位名称\n  - 公司\n  - 薪水\n  - 职位描述\n![21321312](https://img-blog.csdnimg.cn/20201015200232184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n参看网页的元素：\n![12121](https://img-blog.csdnimg.cn/20201015200731364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n- 使用标签选择器来定位元素\n- 在爬取过程中有时会遇到一些转义字符的问题需要注意\n\n参考代码\n\n~~~python\ndef get_message_data(html):\n    data = []\n    soup = BeautifulSoup(html, \"html.parser\")\n    try:\n        # 岗位名称\n        title = soup.select(\".title-info > h1\")[0][\'title\']\n        data.append(title)\n\n        # 公司\n        company = soup.select(\".title-info > h3 > a\")\n        if len(company) != 0:\n            company = company[0][\'title\']\n        else:\n            company = \" \"\n        data.append(company)\n\n        # 薪水\n        salary = soup.select(\".job-title-left > p\")\n        if len(salary) != 0:\n            salary = salary[0].contents[0]\n        else:\n            salary = \" \"\n        salary = salary \\\n            .replace(\'\\n\', \'\') \\\n            .replace(\'\\t\', \'\') \\\n            .replace(\'\\r\', \'\') \\\n            .replace(\' \', \'\') \\\n            .replace(\'\"\', \'\')\n        data.append(salary)\n\n        # 描述\n        description = soup.select(\".content.content-word\")\n        if len(description) != 0:\n            all_des = description[0].contents\n            description = \" \"\n            for item in all_des:\n                if type(item) == bs4.element.NavigableString:\n                    # print(item)\n                    description = description + item\n            # print(description)\n        else:\n            description = \" \"\n        description = description \\\n            .replace(\'\\n\', \'\') \\\n            .replace(\'\\t\', \'\') \\\n            .replace(\'\\r\', \'\') \\\n            .replace(\' \', \'\') \\\n            .replace(\'\"\', \'\')\n        data.append(description)\n    except Exception as e:\n        print(e)\n    finally:\n        print(data)\n        return data\n~~~\n\n### 5. 保存数据到数据库\n- 使用sqlite3数据库可以很好的储存数据 ，也方便查询数据\n\n**创建数据库代码**\n\n~~~python\n# 建表语句\ndef init_job_sqlite():\n    connet = sqlite3.connect(\"job_message.db\")  # 打开或创建文件\n    # 建表\n    c = connet.cursor()  # 获取游标\n    sql = \'\'\'\n        create table if not exists job_message(\n            id integer not null primary key autoincrement,\n            title text not null,\n            company text,\n            salary text,\n            description  text\n        )\n    \'\'\'\n    c.execute(sql)  # 执行sql语句\n    connet.commit()  # 提交\n    connet.close()  # 关闭数据库\n~~~\n**插入数据到数据库中实现数据的储存**\n\n~~~python\ndef save_datas_sql(data):\n    init_job_sqlite()  # 初始化数控库\n    # 插入数据\n    connet = sqlite3.connect(\"job_message.db\")  # 打开或创建文件\n    c = connet.cursor()  # 获取游标\n    for index in range(0, 4):\n        data[index] = \'\"\' + data[index] + \'\"\'\n    sql = \'\'\'\n        insert into job_message(title,company,salary,description)\n        values(%s)\'\'\' % \",\".join(data)\n    c.execute(sql)\n    connet.commit()\n~~~\n\n## 可视化职位信息\n- 这里使用flask框架搭建一个简单网站实现数据的可视化\n- 首先在网上随便找一个网页模板下载下来：[参考下载网站](http://sc.chinaz.com/moban/)\n\n### 1. 首页\n- 一些前端展示，这里不在赘述\n- 在这里贴上我的文件结构\n![123456](https://img-blog.csdnimg.cn/20201015202904706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n![12121](https://img-blog.csdnimg.cn/20201015202222983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n### 2. 职位列表\n- 这里就是一个查询数据库的过程\n- 把数据库中的数据展示在网页上\n\n![12121](https://img-blog.csdnimg.cn/20201015202356970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n- 关于数据库中的数据如何展现在静态网页上，我这上一篇学习的博客中有记录[爬取豆瓣笔记](https://blog.csdn.net/qq_43309907/article/details/108919658)\n- 由于数据太多，这里选取前100条数据显示出来\n\n- python代码参考下面的app.py中的代码\n- 关键前端代码如下\n~~~html\n<table class=\"table table-hover table-light\">\n			<tr>\n				<td>id</td>\n				<td>职位</td>\n				<td>公司</td>\n				<td>工资</td>\n				<td>职位描述</td>\n			</tr>\n			{%for job in jobs%}\n			<tr>\n				<td>{{job[0]}}</td>\n				<td>{{job[1]}}</td>\n				<td>{{job[2]}}</td>\n				<td>{{job[3]}}</td>\n				<td>{{job[4]}}</td>\n			</tr>\n			{%endfor%}\n		</table>\n~~~\n\n\n### 3. 薪水分析\n\n- 关于薪水的分布，我们可以用把数据库中的数据读取出来，做个计算，统计薪水的分布图\n  - 薪水的格式都是：a-bk·c薪，统计公式：ave = (x + y) / 2 * z/10得到统计结果，并排序一下\n  - 这里使用百度的echarts来实现，[百度echarts跳转链接](https://echarts.apache.org/examples/zh/index.html)\n  - 这里要引入一个js文件：[上手链接](https://echarts.apache.org/zh/tutorial.html#5%20%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%20ECharts)\n\n![121212](https://img-blog.csdnimg.cn/20201015203114601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n关键前端代码：\n\n~~~html\n		<div id=\"main\" style=\"width: 100%;height:450px;margin: 0 auto;\"></div>\n<script type=\"text/javascript\">\n	// 基于准备好的dom，初始化echarts实例\n	var myChart = echarts.init( document.getElementById(\'main\'));\n	var data = {{ data }};\n	option = {\n		xAxis: {\n			type: \'value\',\n			splitLine: {\n				lineStyle: {\n					type: \'dashed\'\n				}\n			},\n			name: \"年薪/万\",\n			splitNumber: 10\n		},\n		yAxis: {\n			type: \'value\',\n			name: \"统计/个\",\n			splitLine: {\n				lineStyle: {\n					type: \'dashed\'\n				}\n			}\n		},\n		series: [{\n			symbolSize: 10,\n			data: data,\n			type: \'scatter\'\n		}]\n	};\n\n\n	// 使用刚指定的配置项和数据显示图表。\n	myChart.setOption(option);\n</script>\n~~~\n\n\n### 4. 职位描述词云\n\n- 词云的生成使用jieba分词器来实现\n- 使用wordcloud来绘图：[参考文档链接](http://amueller.github.io/word_cloud/generated/wordcloud.WordCloud.html)\n- 具体实现参考下方app.py代码\n\n![23131312](https://img-blog.csdnimg.cn/20201015203600789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n \n### 5. app.py文件代码\n\n```python\nfrom flask import Flask, render_template\nimport sqlite3\nimport jieba  # 分词\nfrom matplotlib import pyplot as plt  # 绘图，数据可视化\nfrom wordcloud import WordCloud  # 词云\nfrom PIL import Image  # 图片处理\nimport numpy as np  # 矩阵运算\nimport re\n\napp = Flask(__name__)\n\n\n@app.route(\'/\')\ndef home():\n    return render_template(\"home.html\")\n\n\n@app.route(\'/job\')\ndef movie():\n    list = []\n    connet = sqlite3.connect(\"./liepin/job_message.db\")  # 打开或创建文件\n    c = connet.cursor()  # 获取游标\n    sql = \'\'\'select * from job_message LIMIT ((0-1)*100),100\'\'\'\n    datas = c.execute(sql)\n    for item in datas:\n        list.append(item)\n    c.close()\n    connet.close()\n    return render_template(\"job.html\", jobs=list)\n\n\n@app.route(\'/salary\')\ndef score():\n    data = []\n    con = sqlite3.connect(\"./liepin/job_message.db\")\n    cur = con.cursor()\n    sql = \"select salary,count(salary) from job_message group by salary\"\n    datas = cur.execute(sql)\n    for item in datas:\n        point = []\n        s = re.search(r\"(\\d*)-(\\d*)k·(\\d*)薪\", item[0])\n        if s is None:\n            continue\n        x = int(s.group(1))\n        y = int(s.group(2))\n        z = int(s.group(3))\n        ave = (x + y) / 2 * z/10\n        point.append(ave)\n        point.append(int(item[1]))\n        data.append(point)\n\n    for i in range(0, len(data)):\n        for j in range(0, len(data) - 1):\n            if data[j][0] > data[j + 1][0]:\n                a = data[j][0]\n                data[j][0] = data[j + 1][0]\n                data[j + 1][0] = a\n                b = data[j][1]\n                data[j][1] = data[j + 1][1]\n                data[j + 1][1] = b\n    print(data)\n    cur.close()\n    con.close()\n    return render_template(\"salary.html\", data=data)\n\n\n@app.route(\'/word\')\ndef word():\n    # 获取数据\n    con = sqlite3.connect(\"./liepin/job_message.db\")\n    cur = con.cursor()\n    sql = \"select description from job_message\"\n    data = con.execute(sql)\n    # 拼接\n    text = \"\"\n    for item in data:\n        text = text + item[0]\n    # 停用词列表\n    stopwords = [\'任职\', \'要求\', \'职位\',\n                 \'描述\', \'优先\', \'，\',\n                 \'相关\', \'专业\', \'熟练\',\n                 \'使用\', \'工作\', \'职责\']\n    cut = jieba.cut(text, cut_all=False)\n    print(type(cut))\n    final = []\n    for seg in cut:\n        if seg not in stopwords:\n            print(seg)\n            final.append(seg)\n\n    string = \" \".join(final)\n    cur.close()\n    con.close()\n    # 找到一张图片\n    img = Image.open(\"./static/timg.jpg\")  # 打开遮罩图片\n    img_array = np.array(img)  # 将图片转换为数组\n    wold_cloud = WordCloud(\n        background_color=\"#FFFFFF\",\n        mask=img_array,\n        font_path=\"STKAITI.TTF\",  # 字体所在位置\n    ).generate_from_text(string)  # 放入词\n    # 绘制图片\n    fig = plt.figure(1)\n    plt.imshow(wold_cloud)\n    plt.axis(\'off\')  # 不显示坐标轴\n    # plt.show()  # 显示生成的词云图片\n    plt.savefig(\"./static/word.jpg\", dpi=300)\n\n    return render_template(\"word.html\")\n\n\n@app.route(\'/author\')\ndef author():\n    return render_template(\"author.html\")\n\n\nif __name__ == \'__main__\':\n    app.run(debug=True)\n\n```\n',2,'123456',0),(20,5,'2020-11-24 17:13:33','编译原理（词法分析）','编译原理词法分析的实验（正规式转NFA）','https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2727673415,3958038973&fm=26&gp=0.jpg','<p><h3>目录</h3><ul><ul><li><a href=\"#_2\">【问题描述】</a></li><li><a href=\"#_6\">【基本要求】</a></li><li><a href=\"#_9\">【测试用例】</a></li><li><a href=\"#_21\">【解决步骤】</a></li><ul><li><a href=\"#NFA_23\">正规式转NFA方法步骤：</a></li><li><a href=\"#_30\">图的构建过程：</a></li><li><a href=\"#_243\">完整代码：</a></li></ul></ul></ul></p>\n<h2><a id=\"_2\"></a>【问题描述】</h2>\n<p>正规表达式→NFA问题的一种描述是：<br />\n编写一个程序，输入一个正规表达式，输出与该文法等价的有穷自动机。</p>\n<h2><a id=\"_6\"></a>【基本要求】</h2>\n<p>设置FA初始状态X，终态Y，过程态用数字表示：0 1 2 3………</p>\n<h2><a id=\"_9\"></a>【测试用例】</h2>\n<p>测试数据：</p>\n<blockquote>\n<p>(a|b)*abb</p>\n</blockquote>\n<p>输出结果应为：</p>\n<blockquote>\n<p>X X - ~ -&gt;3<br />\nY<br />\n0 0-a-&gt;1<br />\n1 1-b-&gt;2<br />\n2 2-b-&gt;Y<br />\n3 3-~-&gt;0 3-a-&gt;3 3-b-&gt;3</p>\n</blockquote>\n<h2><a id=\"_21\"></a>【解决步骤】</h2>\n<h3><a id=\"NFA_23\"></a>正规式转NFA方法步骤：</h3>\n<ol>\n<li>判断一下正规式有没有错误，括号对不对，并添加符号“+”</li>\n<li>运算符的优先级为：*&gt;|&gt;+</li>\n<li>根据符号优先级，把中缀表达式转后缀表达式便于计算</li>\n<li>根据后缀表达式依次构建图。有三种运算：*、|、+</li>\n</ol>\n<h3><a id=\"_30\"></a>图的构建过程：</h3>\n<p>（1）	定义边结构体用来储存边：edge</p>\n<pre><div class=\"hljs\"><code class=\"lang-c\"><span class=\"hljs-comment\">//NFA边</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">edge</span>{</span>\n	        <span class=\"hljs-keyword\">int</span> start;\n	        <span class=\"hljs-keyword\">int</span> end;\n	        <span class=\"hljs-keyword\">char</span> accept; \n};\n</code></div></pre>\n<p>（2）	定义一个类用来表示图结构：grup</p>\n<pre><div class=\"hljs\"><code class=\"lang-c\"><span class=\"hljs-comment\">//NFA单元，一个大的NFA单元可以是由很多小单元通过规则拼接起来</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">grup</span>{</span>\n<span class=\"hljs-keyword\">public</span>:\n	       <span class=\"hljs-built_in\">vector</span>&lt;edge&gt; edges;  <span class=\"hljs-comment\">//这个NFA拥有的边</span>\n	      <span class=\"hljs-keyword\">int</span> stateCount; <span class=\"hljs-comment\">//状态数</span>\n	      <span class=\"hljs-keyword\">int</span> StartState;  <span class=\"hljs-comment\">//开始状态</span>\n	      <span class=\"hljs-keyword\">int</span> EndState;  <span class=\"hljs-comment\">//结束状态</span>\n<span class=\"hljs-keyword\">public</span>:\n	       grup() {\n		     <span class=\"hljs-keyword\">this</span>-&gt;stateCount = <span class=\"hljs-number\">2</span>;\n		     <span class=\"hljs-keyword\">this</span>-&gt;StartState = <span class=\"hljs-number\">0</span>;\n		     <span class=\"hljs-keyword\">this</span>-&gt;EndState = <span class=\"hljs-number\">1</span>;\n	        }\n};\n</code></div></pre>\n<p>（3）	构建出的图结构边是从状态是从0开始编号的  构建过程：以(a|b)*abb为例</p>\n<ul>\n<li>\n<p>输入字符串添加+号，并判断是否合法：<br />\n算法：</p>\n<ul>\n<li>定义一个栈s用来匹配括号，判断括号是否符合条件。<br />\n从左往右扫描字符串，如果是字母或数字，则放入输出表达式后<br />\n然后判断后一个是什么符号判断是否要加上+号<br />\n对于类似如下几种情况需要加上+的：AA、A(、<em>A、</em>(、)A、)(。<br />\n完成后(a|b)<em>abb变为：(a|b)</em>+a+b+b</li>\n</ul>\n</li>\n<li>\n<p>中缀表达式转后缀表达式<br />\n算法：</p>\n<ul>\n<li>定义一个栈s，从左忘右扫描表达式，<br />\n遇见字母或数字拼接在输出表达式后<br />\n遇见“（”压入栈中<br />\n遇见“）”弹出栈中元素，直到遇到了“（”<br />\n遇到“<em>、|、+”判断栈顶元素的优先级，把比自己优先级高或等的弹出去<br />\n然后自己再压栈。<br />\n扫描完成后再把栈中元素依次弹出，拼接在输出字符串后<br />\n完成后(a|b)</em>+a+b+b应该变为：ab|*a+b+b+<br />\n核心算法：</li>\n</ul>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-c\"><span class=\"hljs-function\">Void <span class=\"hljs-title\">change_text</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> text)</span> </span>{\n	<span class=\"hljs-built_in\">stack</span>&lt;<span class=\"hljs-keyword\">char</span>&gt; s;\n	<span class=\"hljs-built_in\">string</span> new_text = <span class=\"hljs-string\">\"\"</span>;\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-keyword\">int</span>(text.length()); i++) {\n	<span class=\"hljs-keyword\">if</span> ((text[i] &lt;= <span class=\"hljs-string\">\'z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'a\'</span>) || (text[i] &lt;= <span class=\"hljs-string\">\'Z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'A\'</span>) || (text[i]&lt;= <span class=\"hljs-string\">\'9\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'0\'</span>)) {new_text = new_text + text[i];}\n		<span class=\"hljs-keyword\">else</span> {\n			<span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'(\'</span>) {s.push(text[i]);}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\')\'</span>) {\n				<span class=\"hljs-keyword\">while</span> (s.top() != <span class=\"hljs-string\">\'(\'</span>) {new_text = new_text + s.top();s.pop();}\n				s.pop();}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'*\'</span>) {s.push(text[i]);}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'|\'</span>) {\n				<span class=\"hljs-keyword\">if</span> (s.empty()) {s.push(text[i]);}\n				<span class=\"hljs-keyword\">else</span> {\n					<span class=\"hljs-keyword\">while</span> (!s.empty()) {\n						<span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'*\'</span>) {new_text = new_text + s.top();s.pop();}\n						<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'|\'</span>) {new_text = new_text + s.top();s.pop();}\n						<span class=\"hljs-keyword\">else</span> {<span class=\"hljs-keyword\">break</span>;}\n					}\n					s.push(text[i]);}\n			}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'+\'</span>) {\n				<span class=\"hljs-keyword\">if</span> (s.empty()) {s.push(text[i]);}\n				<span class=\"hljs-keyword\">else</span> {\n					<span class=\"hljs-keyword\">while</span>(!s.empty()){\n						<span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'*\'</span>) {new_text = new_text + s.top();s.pop();}\n<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'+\'</span>) {new_text = new_text + s.top();s.pop();}\n						<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'|\'</span>) {new_text = new_text + s.top();s.pop();}\n						<span class=\"hljs-keyword\">else</span> {<span class=\"hljs-keyword\">break</span>;}}\n					s.push(text[i]);}}}}\n	<span class=\"hljs-keyword\">while</span>(!s.empty()) {new_text += s.top();s.pop();}\n	<span class=\"hljs-keyword\">return</span> new_text;}\n\n</code></div></pre>\n<ul>\n<li>构架图结构：<br />\n算法：\n<ul>\n<li>定义一个栈用来储存图结构，从左向右扫描后缀表达式<br />\n如果遇到的是字母或数字，构建一个如下状态的图：一条边两个状态<br />\n<img src=\"https://img-blog.csdnimg.cn/20201124164429544.png#pic_center\" alt=\"1111\" /></li>\n</ul>\n</li>\n</ul>\n<p>压入栈中<br />\n如果遇到运算符分三种情“<em>、|、+”<br />\n遇到“</em>”，栈顶元素出栈<br />\n<img src=\"https://img-blog.csdnimg.cn/20201124164503754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"1111111\" /></p>\n<p>遇到“+”<br />\n<img src=\"https://img-blog.csdnimg.cn/20201124164530863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<p>遇到“|”<br />\n<img src=\"https://img-blog.csdnimg.cn/20201124164555594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>核心算法：</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-c\">getNFA(<span class=\"hljs-built_in\">string</span> text) {\n	<span class=\"hljs-built_in\">stack</span>&lt;grup&gt; s;\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(text.length()); i++) {\n		<span class=\"hljs-keyword\">if</span> ((text[i] &lt;= <span class=\"hljs-string\">\'z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'a\'</span>) || (text[i] &lt;= <span class=\"hljs-string\">\'Z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'A\'</span>)||(text[i] &lt;= <span class=\"hljs-string\">\'9\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'0\'</span>)) {\n			grup tempG;\n			edge tempE;\n			tempE.accept = text[i];\n			tempE.start = <span class=\"hljs-number\">0</span>;\n			tempE.end = <span class=\"hljs-number\">1</span>;\n			tempG.edges.push_back(tempE);\n			s.push(tempG);\n		}\n		<span class=\"hljs-keyword\">else</span> {\n			<span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'+\'</span>) {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG1 = s.top();\n				s.pop();\n				<span class=\"hljs-comment\">//图和图合成</span>\n				grup tempG = tempG1;\n				tempG.stateCount = tempG1.stateCount + tempG2.stateCount<span class=\"hljs-number\">-1</span>;\n				tempG.StartState = <span class=\"hljs-number\">0</span>;\n				tempG.EndState = tempG.stateCount - <span class=\"hljs-number\">1</span>;\n				<span class=\"hljs-comment\">//获取后一条边</span>\n				<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					e2.start += tempG1.stateCount<span class=\"hljs-number\">-1</span>;\n					e2.end += tempG1.stateCount<span class=\"hljs-number\">-1</span>;\n					tempG.edges.push_back(e2);\n				}\n				<span class=\"hljs-comment\">//合成图压栈</span>\n				s.push(tempG);\n			}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'*\'</span>) {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG;\n				<span class=\"hljs-keyword\">if</span> (tempG2.StartState!=tempG2.EndState) {\n					tempG.stateCount = tempG2.stateCount + <span class=\"hljs-number\">1</span>;\n				}\n				<span class=\"hljs-keyword\">else</span> {\n					tempG.stateCount = tempG2.stateCount + <span class=\"hljs-number\">2</span>;\n				}\n				tempG.EndState = tempG.stateCount<span class=\"hljs-number\">-1</span>;\n				<span class=\"hljs-comment\">//图内的边编号加1</span>\n				<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					<span class=\"hljs-keyword\">if</span> (e2.end==tempG2.EndState) {\n						e2.start += <span class=\"hljs-number\">1</span>;\n						e2.end = e2.start;\n					}\n					<span class=\"hljs-keyword\">else</span> {\n						e2.start += <span class=\"hljs-number\">1</span>;\n						e2.end += <span class=\"hljs-number\">1</span>;\n					}\n					tempG.edges.push_back(e2);\n				}\n				<span class=\"hljs-comment\">//添加两条边</span>\n				edge e1;\n				e1.accept = <span class=\"hljs-string\">\'~\'</span>;\n				e1.start = <span class=\"hljs-number\">0</span>;\n				e1.end = <span class=\"hljs-number\">1</span>;\n				edge e2;\n				e2.accept = <span class=\"hljs-string\">\'~\'</span>;\n				e2.start = tempG.EndState<span class=\"hljs-number\">-1</span>;\n				e2.end = e2.start + <span class=\"hljs-number\">1</span>;\n				tempG.edges.push_back(e1);\n				tempG.edges.push_back(e2);\n				<span class=\"hljs-comment\">//合成图压栈</span>\n				s.push(tempG);\n			}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'|\'</span>) {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG1 = s.top();\n				s.pop();\n				grup tempG;\n				tempG.StartState = <span class=\"hljs-number\">0</span>;\n				tempG.EndState = <span class=\"hljs-number\">0</span>;\n				tempG.stateCount = tempG1.stateCount + tempG2.stateCount<span class=\"hljs-number\">-3</span>;\n				<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(tempG1.edges.size());i++) {\n					edge e1 = tempG1.edges[i];\n					<span class=\"hljs-keyword\">if</span> (e1.end == tempG1.EndState) {\n						e1.end = <span class=\"hljs-number\">0</span>;\n					}\n					tempG.edges.push_back(e1);\n				}\n				<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					<span class=\"hljs-keyword\">if</span> (e2.end == tempG2.EndState) {\n						e2.end = <span class=\"hljs-number\">0</span>;\n					}\n					tempG.edges.push_back(e2);\n				}\n				<span class=\"hljs-comment\">//合成图压栈</span>\n				s.push(tempG);\n			}\n		}\n	}\n	<span class=\"hljs-keyword\">return</span> s.top();\n}\n</code></div></pre>\n<ul>\n<li>输出图结构：<br />\n输出时按照格式输出，构建好的图状态为0到n，把0输出为X最后一个输出为Y中间状态减一就可以了</li>\n</ul>\n<h3><a id=\"_243\"></a>完整代码：</h3>\n<pre><div class=\"hljs\"><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;fstream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stack&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;vector&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;string&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MAX 100</span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-comment\">//NFA边</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">edge</span>{</span>\n	<span class=\"hljs-keyword\">int</span> start;\n	<span class=\"hljs-keyword\">int</span> end;\n	<span class=\"hljs-keyword\">char</span> accept;\n};\n\n<span class=\"hljs-comment\">//NFA单元，一个大的NFA单元可以是由很多小单元通过规则拼接起来</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">grup</span>\n{</span>\n<span class=\"hljs-keyword\">public</span>:\n	<span class=\"hljs-built_in\">vector</span>&lt;edge&gt; edges;  <span class=\"hljs-comment\">//这个NFA拥有的边</span>\n	<span class=\"hljs-keyword\">int</span> stateCount; <span class=\"hljs-comment\">//状态数</span>\n	<span class=\"hljs-keyword\">int</span> StartState;  <span class=\"hljs-comment\">//开始状态</span>\n	<span class=\"hljs-keyword\">int</span> EndState;  <span class=\"hljs-comment\">//结束状态</span>\n<span class=\"hljs-keyword\">public</span>:\n	grup() {\n		<span class=\"hljs-keyword\">this</span>-&gt;stateCount = <span class=\"hljs-number\">2</span>;\n		<span class=\"hljs-keyword\">this</span>-&gt;StartState = <span class=\"hljs-number\">0</span>;\n		<span class=\"hljs-keyword\">this</span>-&gt;EndState = <span class=\"hljs-number\">1</span>;\n	}\n};\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WordAnstary</span> {</span>\n<span class=\"hljs-keyword\">private</span> :\n	<span class=\"hljs-built_in\">string</span> input_file = <span class=\"hljs-string\">\"testfile.txt\"</span>;\n	<span class=\"hljs-built_in\">string</span> output_file = <span class=\"hljs-string\">\"output.txt\"</span>;\n<span class=\"hljs-keyword\">public</span>:\n	<span class=\"hljs-comment\">//主函数</span>\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span></span>;\n	<span class=\"hljs-comment\">//整理字符串</span>\n	<span class=\"hljs-function\"><span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">clear_text</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> text)</span></span>;\n	<span class=\"hljs-comment\">//中缀表达式转后缀表达式 </span>\n	<span class=\"hljs-function\"><span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">change_text</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> text)</span></span>;\n	<span class=\"hljs-comment\">//根据正规式获得NFA</span>\n	<span class=\"hljs-function\">grup <span class=\"hljs-title\">getNFA</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> text)</span></span>;\n	<span class=\"hljs-comment\">//输出结果</span>\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printNFA</span><span class=\"hljs-params\">(grup out)</span></span>;\n};\n<span class=\"hljs-comment\">//主函数</span>\n<span class=\"hljs-keyword\">int</span> WordAnstary::start() {\n	<span class=\"hljs-comment\">//文件操作工具</span>\n	ifstream read_file;\n	<span class=\"hljs-comment\">//读取文件</span>\n	<span class=\"hljs-built_in\">string</span> text;\n	<span class=\"hljs-comment\">//read_file.open(input_file);</span>\n	<span class=\"hljs-comment\">//read_file &gt;&gt; text;</span>\n	<span class=\"hljs-built_in\">cin</span> &gt;&gt; text;\n	<span class=\"hljs-comment\">//cout &lt;&lt; text;</span>\n	<span class=\"hljs-comment\">//分析正规式，得到有穷自动机</span>\n	<span class=\"hljs-comment\">//cout &lt;&lt; \"原表达式为：\" &lt;&lt; text &lt;&lt; endl;</span>\n	<span class=\"hljs-built_in\">string</span> new_text = <span class=\"hljs-keyword\">this</span>-&gt;clear_text(text);\n	<span class=\"hljs-keyword\">if</span> (new_text != <span class=\"hljs-string\">\"\"</span>) {\n		<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"添加+的表达式：\"</span>&lt;&lt;new_text &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n		new_text = <span class=\"hljs-keyword\">this</span>-&gt;change_text(new_text);\n		<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"后缀表达式：\"</span>&lt;&lt;new_text &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n		grup out = <span class=\"hljs-keyword\">this</span>-&gt;getNFA(new_text);\n		<span class=\"hljs-keyword\">this</span>-&gt;printNFA(out);\n	}\n	<span class=\"hljs-keyword\">else</span> {\n		<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"输入不合法\"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n	}\n	read_file.close();\n	<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n};\n\n<span class=\"hljs-keyword\">void</span> WordAnstary::printNFA(grup out) {\n	<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"X \"</span>;\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-keyword\">int</span>(out.edges.size()); j++) {\n		edge eX = out.edges[j];\n		<span class=\"hljs-keyword\">if</span> (eX.start == <span class=\"hljs-number\">0</span>) {\n			<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"X-\"</span> &lt;&lt; eX.accept &lt;&lt; <span class=\"hljs-string\">\"-&gt;\"</span>;\n			<span class=\"hljs-keyword\">if</span> (eX.end==out.stateCount<span class=\"hljs-number\">-1</span>) {\n				<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Y \"</span>;\n			}\n			<span class=\"hljs-keyword\">else</span> {\n				<span class=\"hljs-built_in\">cout</span> &lt;&lt; eX.end - <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-string\">\" \"</span>;\n			}\n		}\n	}\n	<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n	<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Y \"</span>;\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-keyword\">int</span>(out.edges.size()); j++) {\n		edge eX = out.edges[j];\n		<span class=\"hljs-keyword\">if</span> (eX.start == out.stateCount - <span class=\"hljs-number\">1</span>) {\n			<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Y-\"</span> &lt;&lt; eX.accept &lt;&lt; <span class=\"hljs-string\">\"-&gt;\"</span>;\n			<span class=\"hljs-keyword\">if</span> (eX.end == out.stateCount - <span class=\"hljs-number\">1</span>) {\n				<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Y \"</span>;\n			}\n			<span class=\"hljs-keyword\">else</span> {\n				<span class=\"hljs-built_in\">cout</span> &lt;&lt; eX.end - <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-string\">\" \"</span>;\n			}\n		}\n	}\n	<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; out.stateCount - <span class=\"hljs-number\">1</span>; i++) {\n		<span class=\"hljs-built_in\">cout</span> &lt;&lt; i - <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">\" \"</span>;\n		<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-keyword\">int</span>(out.edges.size()); j++) {\n			edge e = out.edges[j];\n			<span class=\"hljs-keyword\">if</span> (e.start == i&amp;&amp;e.accept==<span class=\"hljs-string\">\'~\'</span>) {\n				<span class=\"hljs-built_in\">cout</span> &lt;&lt; e.start - <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">\"-\"</span> &lt;&lt; e.accept &lt;&lt; <span class=\"hljs-string\">\"-&gt;\"</span>;\n				<span class=\"hljs-keyword\">if</span> (e.end == out.stateCount - <span class=\"hljs-number\">1</span>) {\n					<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Y \"</span>;\n				}\n				<span class=\"hljs-keyword\">else</span> {\n					<span class=\"hljs-built_in\">cout</span> &lt;&lt; e.end - <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">\" \"</span>;\n				}\n			}\n		}\n		<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-keyword\">int</span>(out.edges.size()); j++) {\n			edge e = out.edges[j];\n			<span class=\"hljs-keyword\">if</span> (e.start == i&amp;&amp;e.accept!=<span class=\"hljs-string\">\'~\'</span>) {\n				<span class=\"hljs-built_in\">cout</span> &lt;&lt; e.start - <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">\"-\"</span> &lt;&lt; e.accept &lt;&lt; <span class=\"hljs-string\">\"-&gt;\"</span>;\n				<span class=\"hljs-keyword\">if</span> (e.end == out.stateCount - <span class=\"hljs-number\">1</span>) {\n					<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Y \"</span>;\n				}\n				<span class=\"hljs-keyword\">else</span> {\n					<span class=\"hljs-built_in\">cout</span> &lt;&lt; e.end - <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-string\">\" \"</span>;\n				}\n			}\n		}\n		<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n	}\n}\n\ngrup WordAnstary::getNFA(<span class=\"hljs-built_in\">string</span> text) {\n	<span class=\"hljs-built_in\">stack</span>&lt;grup&gt; s;\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(text.length()); i++) {\n		<span class=\"hljs-keyword\">if</span> ((text[i] &lt;= <span class=\"hljs-string\">\'z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'a\'</span>) || (text[i] &lt;= <span class=\"hljs-string\">\'Z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'A\'</span>)||(text[i] &lt;= <span class=\"hljs-string\">\'9\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'0\'</span>)) {\n			grup tempG;\n			edge tempE;\n			tempE.accept = text[i];\n			tempE.start = <span class=\"hljs-number\">0</span>;\n			tempE.end = <span class=\"hljs-number\">1</span>;\n			tempG.edges.push_back(tempE);\n			s.push(tempG);\n		}\n		<span class=\"hljs-keyword\">else</span> {\n			<span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'+\'</span>) {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG1 = s.top();\n				s.pop();\n				<span class=\"hljs-comment\">//图和图合成</span>\n				grup tempG = tempG1;\n				tempG.stateCount = tempG1.stateCount + tempG2.stateCount<span class=\"hljs-number\">-1</span>;\n				tempG.StartState = <span class=\"hljs-number\">0</span>;\n				tempG.EndState = tempG.stateCount - <span class=\"hljs-number\">1</span>;\n				<span class=\"hljs-comment\">//获取后一条边</span>\n				<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					e2.start += tempG1.stateCount<span class=\"hljs-number\">-1</span>;\n					e2.end += tempG1.stateCount<span class=\"hljs-number\">-1</span>;\n					tempG.edges.push_back(e2);\n				}\n				<span class=\"hljs-comment\">//合成图压栈</span>\n				s.push(tempG);\n			}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'*\'</span>) {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG;\n				<span class=\"hljs-keyword\">if</span> (tempG2.StartState!=tempG2.EndState) {\n					tempG.stateCount = tempG2.stateCount + <span class=\"hljs-number\">1</span>;\n				}\n				<span class=\"hljs-keyword\">else</span> {\n					tempG.stateCount = tempG2.stateCount + <span class=\"hljs-number\">2</span>;\n				}\n				tempG.EndState = tempG.stateCount<span class=\"hljs-number\">-1</span>;\n				<span class=\"hljs-comment\">//图内的边编号加1</span>\n				<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					<span class=\"hljs-keyword\">if</span> (e2.end==tempG2.EndState) {\n						e2.start += <span class=\"hljs-number\">1</span>;\n						e2.end = e2.start;\n					}\n					<span class=\"hljs-keyword\">else</span> {\n						e2.start += <span class=\"hljs-number\">1</span>;\n						e2.end += <span class=\"hljs-number\">1</span>;\n					}\n					tempG.edges.push_back(e2);\n				}\n				<span class=\"hljs-comment\">//添加两条边</span>\n				edge e1;\n				e1.accept = <span class=\"hljs-string\">\'~\'</span>;\n				e1.start = <span class=\"hljs-number\">0</span>;\n				e1.end = <span class=\"hljs-number\">1</span>;\n				edge e2;\n				e2.accept = <span class=\"hljs-string\">\'~\'</span>;\n				e2.start = tempG.EndState<span class=\"hljs-number\">-1</span>;\n				e2.end = e2.start + <span class=\"hljs-number\">1</span>;\n				tempG.edges.push_back(e1);\n				tempG.edges.push_back(e2);\n				<span class=\"hljs-comment\">//合成图压栈</span>\n				s.push(tempG);\n			}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'|\'</span>) {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG1 = s.top();\n				s.pop();\n				grup tempG;\n				tempG.StartState = <span class=\"hljs-number\">0</span>;\n				tempG.EndState = <span class=\"hljs-number\">0</span>;\n				tempG.stateCount = tempG1.stateCount + tempG2.stateCount<span class=\"hljs-number\">-3</span>;\n				<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(tempG1.edges.size());i++) {\n					edge e1 = tempG1.edges[i];\n					<span class=\"hljs-keyword\">if</span> (e1.end == tempG1.EndState) {\n						e1.end = <span class=\"hljs-number\">0</span>;\n					}\n					tempG.edges.push_back(e1);\n				}\n				<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					<span class=\"hljs-keyword\">if</span> (e2.end == tempG2.EndState) {\n						e2.end = <span class=\"hljs-number\">0</span>;\n					}\n					tempG.edges.push_back(e2);\n				}\n				<span class=\"hljs-comment\">//合成图压栈</span>\n				s.push(tempG);\n			}\n		}\n	}\n	<span class=\"hljs-keyword\">return</span> s.top();\n}\n\n<span class=\"hljs-built_in\">string</span> WordAnstary::clear_text(<span class=\"hljs-built_in\">string</span> text) {\n	<span class=\"hljs-comment\">//储存添加好+号的正规式</span>\n	<span class=\"hljs-built_in\">string</span> new_text = <span class=\"hljs-string\">\"\"</span>;\n	<span class=\"hljs-comment\">//分析栈用来分析()匹配</span>\n	<span class=\"hljs-built_in\">stack</span>&lt;<span class=\"hljs-keyword\">char</span>&gt; s;\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(text.length()); i++) {\n		<span class=\"hljs-keyword\">if</span> ((text[i] &lt;= <span class=\"hljs-string\">\'z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'a\'</span>) || (text[i] &lt;= <span class=\"hljs-string\">\'Z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'A\'</span>) || (text[i] &lt;= <span class=\"hljs-string\">\'9\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'0\'</span>)) {\n			new_text = new_text + text[i];\n			<span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-keyword\">int</span>(text.length()) - <span class=\"hljs-number\">1</span>) {\n				<span class=\"hljs-keyword\">if</span> ((text[i + <span class=\"hljs-number\">1</span>] &lt;= <span class=\"hljs-string\">\'z\'</span> &amp;&amp; text[i+<span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-string\">\'a\'</span>) || (text[i + <span class=\"hljs-number\">1</span>] &lt;= <span class=\"hljs-string\">\'Z\'</span> &amp;&amp; text[i + <span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-string\">\'A\'</span>) || (text[i+<span class=\"hljs-number\">1</span>] &lt;= <span class=\"hljs-string\">\'9\'</span> &amp;&amp; text[i+<span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-string\">\'0\'</span>)) {\n					new_text = new_text + <span class=\"hljs-string\">\'+\'</span>;\n				}\n				<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i + <span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">\'(\'</span>) {\n					new_text = new_text + <span class=\"hljs-string\">\'+\'</span>;\n				}\n			}\n		}\n		<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'|\'</span>) {\n			new_text = new_text + text[i];\n			<span class=\"hljs-keyword\">continue</span>;\n		}\n		<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'*\'</span>) {\n			new_text = new_text + text[i];\n			<span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-keyword\">int</span>(text.length()) - <span class=\"hljs-number\">1</span>) {\n				<span class=\"hljs-keyword\">if</span> ((text[i + <span class=\"hljs-number\">1</span>] &lt;= <span class=\"hljs-string\">\'z\'</span> &amp;&amp; text[i+<span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-string\">\'a\'</span>) || (text[i + <span class=\"hljs-number\">1</span>] &lt;= <span class=\"hljs-string\">\'Z\'</span> &amp;&amp; text[i + <span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-string\">\'A\'</span>) || (text[i] &lt;= <span class=\"hljs-string\">\'9\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'0\'</span>))\n					new_text = new_text + <span class=\"hljs-string\">\'+\'</span>;\n				<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i + <span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">\'(\'</span>)\n					new_text = new_text + <span class=\"hljs-string\">\'+\'</span>;\n			}\n		}\n		<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'(\'</span>) {\n			new_text = new_text + text[i];\n			s.push(text[i]);\n		}\n		<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\')\'</span>) {\n			new_text = new_text + text[i];\n			<span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-keyword\">int</span>(text.length()) - <span class=\"hljs-number\">1</span>) {\n				<span class=\"hljs-keyword\">if</span> ((text[i + <span class=\"hljs-number\">1</span>] &lt;= <span class=\"hljs-string\">\'z\'</span> &amp;&amp; text[i+<span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-string\">\'a\'</span>) || (text[i + <span class=\"hljs-number\">1</span>] &lt;= <span class=\"hljs-string\">\'Z\'</span> &amp;&amp; text[i + <span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-string\">\'A\'</span>) || (text[i] &lt;= <span class=\"hljs-string\">\'9\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'0\'</span>))\n					new_text = new_text + <span class=\"hljs-string\">\'+\'</span>;\n				<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i + <span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">\'(\'</span>)\n					new_text = new_text + <span class=\"hljs-string\">\'+\'</span>;\n			}\n			<span class=\"hljs-keyword\">if</span> (s.empty()) {\n				<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>;\n			}\n			<span class=\"hljs-keyword\">else</span> {\n				s.pop();\n			}\n		}\n		<span class=\"hljs-keyword\">else</span>\n			<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>;\n	}\n	<span class=\"hljs-keyword\">if</span> (s.empty())\n		<span class=\"hljs-keyword\">return</span> new_text;\n	<span class=\"hljs-keyword\">else</span>\n		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>;\n}\n\n<span class=\"hljs-built_in\">string</span> WordAnstary::change_text(<span class=\"hljs-built_in\">string</span> text) {\n	<span class=\"hljs-built_in\">stack</span>&lt;<span class=\"hljs-keyword\">char</span>&gt; s;\n	<span class=\"hljs-built_in\">string</span> new_text = <span class=\"hljs-string\">\"\"</span>;\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-keyword\">int</span>(text.length()); i++) {\n		<span class=\"hljs-keyword\">if</span> ((text[i] &lt;= <span class=\"hljs-string\">\'z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'a\'</span>) || (text[i] &lt;= <span class=\"hljs-string\">\'Z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'A\'</span>) || (text[i] &lt;= <span class=\"hljs-string\">\'9\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'0\'</span>)) {\n			new_text = new_text + text[i];\n		}\n		<span class=\"hljs-keyword\">else</span> {\n			<span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'(\'</span>) {\n				s.push(text[i]);\n			}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\')\'</span>) {\n				<span class=\"hljs-keyword\">while</span> (s.top() != <span class=\"hljs-string\">\'(\'</span>) {\n					new_text = new_text + s.top();\n					s.pop();\n				}\n				s.pop();\n			}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'*\'</span>) {\n				s.push(text[i]);\n			}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'|\'</span>) {\n				<span class=\"hljs-keyword\">if</span> (s.empty()) {\n					s.push(text[i]);\n				}\n				<span class=\"hljs-keyword\">else</span> {\n					<span class=\"hljs-keyword\">while</span> (!s.empty()) {\n						<span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'*\'</span>) {\n							new_text = new_text + s.top();\n							s.pop();\n						}\n						<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'|\'</span>) {\n							new_text = new_text + s.top();\n							s.pop();\n						}\n						<span class=\"hljs-keyword\">else</span> {\n							<span class=\"hljs-keyword\">break</span>;\n						}\n					}\n					s.push(text[i]);\n				}\n			}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'+\'</span>) {\n				<span class=\"hljs-keyword\">if</span> (s.empty()) {\n					s.push(text[i]);\n				}\n				<span class=\"hljs-keyword\">else</span> {\n					<span class=\"hljs-keyword\">while</span>(!s.empty()){\n						<span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'*\'</span>) {\n							new_text = new_text + s.top();\n							s.pop();\n						}<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'+\'</span>) {\n							new_text = new_text + s.top();\n							s.pop();\n						}\n						<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'|\'</span>) {\n							new_text = new_text + s.top();\n							s.pop();\n						}\n						<span class=\"hljs-keyword\">else</span> {\n							<span class=\"hljs-keyword\">break</span>;\n						}\n					}\n					s.push(text[i]);\n				}\n			}\n		}\n	}\n	<span class=\"hljs-keyword\">while</span>(!s.empty()) {\n		new_text += s.top();\n		s.pop();\n	}\n	<span class=\"hljs-keyword\">return</span> new_text;\n}\n\n\n<span class=\"hljs-comment\">//int main() {</span>\n<span class=\"hljs-comment\">//	WordAnstary wordAustary;</span>\n<span class=\"hljs-comment\">//	wordAustary.start();</span>\n<span class=\"hljs-comment\">//}```</span>\n</code></div></pre>\n','@[toc](目录)\n\n## 【问题描述】\n正规表达式→NFA问题的一种描述是：\n编写一个程序，输入一个正规表达式，输出与该文法等价的有穷自动机。\n\n## 【基本要求】\n设置FA初始状态X，终态Y，过程态用数字表示：0 1 2 3………\n\n## 【测试用例】\n测试数据：   \n>(a|b)*abb\n\n输出结果应为：\n> X X - ~ ->3\nY  \n0 0-a->1\n1 1-b->2\n2 2-b->Y\n3 3-~->0 3-a->3 3-b->3\n\n## 【解决步骤】\n\n### 正规式转NFA方法步骤：\n1.	判断一下正规式有没有错误，括号对不对，并添加符号“+”\n2.	运算符的优先级为：*>|>+\n3.	根据符号优先级，把中缀表达式转后缀表达式便于计算\n4.	根据后缀表达式依次构建图。有三种运算：*、|、+\n\n\n### 图的构建过程：\n（1）	定义边结构体用来储存边：edge\n~~~c\n//NFA边\nstruct edge{\n	        int start;\n	        int end;\n	        char accept; \n};\n~~~\n（2）	定义一个类用来表示图结构：grup\n~~~c\n//NFA单元，一个大的NFA单元可以是由很多小单元通过规则拼接起来\nclass grup{\npublic:\n	       vector<edge> edges;  //这个NFA拥有的边\n	      int stateCount; //状态数\n	      int StartState;  //开始状态\n	      int EndState;  //结束状态\npublic:\n	       grup() {\n		     this->stateCount = 2;\n		     this->StartState = 0;\n		     this->EndState = 1;\n	        }\n};\n~~~\n\n（3）	构建出的图结构边是从状态是从0开始编号的  构建过程：以(a|b)*abb为例\n- 输入字符串添加+号，并判断是否合法：\n算法：\n    - 定义一个栈s用来匹配括号，判断括号是否符合条件。\n从左往右扫描字符串，如果是字母或数字，则放入输出表达式后\n然后判断后一个是什么符号判断是否要加上+号\n对于类似如下几种情况需要加上+的：AA、A(、*A、*(、)A、)(。\n完成后(a|b)*abb变为：(a|b)*+a+b+b\n\n- 中缀表达式转后缀表达式\n算法：\n   - 定义一个栈s，从左忘右扫描表达式，\n遇见字母或数字拼接在输出表达式后\n遇见“（”压入栈中\n遇见“）”弹出栈中元素，直到遇到了“（”\n遇到“*、|、+”判断栈顶元素的优先级，把比自己优先级高或等的弹出去\n然后自己再压栈。\n扫描完成后再把栈中元素依次弹出，拼接在输出字符串后\n完成后(a|b)*+a+b+b应该变为：ab|*a+b+b+\n   核心算法：\n\n~~~c\nVoid change_text(string text) {\n	stack<char> s;\n	string new_text = \"\";\n	for (int i = 0; i<int(text.length()); i++) {\n	if ((text[i] <= \'z\' && text[i] >= \'a\') || (text[i] <= \'Z\' && text[i] >= \'A\') || (text[i]<= \'9\' && text[i] >= \'0\')) {new_text = new_text + text[i];}\n		else {\n			if (text[i] == \'(\') {s.push(text[i]);}\n			else if (text[i] == \')\') {\n				while (s.top() != \'(\') {new_text = new_text + s.top();s.pop();}\n				s.pop();}\n			else if (text[i] == \'*\') {s.push(text[i]);}\n			else if (text[i] == \'|\') {\n				if (s.empty()) {s.push(text[i]);}\n				else {\n					while (!s.empty()) {\n						if (s.top() == \'*\') {new_text = new_text + s.top();s.pop();}\n						else if (s.top() == \'|\') {new_text = new_text + s.top();s.pop();}\n						else {break;}\n					}\n					s.push(text[i]);}\n			}\n			else if (text[i] == \'+\') {\n				if (s.empty()) {s.push(text[i]);}\n				else {\n					while(!s.empty()){\n						if (s.top() == \'*\') {new_text = new_text + s.top();s.pop();}\nelse if (s.top() == \'+\') {new_text = new_text + s.top();s.pop();}\n						else if (s.top() == \'|\') {new_text = new_text + s.top();s.pop();}\n						else {break;}}\n					s.push(text[i]);}}}}\n	while(!s.empty()) {new_text += s.top();s.pop();}\n	return new_text;}\n\n~~~\n- 构架图结构：\n算法：\n    - 定义一个栈用来储存图结构，从左向右扫描后缀表达式\n    如果遇到的是字母或数字，构建一个如下状态的图：一条边两个状态\n ![1111](https://img-blog.csdnimg.cn/20201124164429544.png#pic_center)\n\n压入栈中\n       如果遇到运算符分三种情“*、|、+”\n遇到“*”，栈顶元素出栈\n![1111111](https://img-blog.csdnimg.cn/20201124164503754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n遇到“+”\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201124164530863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n遇到“|”\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201124164555594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n- 核心算法：\n\n~~~c\ngetNFA(string text) {\n	stack<grup> s;\n	for (int i = 0; i < int(text.length()); i++) {\n		if ((text[i] <= \'z\' && text[i] >= \'a\') || (text[i] <= \'Z\' && text[i] >= \'A\')||(text[i] <= \'9\' && text[i] >= \'0\')) {\n			grup tempG;\n			edge tempE;\n			tempE.accept = text[i];\n			tempE.start = 0;\n			tempE.end = 1;\n			tempG.edges.push_back(tempE);\n			s.push(tempG);\n		}\n		else {\n			if (text[i] == \'+\') {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG1 = s.top();\n				s.pop();\n				//图和图合成\n				grup tempG = tempG1;\n				tempG.stateCount = tempG1.stateCount + tempG2.stateCount-1;\n				tempG.StartState = 0;\n				tempG.EndState = tempG.stateCount - 1;\n				//获取后一条边\n				for (int i = 0; i < int(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					e2.start += tempG1.stateCount-1;\n					e2.end += tempG1.stateCount-1;\n					tempG.edges.push_back(e2);\n				}\n				//合成图压栈\n				s.push(tempG);\n			}\n			else if (text[i] == \'*\') {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG;\n				if (tempG2.StartState!=tempG2.EndState) {\n					tempG.stateCount = tempG2.stateCount + 1;\n				}\n				else {\n					tempG.stateCount = tempG2.stateCount + 2;\n				}\n				tempG.EndState = tempG.stateCount-1;\n				//图内的边编号加1\n				for (int i = 0; i < int(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					if (e2.end==tempG2.EndState) {\n						e2.start += 1;\n						e2.end = e2.start;\n					}\n					else {\n						e2.start += 1;\n						e2.end += 1;\n					}\n					tempG.edges.push_back(e2);\n				}\n				//添加两条边\n				edge e1;\n				e1.accept = \'~\';\n				e1.start = 0;\n				e1.end = 1;\n				edge e2;\n				e2.accept = \'~\';\n				e2.start = tempG.EndState-1;\n				e2.end = e2.start + 1;\n				tempG.edges.push_back(e1);\n				tempG.edges.push_back(e2);\n				//合成图压栈\n				s.push(tempG);\n			}\n			else if (text[i] == \'|\') {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG1 = s.top();\n				s.pop();\n				grup tempG;\n				tempG.StartState = 0;\n				tempG.EndState = 0;\n				tempG.stateCount = tempG1.stateCount + tempG2.stateCount-3;\n				for (int i = 0; i < int(tempG1.edges.size());i++) {\n					edge e1 = tempG1.edges[i];\n					if (e1.end == tempG1.EndState) {\n						e1.end = 0;\n					}\n					tempG.edges.push_back(e1);\n				}\n				for (int i = 0; i < int(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					if (e2.end == tempG2.EndState) {\n						e2.end = 0;\n					}\n					tempG.edges.push_back(e2);\n				}\n				//合成图压栈\n				s.push(tempG);\n			}\n		}\n	}\n	return s.top();\n}\n~~~\n- 输出图结构：\n输出时按照格式输出，构建好的图状态为0到n，把0输出为X最后一个输出为Y中间状态减一就可以了\n\n\n\n\n### 完整代码：\n\n```c\n#include<iostream>\n#include<fstream>\n#include<stack>\n#include<vector>\n#include<string>\n#define MAX 100\nusing namespace std;\n\n//NFA边\nstruct edge{\n	int start;\n	int end;\n	char accept;\n};\n\n//NFA单元，一个大的NFA单元可以是由很多小单元通过规则拼接起来\nclass grup\n{\npublic:\n	vector<edge> edges;  //这个NFA拥有的边\n	int stateCount; //状态数\n	int StartState;  //开始状态\n	int EndState;  //结束状态\npublic:\n	grup() {\n		this->stateCount = 2;\n		this->StartState = 0;\n		this->EndState = 1;\n	}\n};\n\nclass WordAnstary {\nprivate :\n	string input_file = \"testfile.txt\";\n	string output_file = \"output.txt\";\npublic:\n	//主函数\n	int start();\n	//整理字符串\n	string clear_text(string text);\n	//中缀表达式转后缀表达式 \n	string change_text(string text);\n	//根据正规式获得NFA\n	grup getNFA(string text);\n	//输出结果\n	void printNFA(grup out);\n};\n//主函数\nint WordAnstary::start() {\n	//文件操作工具\n	ifstream read_file;\n	//读取文件\n	string text;\n	//read_file.open(input_file);\n	//read_file >> text;\n	cin >> text;\n	//cout << text;\n	//分析正规式，得到有穷自动机\n	//cout << \"原表达式为：\" << text << endl;\n	string new_text = this->clear_text(text);\n	if (new_text != \"\") {\n		cout << \"添加+的表达式：\"<<new_text << endl;\n		new_text = this->change_text(new_text);\n		cout << \"后缀表达式：\"<<new_text << endl;\n		grup out = this->getNFA(new_text);\n		this->printNFA(out);\n	}\n	else {\n		cout << \"输入不合法\" << endl;\n	}\n	read_file.close();\n	return 0;\n};\n\nvoid WordAnstary::printNFA(grup out) {\n	cout << \"X \";\n	for (int j = 0; j < int(out.edges.size()); j++) {\n		edge eX = out.edges[j];\n		if (eX.start == 0) {\n			cout << \"X-\" << eX.accept << \"->\";\n			if (eX.end==out.stateCount-1) {\n				cout << \"Y \";\n			}\n			else {\n				cout << eX.end - 1<<\" \";\n			}\n		}\n	}\n	cout << endl;\n	cout << \"Y \";\n	for (int j = 0; j < int(out.edges.size()); j++) {\n		edge eX = out.edges[j];\n		if (eX.start == out.stateCount - 1) {\n			cout << \"Y-\" << eX.accept << \"->\";\n			if (eX.end == out.stateCount - 1) {\n				cout << \"Y \";\n			}\n			else {\n				cout << eX.end - 1<<\" \";\n			}\n		}\n	}\n	cout << endl;\n	for (int i = 1; i < out.stateCount - 1; i++) {\n		cout << i - 1 << \" \";\n		for (int j = 0; j < int(out.edges.size()); j++) {\n			edge e = out.edges[j];\n			if (e.start == i&&e.accept==\'~\') {\n				cout << e.start - 1 << \"-\" << e.accept << \"->\";\n				if (e.end == out.stateCount - 1) {\n					cout << \"Y \";\n				}\n				else {\n					cout << e.end - 1 << \" \";\n				}\n			}\n		}\n		for (int j = 0; j < int(out.edges.size()); j++) {\n			edge e = out.edges[j];\n			if (e.start == i&&e.accept!=\'~\') {\n				cout << e.start - 1 << \"-\" << e.accept << \"->\";\n				if (e.end == out.stateCount - 1) {\n					cout << \"Y \";\n				}\n				else {\n					cout << e.end - 1<<\" \";\n				}\n			}\n		}\n		cout << endl;\n	}\n}\n\ngrup WordAnstary::getNFA(string text) {\n	stack<grup> s;\n	for (int i = 0; i < int(text.length()); i++) {\n		if ((text[i] <= \'z\' && text[i] >= \'a\') || (text[i] <= \'Z\' && text[i] >= \'A\')||(text[i] <= \'9\' && text[i] >= \'0\')) {\n			grup tempG;\n			edge tempE;\n			tempE.accept = text[i];\n			tempE.start = 0;\n			tempE.end = 1;\n			tempG.edges.push_back(tempE);\n			s.push(tempG);\n		}\n		else {\n			if (text[i] == \'+\') {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG1 = s.top();\n				s.pop();\n				//图和图合成\n				grup tempG = tempG1;\n				tempG.stateCount = tempG1.stateCount + tempG2.stateCount-1;\n				tempG.StartState = 0;\n				tempG.EndState = tempG.stateCount - 1;\n				//获取后一条边\n				for (int i = 0; i < int(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					e2.start += tempG1.stateCount-1;\n					e2.end += tempG1.stateCount-1;\n					tempG.edges.push_back(e2);\n				}\n				//合成图压栈\n				s.push(tempG);\n			}\n			else if (text[i] == \'*\') {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG;\n				if (tempG2.StartState!=tempG2.EndState) {\n					tempG.stateCount = tempG2.stateCount + 1;\n				}\n				else {\n					tempG.stateCount = tempG2.stateCount + 2;\n				}\n				tempG.EndState = tempG.stateCount-1;\n				//图内的边编号加1\n				for (int i = 0; i < int(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					if (e2.end==tempG2.EndState) {\n						e2.start += 1;\n						e2.end = e2.start;\n					}\n					else {\n						e2.start += 1;\n						e2.end += 1;\n					}\n					tempG.edges.push_back(e2);\n				}\n				//添加两条边\n				edge e1;\n				e1.accept = \'~\';\n				e1.start = 0;\n				e1.end = 1;\n				edge e2;\n				e2.accept = \'~\';\n				e2.start = tempG.EndState-1;\n				e2.end = e2.start + 1;\n				tempG.edges.push_back(e1);\n				tempG.edges.push_back(e2);\n				//合成图压栈\n				s.push(tempG);\n			}\n			else if (text[i] == \'|\') {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG1 = s.top();\n				s.pop();\n				grup tempG;\n				tempG.StartState = 0;\n				tempG.EndState = 0;\n				tempG.stateCount = tempG1.stateCount + tempG2.stateCount-3;\n				for (int i = 0; i < int(tempG1.edges.size());i++) {\n					edge e1 = tempG1.edges[i];\n					if (e1.end == tempG1.EndState) {\n						e1.end = 0;\n					}\n					tempG.edges.push_back(e1);\n				}\n				for (int i = 0; i < int(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					if (e2.end == tempG2.EndState) {\n						e2.end = 0;\n					}\n					tempG.edges.push_back(e2);\n				}\n				//合成图压栈\n				s.push(tempG);\n			}\n		}\n	}\n	return s.top();\n}\n\nstring WordAnstary::clear_text(string text) {\n	//储存添加好+号的正规式\n	string new_text = \"\";\n	//分析栈用来分析()匹配\n	stack<char> s;\n	for (int i = 0; i < int(text.length()); i++) {\n		if ((text[i] <= \'z\' && text[i] >= \'a\') || (text[i] <= \'Z\' && text[i] >= \'A\') || (text[i] <= \'9\' && text[i] >= \'0\')) {\n			new_text = new_text + text[i];\n			if (i < int(text.length()) - 1) {\n				if ((text[i + 1] <= \'z\' && text[i+1] >= \'a\') || (text[i + 1] <= \'Z\' && text[i + 1] >= \'A\') || (text[i+1] <= \'9\' && text[i+1] >= \'0\')) {\n					new_text = new_text + \'+\';\n				}\n				else if (text[i + 1] == \'(\') {\n					new_text = new_text + \'+\';\n				}\n			}\n		}\n		else if (text[i] == \'|\') {\n			new_text = new_text + text[i];\n			continue;\n		}\n		else if (text[i] == \'*\') {\n			new_text = new_text + text[i];\n			if (i < int(text.length()) - 1) {\n				if ((text[i + 1] <= \'z\' && text[i+1] >= \'a\') || (text[i + 1] <= \'Z\' && text[i + 1] >= \'A\') || (text[i] <= \'9\' && text[i] >= \'0\'))\n					new_text = new_text + \'+\';\n				else if (text[i + 1] == \'(\')\n					new_text = new_text + \'+\';\n			}\n		}\n		else if (text[i] == \'(\') {\n			new_text = new_text + text[i];\n			s.push(text[i]);\n		}\n		else if (text[i] == \')\') {\n			new_text = new_text + text[i];\n			if (i < int(text.length()) - 1) {\n				if ((text[i + 1] <= \'z\' && text[i+1] >= \'a\') || (text[i + 1] <= \'Z\' && text[i + 1] >= \'A\') || (text[i] <= \'9\' && text[i] >= \'0\'))\n					new_text = new_text + \'+\';\n				else if (text[i + 1] == \'(\')\n					new_text = new_text + \'+\';\n			}\n			if (s.empty()) {\n				return \"\";\n			}\n			else {\n				s.pop();\n			}\n		}\n		else\n			return \"\";\n	}\n	if (s.empty())\n		return new_text;\n	else\n		return \"\";\n}\n\nstring WordAnstary::change_text(string text) {\n	stack<char> s;\n	string new_text = \"\";\n	for (int i = 0; i<int(text.length()); i++) {\n		if ((text[i] <= \'z\' && text[i] >= \'a\') || (text[i] <= \'Z\' && text[i] >= \'A\') || (text[i] <= \'9\' && text[i] >= \'0\')) {\n			new_text = new_text + text[i];\n		}\n		else {\n			if (text[i] == \'(\') {\n				s.push(text[i]);\n			}\n			else if (text[i] == \')\') {\n				while (s.top() != \'(\') {\n					new_text = new_text + s.top();\n					s.pop();\n				}\n				s.pop();\n			}\n			else if (text[i] == \'*\') {\n				s.push(text[i]);\n			}\n			else if (text[i] == \'|\') {\n				if (s.empty()) {\n					s.push(text[i]);\n				}\n				else {\n					while (!s.empty()) {\n						if (s.top() == \'*\') {\n							new_text = new_text + s.top();\n							s.pop();\n						}\n						else if (s.top() == \'|\') {\n							new_text = new_text + s.top();\n							s.pop();\n						}\n						else {\n							break;\n						}\n					}\n					s.push(text[i]);\n				}\n			}\n			else if (text[i] == \'+\') {\n				if (s.empty()) {\n					s.push(text[i]);\n				}\n				else {\n					while(!s.empty()){\n						if (s.top() == \'*\') {\n							new_text = new_text + s.top();\n							s.pop();\n						}else if (s.top() == \'+\') {\n							new_text = new_text + s.top();\n							s.pop();\n						}\n						else if (s.top() == \'|\') {\n							new_text = new_text + s.top();\n							s.pop();\n						}\n						else {\n							break;\n						}\n					}\n					s.push(text[i]);\n				}\n			}\n		}\n	}\n	while(!s.empty()) {\n		new_text += s.top();\n		s.pop();\n	}\n	return new_text;\n}\n\n\n//int main() {\n//	WordAnstary wordAustary;\n//	wordAustary.start();\n//}```\n',2,'123456',0);

/*Table structure for table `lan_blogs_temp` */

DROP TABLE IF EXISTS `lan_blogs_temp`;

CREATE TABLE `lan_blogs_temp` (
  `id` int(20) NOT NULL AUTO_INCREMENT COMMENT '唯一标识符',
  `blogs_author_id` int(10) NOT NULL COMMENT '作者ID',
  `blogs_create_data` datetime NOT NULL COMMENT '创建时间',
  `blogs_title` text NOT NULL COMMENT '文章标题',
  `blogs_summary` varchar(200) DEFAULT NULL COMMENT '文章摘要',
  `blogs_cover` text COMMENT '文章封面',
  `blogs_html` longtext COMMENT '编译好的html',
  `blogs_content` longtext COMMENT '文章内容',
  `blogs_column` int(4) DEFAULT NULL COMMENT '文章分类',
  `blogs_password` varchar(40) NOT NULL COMMENT '文章密码',
  `blogs_status` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '文章状态(0是草稿1是投稿2是审核不通过)',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=utf8;

/*Data for the table `lan_blogs_temp` */

insert  into `lan_blogs_temp`(`id`,`blogs_author_id`,`blogs_create_data`,`blogs_title`,`blogs_summary`,`blogs_cover`,`blogs_html`,`blogs_content`,`blogs_column`,`blogs_password`,`blogs_status`) values (2,1,'2020-09-12 15:46:34','why 108lan ?','网站简介','http://108lan.com:8001/images/2020/09/12/3321a107681a465482ad336824194317.png','<p><img src=\"http://108lan.com:8001/images/2020/09/12/3321a107681a465482ad336824194317.png\" alt=\"108lanlogo.png\" /></p>\n<p><h3>目录</h3><ul><li><a href=\"#_5\">想法</a></li><li><a href=\"#_71\">组成</a></li><li><a href=\"#_97\">管理</a></li></ul></p>\n<h1><a id=\"_5\"></a>想法</h1>\n<p>为什么会想起来搭建这个网站呢？</p>\n<p>原因很简单：作为一个未来将要改变世界的男人，怎么能没有一个自己的个人博客网站呢。</p>\n<p>于是我就开始了我的搭建个人博客网站学习</p>\n<p>一开始也就是网上找找教程，看一看，学一学，但是感觉差点什么，找到的博客网站，要么很好看，但是很泛滥，要么就是很难看的模板。</p>\n<p>怎么办呢？</p>\n<p><img src=\"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1025202481,2312544487&amp;fm=26&amp;gp=0.jpg\" alt=\"11\" /></p>\n<p><strong>自己写一个吧</strong></p>\n<p>这个小小的想法就是这么简单，然后花了点时间，学习了一下技术，就开启了我的搭建个人网站的进程！</p>\n<p>搭着搭着，就觉得个人博客。。。。</p>\n<p>嗯。。。，有点太简单了，没意思</p>\n<p>怎么办呢，换个有意思的呗。</p>\n<p>正好那几天，也不知道是怎么了，对垃圾游戏、土味视频、标题党文章产生了一种非非非非非非非非非常厌恶的感觉。</p>\n<p>你知道的每个男人每个月总有那么几天，对各种小事都很敏感。</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1599907696645&amp;di=5dcfcbd812331676d4e0a3c406739793&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F19%2F20180819210134_jbnmr.thumb.700_0.jpeg\" alt=\"2\" /></p>\n<p><strong>所以我要建立一圈栅栏，把我围起来</strong></p>\n<p>对，就是一圈栅栏，把这个世界的无用信息阻挡在外。</p>\n<p>我想和这个世界的有趣的灵魂对话，而不是公知；</p>\n<p>我想听到独到的见解想法，而不是先入为主的引导；</p>\n<p>我想浏览用心的创作，而不是明显效应带来的无聊作品；</p>\n<p>我想知道一件事情从产生到发展到结束的所以流程，而不是只言片语；</p>\n<p>我想尽可能的关注到个个方面，而不是根据你喜欢推荐。</p>\n<p>这个就是我建立现在你正在浏览的网站的初衷。</p>\n<p>文字：你好啊</p>\n<p>图片：</p>\n<p><img src=\"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3604141556,397355164&amp;fm=26&amp;gp=0.jpg\" alt=\"3\" /></p>\n<p>视频：</p>\n<iframe src=\"//player.bilibili.com/player.html?aid=371100608&bvid=BV1SZ4y1H7RD&cid=202789161&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"800px\" height=\"600px\"> </iframe>\n<p>声音：</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=423015580&auto=0&height=66\"></iframe>\n<p>这些该是我们传递信息，论述道理，表达想法的媒介，每一种都有着自己的好处，每一个都能独立的构造，结合起来有时候也有意想不到的效果。</p>\n<h1><a id=\"_71\"></a>组成</h1>\n<p>所以我构建了这个《108lan》网站</p>\n<p>正如其名，网站由108个专栏构成，这108个专栏，有着108个使命</p>\n<p>网站用户可以分为三类：</p>\n<ul>\n<li>读者</li>\n<li>作者</li>\n<li>管理者</li>\n</ul>\n<p>身份是层层递进的</p>\n<p>就是说：你想浏览这个网站，你要先注册成为读者</p>\n<p>突然，你有了灵感，想表达一些想法、才能、观点、作品，你可以在个人中心注册成为作者，写下你的东西。投稿给这个方面的专栏。</p>\n<p>有一天，你发现，你想写的东西不属于已经存在的专栏中的任何一个，那么你可以个人中心查看申请条件申请成为一个管理者，开设一个专栏</p>\n<p>当然，专栏是有限的，我的设定是108个，我觉得108个可以涵盖所有的方面。每个专栏的领域界限不一定要非常的清晰。</p>\n<p>这108个专栏，也不是不可替代，如果你觉得不好，取而代之即可，当然，不能随心所欲的代替，你一定要比现有的管理者强才可以。</p>\n<p>通过管理者审核的作品将在首页显示，被所有读者所看到。</p>\n<h1><a id=\"_97\"></a>管理</h1>\n<p>目前网站属于初始阶段，可以说是啥都没有</p>\n<p>如果你有技术，欢迎加入开发；<br />\n如果你有想法，欢迎加入投稿；<br />\n如果你有见解，欢迎加入管理。</p>\n<p>如果你想和我取得联系：请发邮件到(persistenthuang@163.com)<br />\n我会在每天晚上查收，并回复。</p>\n','![108lanlogo.png](http://108lan.com:8001/images/2020/09/12/3321a107681a465482ad336824194317.png)\n\n\n@[toc](目录)\n\n# 想法\n\n为什么会想起来搭建这个网站呢？ \n\n原因很简单：作为一个未来将要改变世界的男人，怎么能没有一个自己的个人博客网站呢。\n\n于是我就开始了我的搭建个人博客网站学习\n\n一开始也就是网上找找教程，看一看，学一学，但是感觉差点什么，找到的博客网站，要么很好看，但是很泛滥，要么就是很难看的模板。\n\n怎么办呢？ \n\n![11](https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1025202481,2312544487&fm=26&gp=0.jpg)\n\n\n**自己写一个吧**\n\n这个小小的想法就是这么简单，然后花了点时间，学习了一下技术，就开启了我的搭建个人网站的进程！\n\n搭着搭着，就觉得个人博客。。。。\n\n嗯。。。，有点太简单了，没意思\n\n怎么办呢，换个有意思的呗。\n\n正好那几天，也不知道是怎么了，对垃圾游戏、土味视频、标题党文章产生了一种非非非非非非非非非常厌恶的感觉。\n\n你知道的每个男人每个月总有那么几天，对各种小事都很敏感。\n\n\n![2](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1599907696645&di=5dcfcbd812331676d4e0a3c406739793&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201808%2F19%2F20180819210134_jbnmr.thumb.700_0.jpeg)\n\n\n**所以我要建立一圈栅栏，把我围起来**\n\n对，就是一圈栅栏，把这个世界的无用信息阻挡在外。\n\n我想和这个世界的有趣的灵魂对话，而不是公知；\n\n我想听到独到的见解想法，而不是先入为主的引导；\n\n我想浏览用心的创作，而不是明显效应带来的无聊作品；\n\n我想知道一件事情从产生到发展到结束的所以流程，而不是只言片语；\n\n我想尽可能的关注到个个方面，而不是根据你喜欢推荐。\n\n这个就是我建立现在你正在浏览的网站的初衷。\n\n文字：你好啊\n\n图片：\n\n![3](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3604141556,397355164&fm=26&gp=0.jpg)\n\n视频：\n\n<iframe src=\"//player.bilibili.com/player.html?aid=371100608&bvid=BV1SZ4y1H7RD&cid=202789161&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"800px\" height=\"600px\"> </iframe>\n\n声音：\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=423015580&auto=0&height=66\"></iframe>\n\n\n这些该是我们传递信息，论述道理，表达想法的媒介，每一种都有着自己的好处，每一个都能独立的构造，结合起来有时候也有意想不到的效果。\n\n# 组成\n\n所以我构建了这个《108lan》网站\n\n正如其名，网站由108个专栏构成，这108个专栏，有着108个使命\n\n网站用户可以分为三类：\n- 读者\n- 作者\n- 管理者\n\n身份是层层递进的\n\n就是说：你想浏览这个网站，你要先注册成为读者\n\n突然，你有了灵感，想表达一些想法、才能、观点、作品，你可以在个人中心注册成为作者，写下你的东西。投稿给这个方面的专栏。\n\n有一天，你发现，你想写的东西不属于已经存在的专栏中的任何一个，那么你可以个人中心查看申请条件申请成为一个管理者，开设一个专栏\n\n当然，专栏是有限的，我的设定是108个，我觉得108个可以涵盖所有的方面。每个专栏的领域界限不一定要非常的清晰。\n\n这108个专栏，也不是不可替代，如果你觉得不好，取而代之即可，当然，不能随心所欲的代替，你一定要比现有的管理者强才可以。\n\n通过管理者审核的作品将在首页显示，被所有读者所看到。\n\n\n# 管理\n\n目前网站属于初始阶段，可以说是啥都没有\n\n如果你有技术，欢迎加入开发；\n如果你有想法，欢迎加入投稿；\n如果你有见解，欢迎加入管理。\n\n如果你想和我取得联系：请发邮件到(persistenthuang@163.com)\n我会在每天晚上查收，并回复。\n',1,'123456',2),(8,1,'2020-09-18 08:23:06','108lan网站详细构建','网站详细架构过程','http://108lan.com:8001/images/2020/09/12/3321a107681a465482ad336824194317.png','<p><h3>目录</h3><ul><li><a href=\"#_1\">前言</a></li><li><a href=\"#_4\">拓扑</a></li><ul><li><a href=\"#def1_5\">def（定义）1</a></li></ul><li><a href=\"#_17\">点与点集</a></li><ul><li><a href=\"#def2_18\">def2</a></li><li><a href=\"#def3_29\">def3</a></li><li><a href=\"#def4_32\">def4</a></li><li><a href=\"#def5_37\">def5</a></li></ul><li><a href=\"#_40\">几种常见的拓扑空间</a></li><ul><li><a href=\"#_41\">距离空间</a></li><li><a href=\"#_45\">平庸拓扑空间</a></li><li><a href=\"#_47\">离散拓扑空间</a></li><li><a href=\"#_50\">余有限拓扑空间</a></li><li><a href=\"#_52\">余可数拓扑空间</a></li><li><a href=\"#_54\">余零度集空间</a></li></ul></ul></p>\n<h1><a id=\"_1\"></a>前言</h1>\n<p>选择点集拓扑的原因是我前几天从书架上随意抽了几本书，而点集拓扑是其中看起来最容易的。按照我个人的想法，点集拓扑作为一门连接数学分析和几何拓扑学（虽然我还没学）的桥梁学科，其内容是相对抽象的而繁琐的，由点类理论到空间类理论，对于只学过数分的同学（就是我）来说，无疑是打开了新世界的大门，从更高的层面来给出定义，而非仅局限于欧式空间。<br />\n废话不多说，let’s go!</p>\n<h1><a id=\"_4\"></a>拓扑</h1>\n<h2><a id=\"def1_5\"></a>def（定义）1</h2>\n<p>如果非空集合X的子集族ζ={U<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span>X|U具有性质*}满足：<br />\n(1)<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ϕ</span></span></span></span>，X<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ<br />\n(2)<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">U_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">U_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ蕴含着<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">U_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">U_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ<br />\n(3)<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mi>α</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ蕴含<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋃</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcup</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋃</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mi>α</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi><mo>∈</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha\\in T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.0037em;\">α</span><span class=\"mrel\">∈</span><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">T</span></span></span></span>,T为指标集。<br />\n则称ζ为X上的一个<strong>拓扑</strong>，偶对（X,ζ）称为X上的一个<strong>拓扑空间</strong><br />\n称<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ为拓扑空间中的<strong>开集</strong><br />\n若<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>F</mi><mi>c</mi></msup></mrow><annotation encoding=\"application/x-tex\">F^c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">c</span></span></span></span></span></span></span></span></span></span></span>=X\\F<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ,则称F为该拓扑空间上的<strong>闭集</strong></p>\n<p>由（2）（3）看出可数个开集的交仍属于原拓扑，任意个开集的并也属于原拓扑。容易发现拓扑即为子集族，而拓扑空间则是全集与子集族的偶对（X,ζ）。用开集来定义拓扑空间是一件很自然的事情，如果要寻找一个有足够良好性质的空间来进行研究，肯定是要有空间的子集来满足开集的性质。当然，也可以用闭集族、闭包、邻域系（这两个定义在下面）来定义拓扑，其等价性证明在很多书上都可以找到，此处不作赘述。</p>\n<h1><a id=\"_17\"></a>点与点集</h1>\n<h2><a id=\"def2_18\"></a>def2</h2>\n<p>设A<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span>X,x<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>X,(X为全空间)，如果对x的任何开邻域（含x的开集）U必有</p>\n<div class=\"hljs-center\">\n<p>U<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span>(A-{x})=(U-{X})<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span>A<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>≠</mo></mrow><annotation encoding=\"application/x-tex\">\\neq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.716em;\"></span><span class=\"strut bottom\" style=\"height:0.9309999999999999em;vertical-align:-0.215em;\"></span><span class=\"base\"><span class=\"mrel\">≠</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ϕ</span></span></span></span></p>\n</div>\n<p>(即U中含A中任意异于x的点y),则称x为A的<strong>聚点</strong>，记A的聚点的全体为A’,称为<strong>导集</strong>，而<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mi>A</mi><mo>¯</mo></mover><mo>=</mo><msup><mi>A</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\bar A=A&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8201099999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8201099999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8201099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathit\">A</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"margin-left:0.27778em;\"><span>¯</span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span></span></span></span>,即为<strong>闭包</strong>。<br />\n若<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mi>A</mi><mo>¯</mo></mover><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">\\bar A=</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8201099999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8201099999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8201099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathit\">A</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"margin-left:0.27778em;\"><span>¯</span></span></span></span></span></span></span><span class=\"mrel\">=</span></span></span></span>A$，称A为X中的<strong>稠密集</strong>。</p>\n<h2><a id=\"def3_29\"></a>def3</h2>\n<p>称<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>N</mi><mi>x</mi><mi mathvariant=\"normal\">.</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">N_x^.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.93033em;vertical-align:-0.247em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.436892em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">x</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">.</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"></span></span></span></span></span></span></span></span>={U|U为x的开邻域}为点x<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>X的<strong>开邻域系</strong>。</p>\n<h2><a id=\"def4_32\"></a>def4</h2>\n<p>称<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>N</mi><mi>x</mi></msub></mrow><annotation encoding=\"application/x-tex\">N_x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>={V|<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"normal\">∃</mi></mrow></mrow><annotation encoding=\"application/x-tex\">{\\exists}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">∃</span></span></span></span></span>x的开邻域U,s.t.x<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>U<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span>V}为点x<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>X的<strong>邻域系</strong>。</p>\n<p>注意def4这中定义方式，用较小的集合来引出较大集合，实则是覆盖关系，将会在后面的笔记中多次接触。</p>\n<h2><a id=\"def5_37\"></a>def5</h2>\n<p>设（X,ζ）称为X上的一个拓扑空间，Y<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span>X为非空子集，记<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ζ</mi><mi>Y</mi></msub></mrow><annotation encoding=\"application/x-tex\">ζ_Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>={Y<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span>U|U<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ}为Y的子集族，可以证明<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ζ</mi><mi>Y</mi></msub></mrow><annotation encoding=\"application/x-tex\">ζ_Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>是Y上的一个拓扑，称为由<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ζ</mi></mrow><annotation encoding=\"application/x-tex\">ζ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span></span></span></span>诱导的<strong>拓扑</strong>或者<strong>子拓扑</strong>，（Y,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ζ</mi><mi>Y</mi></msub></mrow><annotation encoding=\"application/x-tex\">ζ_Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>）为（X,ζ）的<strong>诱导拓扑空间</strong>或者<strong>子拓扑空间</strong>。</p>\n<h1><a id=\"_40\"></a>几种常见的拓扑空间</h1>\n<h2><a id=\"_41\"></a>距离空间</h2>\n<p>我们熟悉的欧几里得空间则是一种特殊的距离空间。<br />\n此处定义的距离（度量）即为满足正定性，对称性，三角不等式的映射<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ρ</span></span></span></span>,称偶对（X,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ρ</span></span></span></span>）为X上的度量空间，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ρ</span></span></span></span>（x,y）为x,y间的距离。<br />\n称X是子集B(a;<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>)={x<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>X|<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ρ</span></span></span></span>(x,a)&lt;<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>}为以a为中心，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>为半径的开球，容易验证X的子集族为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ζ</mi><mi>ρ</mi></msub></mrow><annotation encoding=\"application/x-tex\">ζ_\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">ρ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span></span></span></span>={U|<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∀</mi></mrow><annotation encoding=\"application/x-tex\">\\forall</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathrm\">∀</span></span></span></span>a<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>U,存在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>δ</mi><mi>α</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\delta_\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>&gt;0，s.t.开球B(a;<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>δ</mi><mi>α</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\delta_\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>)<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span>U}为X上的一个拓扑，称为由<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ρ</span></span></span></span>诱导的拓扑。</p>\n<h2><a id=\"_45\"></a>平庸拓扑空间</h2>\n<p>设X为非空集合，ζ_平庸={<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ϕ</span></span></span></span>，X}为X上的拓扑，{X，ζ_平庸}为平庸拓扑空间。</p>\n<h2><a id=\"_47\"></a>离散拓扑空间</h2>\n<p>ζ_离散={U|U<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span>X},记作<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mi>X</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8413309999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span></span></span></span></span></span></span></span>,为X上的一个拓扑，称为离散拓扑，而{X，ζ_离散}为离散拓扑空间。<br />\n接下来的三种拓扑空间为举反例时经常要使用的拓扑空间，较为重要。</p>\n<h2><a id=\"_50\"></a>余有限拓扑空间</h2>\n<p>ζ_余有限={U|U=X\\C,C是X中有限子集}<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ϕ</span></span></span></span>为X上的一个拓扑，称为余有限拓扑，而{X，ζ_余有限}为余有限拓扑空间。</p>\n<h2><a id=\"_52\"></a>余可数拓扑空间</h2>\n<p>ζ_余可数={U|U=X\\C,C是X中可数子集}<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ϕ</span></span></span></span>为X上的一个拓扑，称为余可数拓扑，而{X，ζ_余可数}为余可数拓扑空间。</p>\n<h2><a id=\"_54\"></a>余零度集空间</h2>\n<p>N为自然数集，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ζ</mi><mi>N</mi></msub></mrow><annotation encoding=\"application/x-tex\">ζ_N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>=<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ϕ</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span>{U|U=N\\C},C满足<img src=\"http://108lan.com:8001/images/2020/09/20/fec0c9ed7eac42b08342c2b77cd4c946.png\" alt=\"``XD6UCTIVWL9681.png\" /><br />\n（称C为零密度集，#表示取集合中的个数）<br />\n为X上的一个拓扑。</p>\n','  @[toc](目录)\n# 前言\n选择点集拓扑的原因是我前几天从书架上随意抽了几本书，而点集拓扑是其中看起来最容易的。按照我个人的想法，点集拓扑作为一门连接数学分析和几何拓扑学（虽然我还没学）的桥梁学科，其内容是相对抽象的而繁琐的，由点类理论到空间类理论，对于只学过数分的同学（就是我）来说，无疑是打开了新世界的大门，从更高的层面来给出定义，而非仅局限于欧式空间。\n  废话不多说，let\'s go!\n# 拓扑\n## def（定义）1\n  如果非空集合X的子集族ζ={U$\\subset$X|U具有性质*}满足：\n  (1)$\\phi$，X$\\in$ζ\n   (2)$U_1$,$U_2$$\\in$ζ蕴含着$U_1$$\\bigcap$$U_2$$\\in$ζ\n   (3)$U_\\alpha$$\\in$ζ蕴含$\\bigcup$$U_\\alpha$$\\in$ζ,$\\alpha\\in T$,T为指标集。\n则称ζ为X上的一个**拓扑**，偶对（X,ζ）称为X上的一个**拓扑空间**\n称$U$$\\in$ζ为拓扑空间中的**开集**\n若$F^c$=X\\F$\\in$ζ,则称F为该拓扑空间上的**闭集**\n  \n由（2）（3）看出可数个开集的交仍属于原拓扑，任意个开集的并也属于原拓扑。容易发现拓扑即为子集族，而拓扑空间则是全集与子集族的偶对（X,ζ）。用开集来定义拓扑空间是一件很自然的事情，如果要寻找一个有足够良好性质的空间来进行研究，肯定是要有空间的子集来满足开集的性质。当然，也可以用闭集族、闭包、邻域系（这两个定义在下面）来定义拓扑，其等价性证明在很多书上都可以找到，此处不作赘述。\n\n\n# 点与点集\n## def2\n设A$\\subset$X,x$\\in$X,(X为全空间)，如果对x的任何开邻域（含x的开集）U必有\n::: hljs-center\n\n U$\\bigcap$(A-{x})=(U-{X})$\\bigcap$A$\\neq$$\\phi$\n\n\n:::\n(即U中含A中任意异于x的点y),则称x为A的**聚点**，记A的聚点的全体为A\',称为**导集**，而$\\bar A=A\'$$\\bigcap$$A$,即为**闭包**。\n若$\\bar A=$A$，称A为X中的**稠密集**。\n\n## def3\n称$N_x^.$={U|U为x的开邻域}为点x$\\in$X的**开邻域系**。\n\n## def4\n称$N_x$={V|${\\exists}$x的开邻域U,s.t.x$\\in$U$\\subset$V}为点x$\\in$X的**邻域系**。\n\n注意def4这中定义方式，用较小的集合来引出较大集合，实则是覆盖关系，将会在后面的笔记中多次接触。\n\n## def5\n设（X,ζ）称为X上的一个拓扑空间，Y$\\subset$X为非空子集，记\n$ζ_Y$={Y$\\bigcap$U|U$\\in$ζ}为Y的子集族，可以证明$ζ_Y$是Y上的一个拓扑，称为由$ζ$诱导的**拓扑**或者**子拓扑**，（Y,$ζ_Y$）为（X,ζ）的**诱导拓扑空间**或者**子拓扑空间**。\n# 几种常见的拓扑空间\n## 距离空间\n   我们熟悉的欧几里得空间则是一种特殊的距离空间。\n   此处定义的距离（度量）即为满足正定性，对称性，三角不等式的映射$\\rho$,称偶对（X,$\\rho$）为X上的度量空间，$\\rho$（x,y）为x,y间的距离。\n  称X是子集B(a;$\\delta$)={x$\\in$X|$\\rho$(x,a)<$\\delta$}为以a为中心，$\\delta$为半径的开球，容易验证X的子集族为$ζ_\\rho$={U|$\\forall$a$\\in$U,存在$\\delta_\\alpha$>0，s.t.开球B(a;$\\delta_\\alpha$)$\\subset$U}为X上的一个拓扑，称为由$\\rho$诱导的拓扑。\n## 平庸拓扑空间\n设X为非空集合，$ζ_平庸$={$\\phi$，X}为X上的拓扑，{X，$ζ_平庸$}为平庸拓扑空间。\n## 离散拓扑空间\n$ζ_离散$={U|U$\\subset$X},记作$2^X$,为X上的一个拓扑，称为离散拓扑，而{X，$ζ_离散$}为离散拓扑空间。\n接下来的三种拓扑空间为举反例时经常要使用的拓扑空间，较为重要。\n## 余有限拓扑空间\n$ζ_余有限$={U|U=X\\C,C是X中有限子集}$\\bigcap$$\\phi$为X上的一个拓扑，称为余有限拓扑，而{X，$ζ_余有限$}为余有限拓扑空间。\n## 余可数拓扑空间\n$ζ_余可数$={U|U=X\\C,C是X中可数子集}$\\bigcap$$\\phi$为X上的一个拓扑，称为余可数拓扑，而{X，$ζ_余可数$}为余可数拓扑空间。\n## 余零度集空间\nN为自然数集，$ζ_N$=$\\phi$$\\bigcap${U|U=N\\C},C满足![``XD6UCTIVWL9681.png](http://108lan.com:8001/images/2020/09/20/fec0c9ed7eac42b08342c2b77cd4c946.png)\n（称C为零密度集，#表示取集合中的个数）\n为X上的一个拓扑。',1,'123456',2),(9,22,'2020-09-18 15:21:54','设计模式-创建型模式（单例模式+工厂模式+建造者模式+原型模式）','设计模式','http://108lan.com:8001/images/2020/09/18/721c1a2b13be4894b000d4ae6c067776.png','<p><h3>目录</h3><ul><li><a href=\"#_2\">面向对象七大原则</a></li><li><a href=\"#_12\">创建型模式</a></li><ul><li><a href=\"#_18\">单例模式</a></li><ul><li><a href=\"#_19\">饿汉式单例</a></li><li><a href=\"#_38\">懒汉式单例</a></li><li><a href=\"#_79\">静态内部类实现单例</a></li><li><a href=\"#_100\">枚举单例</a></li></ul><li><a href=\"#Factory_113\">工厂模式(Factory)</a></li><ul><li><a href=\"#_117\">简单（静态）工厂模式</a></li><li><a href=\"#_146\">工厂方法模式</a></li></ul><li><a href=\"#_186\">抽象工厂模式</a></li><li><a href=\"#Builder_230\">建造者模式(Builder)</a></li><ul><li><a href=\"#_341\">改进建造者模式</a></li></ul><li><a href=\"#Prototyte_386\">原型模式(Prototyte)</a></li></ul></ul></p>\n<h1><a id=\"_2\"></a>面向对象七大原则</h1>\n<ul>\n<li><strong>开闭原则</strong>：对扩展开放，对修改关闭</li>\n<li><strong>里氏替换原</strong>则：继承必须确保父类所拥有的性质在子类中依然成立</li>\n<li><strong>依赖倒置原则</strong>：要面向接口编程，不要面向实现编程</li>\n<li><strong>单一职责原则</strong>：控制类的粒度大小、将对象解耦、提高其内聚性</li>\n<li><strong>接口隔离原则</strong>：要为各个类建立它们需要的专用接口</li>\n<li><strong>迪米特法则</strong>：只与你的直接朋友交谈，不跟陌生人说话</li>\n<li>** 合成复用原则**： 尽量先使用组合或者聚合等关联关系来实现，其次再考虑使用继承关系来实现</li>\n</ul>\n<h1><a id=\"_12\"></a>创建型模式</h1>\n<h2><a id=\"_18\"></a>单例模式</h2>\n<h3><a id=\"_19\"></a>饿汉式单例</h3>\n<ul>\n<li>构造器私有</li>\n<li>一开始就加载对象</li>\n<li>可能会浪费空间</li>\n</ul>\n<pre><code class=\"lang-java\">public class Hungry{\n	//一开始就加载对象\n	private finall static Hungry hungry = new Hungry();\n	\n	//构造器私有\n	private Hungry(){\n	}\n	//通过方法获取对象\n	public static Hungry getHungry(){\n		return hungry;\n	}\n}\n</code></pre>\n<h3><a id=\"_38\"></a>懒汉式单例</h3>\n<ul>\n<li>要用的时候再加载</li>\n<li>单线程可以，多线程的时候要加锁</li>\n</ul>\n<pre><code class=\"lang-java\">//懒汉式\npublic class Lazy{\n	//先定义对象，并不实例化\n	private volatile static Lazy lazy;\n	\n	//构造器私有\n	private Lazy(){\n		synchronized(Lazy.class){\n			if(lazy!=null){\n				throw RuntimeException(&quot;要试图通过反射去破坏单例&quot;)\n			}\n		}\n	}\n	\n	//通过方法获取对象：双重检测锁模式，DCL懒汉式\n	public static Lazy getLazy(){\n		if(lazy==null){\n			synchronized (Lazy.class) {\n				if(lazy==null){\n					lazy=new Lazy();	\n					/**\n					 * 不是一个原子性操作\n					 * 1. 分配内存空间\n					 * 2. 执行构造方法，初始化对象\n					 * 3. 把这个对象指向空间\n					 * 可能指令重排，所以在对象前加：volatile\n					 **/\n				}\n			}\n		}\n	\n		return lazy;\n	}\n}\n</code></pre>\n<h3><a id=\"_79\"></a>静态内部类实现单例</h3>\n<ul>\n<li>通过静态内部类实现</li>\n</ul>\n<pre><code class=\"lang-java\">public class StaSign{\n	private StaSign(){\n	}\n	public static StaSign getInstance(){\n		return InnerClass.STASIGN\n	}\n	public static class InnerClass{\n		private static finall StaSign STASIGN= new StaSign();\n	}\n}\n</code></pre>\n<ul>\n<li>上面的两种方法都可以通过java反射破解</li>\n</ul>\n<h3><a id=\"_100\"></a>枚举单例</h3>\n<ul>\n<li>枚举里面没有无参构造，只有有参构造</li>\n<li>使用枚举可以解决java反射破解</li>\n</ul>\n<pre><code class=\"lang-java\">public enum EnumSingle{\n	INSTANCE;\n	public EnumSingle getInstance(){\n		return INSTANCE;\n	}\n}\n</code></pre>\n<h2><a id=\"Factory_113\"></a>工厂模式(Factory)</h2>\n<ul>\n<li>创建对象统一管理和控制，<mark>创建者和调用者分离</mark></li>\n<li>实例化对象不使用new，用工厂方法代替</li>\n</ul>\n<h3><a id=\"_117\"></a>简单（静态）工厂模式</h3>\n<ul>\n<li>用来生产同一级结构中的任意产品</li>\n<li>增加一个新产品，如果不修改代码，做不到，不满足闭合原则</li>\n</ul>\n<pre><code class=\"lang-java\">public interface Car{\n	void getName();\n}\npublic class Car1 import Car{\n	void getName(){\n		System.out.println(&quot;car1&quot;);\n	}\n}\npublic class Car2 import Car{\n	void getName(){\n		System.out.println(&quot;car2&quot;);\n	}\n}\n//建立一个工厂\npublic class CarFactory{\n	public static Car getCar1(){\n		return new Car1();\n	}\n	public static Car getCar2(){\n		return new Car2();\n	}\n}\n</code></pre>\n<h3><a id=\"_146\"></a>工厂方法模式</h3>\n<ul>\n<li>用来生产同一级结构中的固定产品</li>\n<li>把工厂提取出一个抽象类</li>\n<li>为每一个对象创建一个工厂：变的复杂了</li>\n<li>这个新增功能的时候，就不用修改原来的代码。满足开闭原则</li>\n</ul>\n<pre><code class=\"lang-java\">public interface Car{\n	void getName();\n}\npublic class Car1 import Car{\n	@verride\n	void getName(){\n		System.out.println(&quot;car1&quot;);\n	}\n}\npublic class Car2 import Car{\n	@verride\n	void getName(){\n		System.out.println(&quot;car2&quot;);\n	}\n}\n//工厂方法模式\npublic interface CarFactory{\n	Car getCar();\n}\npublic class Car1Factory import CarFactory{\n	@Verride\n	Car getCar(){\n		return new Car1();\n	} \n}\npublic class Car2Factory import CarFactory{\n	@Verride\n	Car getCar(){\n		return new Car2();\n	} \n}\n</code></pre>\n<h2><a id=\"_186\"></a>抽象工厂模式</h2>\n<ul>\n<li>围绕一个超级工厂创建其他工厂</li>\n<li>不能增加产品，但是可以增加产品族</li>\n<li>规定了所有可能被创建的产品的集合，产品族中扩展新的产品很困难</li>\n<li>增加了系统的抽象性和理解难度</li>\n</ul>\n<pre><code class=\"lang-java\">//抽象工厂模式\n\npublic interface Car{\n	void start();\n	void run();\n	void stop();\n}\n\npublic class WuLin import Car{\n	@verride\n	void start(){\n		System.out.println(&quot;start&quot;);\n	}\n	\n	@verride\n	void run(){\n		System.out.println(&quot;run&quot;);\n	}\n	\n	@verride\n	void stop(){\n		System.out.println(&quot;stop&quot;);\n	}\n}\n\npublic interface CarFactory{\n	public CarFactory getCarFactory();\n}\n\npublic class WuLinFactory import CarFactory{\n	@Verride\n	public CarFactory getWuLinCar(){\n		return new WuLin();\n	}\n}\n</code></pre>\n<h2><a id=\"Builder_230\"></a>建造者模式(Builder)</h2>\n<ul>\n<li>建造者模式也属于创建模式，它提供一种创建对象的最佳方式</li>\n<li>定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</li>\n<li>作用：在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象</li>\n<li>用户只需要给出指定对象的类型和内容，建造者模式负责顺序创建复杂对象（把内部的建造过程和细节隐藏起来）</li>\n</ul>\n<p><mark>产品</mark>：</p>\n<pre><code class=\"lang-java\">public class Protect {\n    String A;\n    String B;\n    String C;\n    String D;\n    public String getA() {\n        return A;\n    }\n    public void setA(String a) {\n        A = a;\n    }\n    public String getB() {\n        return B;\n    }\n    public void setB(String b) {\n        B = b;\n    }\n    public String getC() {\n        return C;\n    }\n    public void setC(String c) {\n        C = c;\n    }\n    public String getD() {\n        return D;\n    }\n    public void setD(String d) {\n        D = d;\n    }\n    @Override\n    public String toString() {\n        return &quot;protect{&quot; +\n                &quot;A=\'&quot; + A + \'\\\'\' +\n                &quot;, B=\'&quot; + B + \'\\\'\' +\n                &quot;, C=\'&quot; + C + \'\\\'\' +\n                &quot;, D=\'&quot; + D + \'\\\'\' +\n                \'}\';\n    }\n}\n\n</code></pre>\n<p><mark>生产者</mark>：</p>\n<pre><code class=\"lang-java\">public interface Builder {\n    Builder builderA();\n    Builder builderB();\n    Builder builderC();\n    Builder builderD();\n    Protect getProtect();\n}\n\npublic class Worker implements Builder{\n    Protect protect = new Protect();\n    public Protect getProtect(){\n        return protect;\n    }\n    public Builder builderA() {\n        protect.setA(&quot;A&quot;);\n        return this;\n    }\n    public Builder builderB() {\n        protect.setB(&quot;B&quot;);\n        return this;\n    }\n    public Builder builderC() {\n        protect.setC(&quot;C&quot;);\n        return this;\n    }\n    public Builder builderD() {\n        protect.setD(&quot;D&quot;);\n        return this;\n    }\n}\n</code></pre>\n<p><mark>指挥者</mark>：</p>\n<ul>\n<li>我们可以在指挥者里改变顺序</li>\n</ul>\n<pre><code class=\"lang-java\">public class Director {\n    public Protect BuildProtect(Builder builder){\n        builder.builderA();\n        builder.builderB();\n        builder.builderC();\n        builder.builderD();\n        return builder.getProtect();\n    }\n}\n</code></pre>\n<p><mark>测试</mark>：</p>\n<ul>\n<li>只用调用指挥者</li>\n</ul>\n<pre><code class=\"lang-java\">class Test {\n    public static void main(String[] args) {\n        Director director=new Director();\n        Protect protect = director.BuildProtect(new Worker());\n        System.out.println(protect.toString());\n    }\n}\n</code></pre>\n<h3><a id=\"_341\"></a>改进建造者模式</h3>\n<ul>\n<li>\n<p>通常用户就是指挥者，指挥者可以去掉</p>\n</li>\n<li>\n<p>给产品一个默认值</p>\n</li>\n</ul>\n<pre><code class=\"lang-java\">    String A=&quot;A&quot;;\n    String B=&quot;B&quot;;\n    String C=&quot;C&quot;;\n    String D=&quot;D&quot;;\n</code></pre>\n<ul>\n<li>接口传入赋值参数，如果不赋值，就是默认值</li>\n</ul>\n<pre><code class=\"lang-java\">public interface Builder {\n    Builder builderA(String msg);\n    Builder builderB(String msg);\n    Builder builderC(String msg);\n    Builder builderD(String msg);\n    Protect getProtect();\n}\n</code></pre>\n<ul>\n<li>测试</li>\n</ul>\n<pre><code class=\"lang-java\">class Test {\n    public static void main(String[] args) {\n        Worker worker=new Worker();\n        worker.builderA(&quot;D&quot;)\n                .builderB(&quot;C&quot;)\n                .builderC(&quot;B&quot;)\n                .builderD(&quot;A&quot;);\n        Protect protect = worker.getProtect();\n        System.out.println(protect.toString());\n    }\n}\n\n</code></pre>\n<ul>\n<li>应用场景：\n<ul>\n<li>需要生成的产品对象有复杂的内部结构，这些产品对象具备共性</li>\n<li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品</li>\n<li>适用于一个具有较多的零件（属性）的产品（对象）的创建过程</li>\n</ul>\n</li>\n</ul>\n<h2><a id=\"Prototyte_386\"></a>原型模式(Prototyte)</h2>\n<ul>\n<li>克隆对象（clone()）</li>\n<li>实现一个接口：Cloneable</li>\n<li>重写一个方法：clone</li>\n</ul>\n<pre><code class=\"lang-java\">//实现一个接口：Cloneable\n//重写一个方法：clone\npublic class Video implements Cloneable {\n    private String name;\n    private Date data;\n\n    @Override\n    public Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public Date getData() {\n        return data;\n    }\n    public void setData(Date data) {\n        this.data = data;\n    }\n    public Video(String name, Date data) {\n        this.name = name;\n        this.data = data;\n    }\n    @Override\n    public String toString() {\n        return &quot;demo{&quot; +\n                &quot;name=\'&quot; + name + \'\\\'\' +\n                &quot;, data=&quot; + data +\n                \'}\';\n    }\n}\n</code></pre>\n<ul>\n<li>测试：直接调用clone方法就可以实现了</li>\n</ul>\n<pre><code class=\"lang-java\">public static void main(String[] args) throws CloneNotSupportedException {\n        Date date=new Date();\n        Video v1=new Video(&quot;huang&quot;,date);\n        System.out.println(v1.toString());\n        Video clone =(Video) v1.clone();\n        System.out.println(clone.toString());\n    }\n</code></pre>\n<p><mark>以上方法只是浅克隆，对象里面的data对象，指向的还是同一个</mark></p>\n<ul>\n<li>类似于C++里面的浅拷贝深拷贝的概念</li>\n<li>要实现深克隆，改变clone方法</li>\n</ul>\n<pre><code class=\"lang-java\"> @Override\n    public Object clone() throws CloneNotSupportedException {\n        Object clone = super.clone();\n        Video video=(Video) clone;\n\n        //将这个对象的属性也进行克隆\n        video.data= (Date) this.data.clone();\n\n        return clone;\n    }\n</code></pre>\n<ul>\n<li>spring Bean使用的单例模式+原型模式</li>\n<li>原型模式+工厂模式：在工厂创建对象的时候使用克隆更快</li>\n</ul>\n','@[toc](目录)\n\n# 面向对象七大原则\n\n- **开闭原则**：对扩展开放，对修改关闭\n- **里氏替换原**则：继承必须确保父类所拥有的性质在子类中依然成立\n- **依赖倒置原则**：要面向接口编程，不要面向实现编程\n- **单一职责原则**：控制类的粒度大小、将对象解耦、提高其内聚性\n- **接口隔离原则**：要为各个类建立它们需要的专用接口\n- **迪米特法则**：只与你的直接朋友交谈，不跟陌生人说话\n- ** 合成复用原则**： 尽量先使用组合或者聚合等关联关系来实现，其次再考虑使用继承关系来实现\n\n# 创建型模式\n\n\n\n\n\n## 单例模式\n### 饿汉式单例\n- 构造器私有\n- 一开始就加载对象\n- 可能会浪费空间\n\n```java\npublic class Hungry{\n	//一开始就加载对象\n	private finall static Hungry hungry = new Hungry();\n	\n	//构造器私有\n	private Hungry(){\n	}\n	//通过方法获取对象\n	public static Hungry getHungry(){\n		return hungry;\n	}\n}\n```\n### 懒汉式单例\n- 要用的时候再加载\n- 单线程可以，多线程的时候要加锁\n\n```java\n//懒汉式\npublic class Lazy{\n	//先定义对象，并不实例化\n	private volatile static Lazy lazy;\n	\n	//构造器私有\n	private Lazy(){\n		synchronized(Lazy.class){\n			if(lazy!=null){\n				throw RuntimeException(\"要试图通过反射去破坏单例\")\n			}\n		}\n	}\n	\n	//通过方法获取对象：双重检测锁模式，DCL懒汉式\n	public static Lazy getLazy(){\n		if(lazy==null){\n			synchronized (Lazy.class) {\n				if(lazy==null){\n					lazy=new Lazy();	\n					/**\n					 * 不是一个原子性操作\n					 * 1. 分配内存空间\n					 * 2. 执行构造方法，初始化对象\n					 * 3. 把这个对象指向空间\n					 * 可能指令重排，所以在对象前加：volatile\n					 **/\n				}\n			}\n		}\n	\n		return lazy;\n	}\n}\n```\n\n### 静态内部类实现单例\n- 通过静态内部类实现\n\n```java\npublic class StaSign{\n	private StaSign(){\n	}\n	public static StaSign getInstance(){\n		return InnerClass.STASIGN\n	}\n	public static class InnerClass{\n		private static finall StaSign STASIGN= new StaSign();\n	}\n}\n```\n\n\n\n- 上面的两种方法都可以通过java反射破解\n\n\n### 枚举单例\n- 枚举里面没有无参构造，只有有参构造\n- 使用枚举可以解决java反射破解\n```java\npublic enum EnumSingle{\n	INSTANCE;\n	public EnumSingle getInstance(){\n		return INSTANCE;\n	}\n}\n```\n\n\n## 工厂模式(Factory)\n- 创建对象统一管理和控制，==创建者和调用者分离==\n- 实例化对象不使用new，用工厂方法代替\n\n### 简单（静态）工厂模式\n- 用来生产同一级结构中的任意产品\n- 增加一个新产品，如果不修改代码，做不到，不满足闭合原则\n\n```java\npublic interface Car{\n	void getName();\n}\npublic class Car1 import Car{\n	void getName(){\n		System.out.println(\"car1\");\n	}\n}\npublic class Car2 import Car{\n	void getName(){\n		System.out.println(\"car2\");\n	}\n}\n//建立一个工厂\npublic class CarFactory{\n	public static Car getCar1(){\n		return new Car1();\n	}\n	public static Car getCar2(){\n		return new Car2();\n	}\n}\n```\n\n### 工厂方法模式\n- 用来生产同一级结构中的固定产品\n- 把工厂提取出一个抽象类\n- 为每一个对象创建一个工厂：变的复杂了\n- 这个新增功能的时候，就不用修改原来的代码。满足开闭原则\n\n```java\npublic interface Car{\n	void getName();\n}\npublic class Car1 import Car{\n	@verride\n	void getName(){\n		System.out.println(\"car1\");\n	}\n}\npublic class Car2 import Car{\n	@verride\n	void getName(){\n		System.out.println(\"car2\");\n	}\n}\n//工厂方法模式\npublic interface CarFactory{\n	Car getCar();\n}\npublic class Car1Factory import CarFactory{\n	@Verride\n	Car getCar(){\n		return new Car1();\n	} \n}\npublic class Car2Factory import CarFactory{\n	@Verride\n	Car getCar(){\n		return new Car2();\n	} \n}\n```\n\n## 抽象工厂模式\n- 围绕一个超级工厂创建其他工厂\n- 不能增加产品，但是可以增加产品族\n- 规定了所有可能被创建的产品的集合，产品族中扩展新的产品很困难\n- 增加了系统的抽象性和理解难度\n\n```java\n//抽象工厂模式\n\npublic interface Car{\n	void start();\n	void run();\n	void stop();\n}\n\npublic class WuLin import Car{\n	@verride\n	void start(){\n		System.out.println(\"start\");\n	}\n	\n	@verride\n	void run(){\n		System.out.println(\"run\");\n	}\n	\n	@verride\n	void stop(){\n		System.out.println(\"stop\");\n	}\n}\n\npublic interface CarFactory{\n	public CarFactory getCarFactory();\n}\n\npublic class WuLinFactory import CarFactory{\n	@Verride\n	public CarFactory getWuLinCar(){\n		return new WuLin();\n	}\n}\n```\n\n## 建造者模式(Builder)\n- 建造者模式也属于创建模式，它提供一种创建对象的最佳方式\n- 定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示\n- 作用：在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象\n- 用户只需要给出指定对象的类型和内容，建造者模式负责顺序创建复杂对象（把内部的建造过程和细节隐藏起来）\n\n==产品==：\n\n```java\npublic class Protect {\n    String A;\n    String B;\n    String C;\n    String D;\n    public String getA() {\n        return A;\n    }\n    public void setA(String a) {\n        A = a;\n    }\n    public String getB() {\n        return B;\n    }\n    public void setB(String b) {\n        B = b;\n    }\n    public String getC() {\n        return C;\n    }\n    public void setC(String c) {\n        C = c;\n    }\n    public String getD() {\n        return D;\n    }\n    public void setD(String d) {\n        D = d;\n    }\n    @Override\n    public String toString() {\n        return \"protect{\" +\n                \"A=\'\" + A + \'\\\'\' +\n                \", B=\'\" + B + \'\\\'\' +\n                \", C=\'\" + C + \'\\\'\' +\n                \", D=\'\" + D + \'\\\'\' +\n                \'}\';\n    }\n}\n\n```\n\n==生产者==：\n\n```java\npublic interface Builder {\n    Builder builderA();\n    Builder builderB();\n    Builder builderC();\n    Builder builderD();\n    Protect getProtect();\n}\n\npublic class Worker implements Builder{\n    Protect protect = new Protect();\n    public Protect getProtect(){\n        return protect;\n    }\n    public Builder builderA() {\n        protect.setA(\"A\");\n        return this;\n    }\n    public Builder builderB() {\n        protect.setB(\"B\");\n        return this;\n    }\n    public Builder builderC() {\n        protect.setC(\"C\");\n        return this;\n    }\n    public Builder builderD() {\n        protect.setD(\"D\");\n        return this;\n    }\n}\n```\n==指挥者==：\n- 我们可以在指挥者里改变顺序\n~~~java\npublic class Director {\n    public Protect BuildProtect(Builder builder){\n        builder.builderA();\n        builder.builderB();\n        builder.builderC();\n        builder.builderD();\n        return builder.getProtect();\n    }\n}\n~~~\n\n==测试==：\n- 只用调用指挥者\n~~~java\nclass Test {\n    public static void main(String[] args) {\n        Director director=new Director();\n        Protect protect = director.BuildProtect(new Worker());\n        System.out.println(protect.toString());\n    }\n}\n~~~\n\n### 改进建造者模式\n- 通常用户就是指挥者，指挥者可以去掉\n\n- 给产品一个默认值\n\n```java\n    String A=\"A\";\n    String B=\"B\";\n    String C=\"C\";\n    String D=\"D\";\n```\n- 接口传入赋值参数，如果不赋值，就是默认值\n```java\npublic interface Builder {\n    Builder builderA(String msg);\n    Builder builderB(String msg);\n    Builder builderC(String msg);\n    Builder builderD(String msg);\n    Protect getProtect();\n}\n```\n- 测试\n\n```java\nclass Test {\n    public static void main(String[] args) {\n        Worker worker=new Worker();\n        worker.builderA(\"D\")\n                .builderB(\"C\")\n                .builderC(\"B\")\n                .builderD(\"A\");\n        Protect protect = worker.getProtect();\n        System.out.println(protect.toString());\n    }\n}\n\n```\n\n- 应用场景：\n  - 需要生成的产品对象有复杂的内部结构，这些产品对象具备共性\n  - 隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品\n  - 适用于一个具有较多的零件（属性）的产品（对象）的创建过程\n\n\n\n## 原型模式(Prototyte)\n- 克隆对象（clone()）\n- 实现一个接口：Cloneable\n- 重写一个方法：clone\n\n```java\n//实现一个接口：Cloneable\n//重写一个方法：clone\npublic class Video implements Cloneable {\n    private String name;\n    private Date data;\n\n    @Override\n    public Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public Date getData() {\n        return data;\n    }\n    public void setData(Date data) {\n        this.data = data;\n    }\n    public Video(String name, Date data) {\n        this.name = name;\n        this.data = data;\n    }\n    @Override\n    public String toString() {\n        return \"demo{\" +\n                \"name=\'\" + name + \'\\\'\' +\n                \", data=\" + data +\n                \'}\';\n    }\n}\n```\n\n- 测试：直接调用clone方法就可以实现了\n```java\npublic static void main(String[] args) throws CloneNotSupportedException {\n        Date date=new Date();\n        Video v1=new Video(\"huang\",date);\n        System.out.println(v1.toString());\n        Video clone =(Video) v1.clone();\n        System.out.println(clone.toString());\n    }\n```\n\n==以上方法只是浅克隆，对象里面的data对象，指向的还是同一个==\n\n- 类似于C++里面的浅拷贝深拷贝的概念\n- 要实现深克隆，改变clone方法\n\n```java\n @Override\n    public Object clone() throws CloneNotSupportedException {\n        Object clone = super.clone();\n        Video video=(Video) clone;\n\n        //将这个对象的属性也进行克隆\n        video.data= (Date) this.data.clone();\n\n        return clone;\n    }\n```\n\n- spring Bean使用的单例模式+原型模式\n- 原型模式+工厂模式：在工厂创建对象的时候使用克隆更快',2,'123456',2),(10,1,'2020-09-18 15:34:40','结构型模式（适配器模式+桥接模式）','设计模式（结构性模式）','http://108lan.com:8001/images/2020/09/18/0b5c3fcd80f54c5898495be18a59d031.png','<p><h3>目录</h3><ul><li><a href=\"#_2\">结构性模式</a></li><ul><li><a href=\"#Adapter_4\">适配器模式（Adapter)</a></li><li><a href=\"#bridge_75\">桥接模式（bridge）</a></li><li><a href=\"#proxy_167\">代理模式（proxy）</a></li><ul><li><a href=\"#_178\">静态代理</a></li><li><a href=\"#_251\">动态代理</a></li></ul></ul></ul></p>\n<h1><a id=\"_2\"></a>结构性模式</h1>\n<h2><a id=\"Adapter_4\"></a>适配器模式（Adapter)</h2>\n<ul>\n<li>将一个类的接口转换成客户端的另外一个接口。Adapter模式使得原来本由于接口不兼容而不能在一起工作的哪些类可以在一起工作</li>\n<li>通过包装一个不适配的对象，把原接口转换成目标对象</li>\n</ul>\n<p><mark>例子：电脑，网线，适配器</mark></p>\n<ul>\n<li>电脑</li>\n</ul>\n<pre><code class=\"lang-java\">//客户端类：要连上网线\npublic class Computer {\n    public void getNet(Adapter adapter){\n        //找一个转接头\n        adapter.handleResquest();\n    }\n}\n</code></pre>\n<ul>\n<li>网线</li>\n</ul>\n<pre><code class=\"lang-java\">//被适配的类：网线\npublic class NetLine {\n    public void request(){\n        System.out.println(&quot;连接网线上网&quot;);\n    }\n}\n</code></pre>\n<ul>\n<li>适配器</li>\n</ul>\n<pre><code class=\"lang-java\">//接口转换器的接口\npublic interface Adapter {\n    //处理请求\n    public void handleResquest();\n}\n\n//适配器\npublic class MacAdapter implements Adapter {\n    /**\n     * 使用组合的，不推荐使用继承\n     * 这种把对象注入进来的，叫对象适配器\n     * 可以适配一个适配者的子类，由于适配者和适配器之间是关联关系，根据&quot;里氏代换原则&quot;适配者的子类也可以通过该适配器进行适配\n     * 还可以使用继承的方式，但是java不支持多继承，不推荐使用\n     */    private NetLine netLine;\n    public MacAdapter(NetLine netLine) {\n        this.netLine = netLine;\n    }\n    public void handleResquest() {\n        netLine.request();\n    }\n}\n</code></pre>\n<ul>\n<li>测试</li>\n</ul>\n<pre><code class=\"lang-java\">class Test {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        //上网：电脑+网线+适配器\n        Computer computer=new Computer();\n        NetLine netLine=new NetLine();\n        Adapter adapter=new MacAdapter(netLine);\n\n        computer.getNet(adapter);\n\n    }\n}\n</code></pre>\n<h2><a id=\"bridge_75\"></a>桥接模式（bridge）</h2>\n<ul>\n<li>将抽象部分与他的实现部分分离，使他们都独立的变化</li>\n<li>它是一种对象结构型模式吗，又称为柄体模式（Handle and Body）或接口模式（Interfce）</li>\n<li>好处：\n<ul>\n<li>桥接模式有点类似于多继承方案，但是多继承方案违背了单一职责原则复用性比较差</li>\n<li>桥接模式极大的减少了子类的个数，降低管理和维护成本</li>\n<li>提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有的系统。符合开闭原则</li>\n</ul>\n</li>\n<li>缺点：\n<ul>\n<li>增加系统的理解与设计难度，要对抽象进行编程</li>\n<li>桥接模式要求正确识别出系统中两个独立变化的维度，使用范围有一定的局限性</li>\n</ul>\n</li>\n</ul>\n<p><mark>例子：电脑和品牌</mark><br />\n<img src=\"https://img-blog.csdnimg.cn/20200918151308843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"1212\" /></p>\n<ul>\n<li>品牌类</li>\n</ul>\n<pre><code class=\"lang-java\">//品牌\npublic interface Brand {\n    void info();\n}\n\npublic class Apple implements Brand {\n    public void info() {\n        System.out.println(&quot;苹果&quot;);\n    }\n}\n\npublic class Lenove implements Brand{\n    public void info() {\n        System.out.println(&quot;联想&quot;);\n    }\n}\n</code></pre>\n<ul>\n<li>电脑：使用组合的方式把品牌组合进电脑</li>\n</ul>\n<pre><code class=\"lang-java\">//电脑抽象类\npublic class Computer {\n    //组合品牌\n    protected Brand brand;\n    public Computer(Brand brand) {\n        this.brand = brand;\n    }\n    public void info(){\n        brand.info();   //自带品牌\n    }\n}\n\n\n//台式机类\npublic class Desktop extends Computer{\n    public Desktop(Brand brand) {\n        super(brand);\n    }\n    @Override\n    public void info() {\n        super.info();\n        System.out.println(&quot;台式机&quot;);\n    }\n}\n\n//笔记本\npublic class Laptop extends Computer{\n    public Laptop(Brand brand) {\n        super(brand);\n    }\n\n    @Override\n    public void info() {\n        super.info();\n        System.out.println(&quot;笔记本&quot;);\n    }\n}\n\n</code></pre>\n<ul>\n<li>测试类</li>\n</ul>\n<pre><code class=\"lang-java\">class Test {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        //电脑\n        Computer computer= new Laptop(new Apple());\n        computer.info();\n    }\n}\n</code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200918151210331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"1212121\" /></p>\n<h2><a id=\"proxy_167\"></a>代理模式（proxy）</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/20200727164532867.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"23\" /></p>\n<ul>\n<li>分类：\n<ul>\n<li>静态代理</li>\n<li>动态代理</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"_178\"></a>静态代理</h3>\n<ul>\n<li>角色\n<ul>\n<li>抽象角色：一般会使用接口或者抽象类来解决</li>\n<li>真实角色：被代理的角色</li>\n<li>代理角色：代理真实角色，代理真实角色后，一般会做一些附属操作</li>\n<li>客户角色：访问代理对象的人</li>\n</ul>\n</li>\n</ul>\n<p>== 例子：租房子==</p>\n<pre><code class=\"lang-java\">//租房接口\npublic interface Rent {\n    void rent();\n}\n\n\n//房东\npublic class Host implements Rent {\n    public void rent() {\n        System.out.println(&quot;房东要出租房子&quot;);\n    }\n}\n\n\n//中介\npublic class Proxy implements Rent {\n    private Host host;\n\n    public Proxy(Host host) {\n        this.host = host;\n    }\n\n\n    public void rent() {\n        System.out.println(&quot;代理找房子&quot;);\n        host.rent();\n        this.showHose();\n        this.finese();\n    }\n    private void showHose(){\n        System.out.println(&quot;中介带你看房&quot;);\n    }\n    private void finese(){\n        System.out.println(&quot;签合同&quot;);\n    }\n}\n\n\n//客户\npublic class Client {\n    public static void main(String[] args) {\n        Host host =new Host();\n        Proxy proxy=new Proxy(host);\n        proxy.rent();\n    }\n}\n\n</code></pre>\n<ul>\n<li>代理模式的好处：\n<ul>\n<li>可以使用真实角色的操作更加纯粹，不用去关注一些公共业务</li>\n<li>公共业务也就交给了代理角色！实现了业务的分工</li>\n<li>公共业务发生扩展的时候，方便集中管理</li>\n</ul>\n</li>\n<li>缺点：\n<ul>\n<li>一个真实角色就会产生一个代理角色，代码量会翻倍，开发效率会变低</li>\n<li>动态代理好处：\n<ul>\n<li>一个动态代理代理的是一类接口，一般就是对应的一类业务</li>\n<li>一个动态代理可以代理多个类，只要实现了同一个接口即可</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"_251\"></a>动态代理</h3>\n<ul>\n<li>\n<p>角色：动态代理和静态代理的角色是一样</p>\n</li>\n<li>\n<p>动态代理的代理类是动态生成的</p>\n</li>\n<li>\n<p>动态代理分为两大类：基于接口的动态代理，基于类的动态代理</p>\n<ul>\n<li>基于接口：JDK动态代理</li>\n<li>基于类：cgLib</li>\n<li>Java字节码实现：javasist</li>\n</ul>\n</li>\n<li>\n<p>了解两个类：</p>\n<ul>\n<li>Proxy：代理</li>\n<li>InvocationHandler：调用处理程序</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>InvocationHandler是由代理实例的调用处理程序实现的接口。<br />\n每个代理实例都有一个关联的调用处理程序。 在代理实例上调用方法时，方法调用将被编码并调度到其调用处理程序的invoke方法。</p>\n</blockquote>\n<ul>\n<li>实现一个万能代理类生成类：</li>\n</ul>\n<pre><code class=\"lang-java\">//使用这个类自动生成代理类\npublic class ProxyInvocationHandler implements InvocationHandler {\n    //被代理的接口\n    private Object target;\n    public void setTarget(Object target) {\n        this.target = target;\n    }\n    //生成代理对象\n    public Object getProxy(){\n        return Proxy.newProxyInstance(\n        		this.getClass().getClassLoader(),\n                target.getClass().getInterfaces(),\n                this); \n    }\n    //处理代理实类，并返回结果\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        //动态代理的本质，就是使用反射机制实现\n        Object result = method.invoke(target, args);\n        return result;\n    }\n}\n</code></pre>\n<ul>\n<li>测试使用：Host是一个继承Rent接口的实现类，Rent是一个接口</li>\n</ul>\n<pre><code class=\"lang-java\">public class Client {\n    public static void main(String[] args) {\n        //真实角色\n        Host host=new Host();\n        //代理角色：动态创建\n        ProxyInvocationHandler handler = new ProxyInvocationHandler();\n        //通过调用程序处理角色，来创建对象\n        handler.setTarget(host);\n        Rent proxy = (Rent)handler.getProxy();  //这里的proxy是动态生成的\n        proxy.rent();\n    }\n}\n</code></pre>\n','@[toc](目录)\n\n# 结构性模式\n\n## 适配器模式（Adapter)\n- 将一个类的接口转换成客户端的另外一个接口。Adapter模式使得原来本由于接口不兼容而不能在一起工作的哪些类可以在一起工作\n- 通过包装一个不适配的对象，把原接口转换成目标对象\n\n==例子：电脑，网线，适配器==\n\n- 电脑\n\n```java\n//客户端类：要连上网线\npublic class Computer {\n    public void getNet(Adapter adapter){\n        //找一个转接头\n        adapter.handleResquest();\n    }\n}\n```\n\n- 网线\n\n```java\n//被适配的类：网线\npublic class NetLine {\n    public void request(){\n        System.out.println(\"连接网线上网\");\n    }\n}\n```\n\n- 适配器\n\n```java\n//接口转换器的接口\npublic interface Adapter {\n    //处理请求\n    public void handleResquest();\n}\n\n//适配器\npublic class MacAdapter implements Adapter {\n    /**\n     * 使用组合的，不推荐使用继承\n     * 这种把对象注入进来的，叫对象适配器\n     * 可以适配一个适配者的子类，由于适配者和适配器之间是关联关系，根据\"里氏代换原则\"适配者的子类也可以通过该适配器进行适配\n     * 还可以使用继承的方式，但是java不支持多继承，不推荐使用\n     */    private NetLine netLine;\n    public MacAdapter(NetLine netLine) {\n        this.netLine = netLine;\n    }\n    public void handleResquest() {\n        netLine.request();\n    }\n}\n```\n\n- 测试\n\n```java\nclass Test {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        //上网：电脑+网线+适配器\n        Computer computer=new Computer();\n        NetLine netLine=new NetLine();\n        Adapter adapter=new MacAdapter(netLine);\n\n        computer.getNet(adapter);\n\n    }\n}\n```\n\n## 桥接模式（bridge）\n- 将抽象部分与他的实现部分分离，使他们都独立的变化\n- 它是一种对象结构型模式吗，又称为柄体模式（Handle and Body）或接口模式（Interfce）\n- 好处：\n  - 桥接模式有点类似于多继承方案，但是多继承方案违背了单一职责原则复用性比较差\n  - 桥接模式极大的减少了子类的个数，降低管理和维护成本\n  - 提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有的系统。符合开闭原则\n- 缺点：\n  - 增加系统的理解与设计难度，要对抽象进行编程\n  - 桥接模式要求正确识别出系统中两个独立变化的维度，使用范围有一定的局限性\n\n\n==例子：电脑和品牌==\n![1212](https://img-blog.csdnimg.cn/20200918151308843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n- 品牌类\n\n```java\n//品牌\npublic interface Brand {\n    void info();\n}\n\npublic class Apple implements Brand {\n    public void info() {\n        System.out.println(\"苹果\");\n    }\n}\n\npublic class Lenove implements Brand{\n    public void info() {\n        System.out.println(\"联想\");\n    }\n}\n```\n\n- 电脑：使用组合的方式把品牌组合进电脑\n\n```java\n//电脑抽象类\npublic class Computer {\n    //组合品牌\n    protected Brand brand;\n    public Computer(Brand brand) {\n        this.brand = brand;\n    }\n    public void info(){\n        brand.info();   //自带品牌\n    }\n}\n\n\n//台式机类\npublic class Desktop extends Computer{\n    public Desktop(Brand brand) {\n        super(brand);\n    }\n    @Override\n    public void info() {\n        super.info();\n        System.out.println(\"台式机\");\n    }\n}\n\n//笔记本\npublic class Laptop extends Computer{\n    public Laptop(Brand brand) {\n        super(brand);\n    }\n\n    @Override\n    public void info() {\n        super.info();\n        System.out.println(\"笔记本\");\n    }\n}\n\n```\n\n- 测试类\n\n~~~java\nclass Test {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        //电脑\n        Computer computer= new Laptop(new Apple());\n        computer.info();\n    }\n}\n~~~\n![1212121](https://img-blog.csdnimg.cn/20200918151210331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n## 代理模式（proxy）\n![23](https://img-blog.csdnimg.cn/20200727164532867.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n\n\n\n- 分类：\n  * 静态代理\n  * 动态代理\n\n### 静态代理\n- 角色\n  - 抽象角色：一般会使用接口或者抽象类来解决\n  - 真实角色：被代理的角色\n  - 代理角色：代理真实角色，代理真实角色后，一般会做一些附属操作\n  - 客户角色：访问代理对象的人\n\n== 例子：租房子==\n\n```java\n//租房接口\npublic interface Rent {\n    void rent();\n}\n\n\n//房东\npublic class Host implements Rent {\n    public void rent() {\n        System.out.println(\"房东要出租房子\");\n    }\n}\n\n\n//中介\npublic class Proxy implements Rent {\n    private Host host;\n\n    public Proxy(Host host) {\n        this.host = host;\n    }\n\n\n    public void rent() {\n        System.out.println(\"代理找房子\");\n        host.rent();\n        this.showHose();\n        this.finese();\n    }\n    private void showHose(){\n        System.out.println(\"中介带你看房\");\n    }\n    private void finese(){\n        System.out.println(\"签合同\");\n    }\n}\n\n\n//客户\npublic class Client {\n    public static void main(String[] args) {\n        Host host =new Host();\n        Proxy proxy=new Proxy(host);\n        proxy.rent();\n    }\n}\n\n```\n\n\n\n\n- 代理模式的好处：\n  * 可以使用真实角色的操作更加纯粹，不用去关注一些公共业务\n  * 公共业务也就交给了代理角色！实现了业务的分工\n  * 公共业务发生扩展的时候，方便集中管理\n- 缺点：\n  * 一个真实角色就会产生一个代理角色，代码量会翻倍，开发效率会变低\n  * 动态代理好处：\n    * 一个动态代理代理的是一类接口，一般就是对应的一类业务\n    * 一个动态代理可以代理多个类，只要实现了同一个接口即可\n\n\n### 动态代理\n- 角色：动态代理和静态代理的角色是一样\n- 动态代理的代理类是动态生成的\n- 动态代理分为两大类：基于接口的动态代理，基于类的动态代理\n  * 基于接口：JDK动态代理\n  * 基于类：cgLib\n  * Java字节码实现：javasist\n\n- 了解两个类：\n  * Proxy：代理\n  * InvocationHandler：调用处理程序\n> InvocationHandler是由代理实例的调用处理程序实现的接口。 \n每个代理实例都有一个关联的调用处理程序。 在代理实例上调用方法时，方法调用将被编码并调度到其调用处理程序的invoke方法。 \n\n- 实现一个万能代理类生成类：\n\n```java\n//使用这个类自动生成代理类\npublic class ProxyInvocationHandler implements InvocationHandler {\n    //被代理的接口\n    private Object target;\n    public void setTarget(Object target) {\n        this.target = target;\n    }\n    //生成代理对象\n    public Object getProxy(){\n        return Proxy.newProxyInstance(\n        		this.getClass().getClassLoader(),\n                target.getClass().getInterfaces(),\n                this); \n    }\n    //处理代理实类，并返回结果\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        //动态代理的本质，就是使用反射机制实现\n        Object result = method.invoke(target, args);\n        return result;\n    }\n}\n```\n- 测试使用：Host是一个继承Rent接口的实现类，Rent是一个接口\n\n```java\npublic class Client {\n    public static void main(String[] args) {\n        //真实角色\n        Host host=new Host();\n        //代理角色：动态创建\n        ProxyInvocationHandler handler = new ProxyInvocationHandler();\n        //通过调用程序处理角色，来创建对象\n        handler.setTarget(host);\n        Rent proxy = (Rent)handler.getProxy();  //这里的proxy是动态生成的\n        proxy.rent();\n    }\n}\n```',2,'123456',2),(12,1,'2020-09-20 10:41:49','点集拓扑初探','讲了些最近刚学的点集拓扑学的基本概念','http://108lan.com:8001/images/2020/09/20/567af26bea1b4a39934e8ea18b88c1bc.jpg','<p><h3>目录</h3><ul><li><a href=\"#_1\">前言</a></li><li><a href=\"#_6\">拓扑</a></li><ul><li><a href=\"#def1_7\">def（定义）1</a></li></ul><li><a href=\"#_19\">点与点集</a></li><ul><li><a href=\"#def2_20\">def2</a></li><li><a href=\"#def3_31\">def3</a></li><li><a href=\"#def4_34\">def4</a></li><li><a href=\"#def5_39\">def5</a></li></ul><li><a href=\"#_42\">几种常见的拓扑空间</a></li><ul><li><a href=\"#_43\">距离空间</a></li><li><a href=\"#_47\">平庸拓扑空间</a></li><li><a href=\"#_49\">离散拓扑空间</a></li><li><a href=\"#_52\">余有限拓扑空间</a></li><li><a href=\"#_54\">余可数拓扑空间</a></li><li><a href=\"#_56\">余零度集空间</a></li></ul></ul></p>\n<h1><a id=\"_1\"></a>前言</h1>\n<p>选择点集拓扑的原因是我前几天从书架上随意抽了几本书，而点集拓扑是其中看起来最容易的。按照我个人的想法，点集拓扑作为一门连接数学分析和几何拓扑学（虽然我还没学）的桥梁学科，其内容是相对抽象的而繁琐的，由点类理论到空间类理论，对于只学过数分的同学（就是我）来说，无疑是打开了新世界的大门，从更高的层面来给出定义，而非仅局限于欧式空间。</p>\n<p>废话不多说，let’s go!</p>\n<h1><a id=\"_6\"></a>拓扑</h1>\n<h2><a id=\"def1_7\"></a>def（定义）1</h2>\n<p>如果非空集合X的子集族ζ={U<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span>X|U具有性质*}满足：<br />\n(1)<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ϕ</span></span></span></span>，X<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ<br />\n(2)<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">U_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">U_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ蕴含着<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">U_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">U_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ<br />\n(3)<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mi>α</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ蕴含<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋃</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcup</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋃</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mi>α</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi><mo>∈</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha\\in T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.0037em;\">α</span><span class=\"mrel\">∈</span><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">T</span></span></span></span>,T为指标集。<br />\n则称ζ为X上的一个<strong>拓扑</strong>，偶对（X,ζ）称为X上的一个<strong>拓扑空间</strong><br />\n称<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ为拓扑空间中的<strong>开集</strong><br />\n若<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>F</mi><mi>c</mi></msup></mrow><annotation encoding=\"application/x-tex\">F^c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">c</span></span></span></span></span></span></span></span></span></span></span>=X\\F<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ,则称F为该拓扑空间上的<strong>闭集</strong></p>\n<p>由（2）（3）看出可数个开集的交仍属于原拓扑，任意个开集的并也属于原拓扑。容易发现拓扑即为子集族，而拓扑空间则是全集与子集族的偶对（X,ζ）。用开集来定义拓扑空间是一件很自然的事情，如果要寻找一个有足够良好性质的空间来进行研究，肯定是要有空间的子集来满足开集的性质。当然，也可以用闭集族、闭包、邻域系（这两个定义在下面）来定义拓扑，其等价性证明在很多书上都可以找到，此处不作赘述。</p>\n<h1><a id=\"_19\"></a>点与点集</h1>\n<h2><a id=\"def2_20\"></a>def2</h2>\n<p>设A<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span>X,x<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>X,(X为全空间)，如果对x的任何开邻域（含x的开集）U必有</p>\n<div class=\"hljs-center\">\n<p>U<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span>(A-{x})=(U-{X})<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span>A<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>≠</mo></mrow><annotation encoding=\"application/x-tex\">\\neq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.716em;\"></span><span class=\"strut bottom\" style=\"height:0.9309999999999999em;vertical-align:-0.215em;\"></span><span class=\"base\"><span class=\"mrel\">≠</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ϕ</span></span></span></span></p>\n</div>\n<p>(即U中含A中任意异于x的点y),则称x为A的<strong>聚点</strong>，记A的聚点的全体为A’,称为<strong>导集</strong>，而<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mi>A</mi><mo>¯</mo></mover><mo>=</mo><msup><mi>A</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\bar A=A&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8201099999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8201099999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8201099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathit\">A</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"margin-left:0.27778em;\"><span>¯</span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span></span></span></span>,即为<strong>闭包</strong>。<br />\n若<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mi>A</mi><mo>¯</mo></mover><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">\\bar A=</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8201099999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8201099999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8201099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathit\">A</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"margin-left:0.27778em;\"><span>¯</span></span></span></span></span></span></span><span class=\"mrel\">=</span></span></span></span>A$，称A为X中的<strong>稠密集</strong>。</p>\n<h2><a id=\"def3_31\"></a>def3</h2>\n<p>称<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>N</mi><mi>x</mi><mi mathvariant=\"normal\">.</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">N_x^.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.93033em;vertical-align:-0.247em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.436892em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">x</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">.</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"></span></span></span></span></span></span></span></span>={U|U为x的开邻域}为点x<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>X的<strong>开邻域系</strong>。</p>\n<h2><a id=\"def4_34\"></a>def4</h2>\n<p>称<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>N</mi><mi>x</mi></msub></mrow><annotation encoding=\"application/x-tex\">N_x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>={V|<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"normal\">∃</mi></mrow></mrow><annotation encoding=\"application/x-tex\">{\\exists}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">∃</span></span></span></span></span>x的开邻域U,s.t.x<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>U<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span>V}为点x<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>X的<strong>邻域系</strong>。</p>\n<p>注意def4这中定义方式，用较小的集合来引出较大集合，实则是覆盖关系，将会在后面的笔记中多次接触。</p>\n<h2><a id=\"def5_39\"></a>def5</h2>\n<p>设（X,ζ）称为X上的一个拓扑空间，Y<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span>X为非空子集，记<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ζ</mi><mi>Y</mi></msub></mrow><annotation encoding=\"application/x-tex\">ζ_Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>={Y<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span>U|U<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>ζ}为Y的子集族，可以证明<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ζ</mi><mi>Y</mi></msub></mrow><annotation encoding=\"application/x-tex\">ζ_Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>是Y上的一个拓扑，称为由<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ζ</mi></mrow><annotation encoding=\"application/x-tex\">ζ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span></span></span></span>诱导的<strong>拓扑</strong>或者<strong>子拓扑</strong>，（Y,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ζ</mi><mi>Y</mi></msub></mrow><annotation encoding=\"application/x-tex\">ζ_Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>）为（X,ζ）的<strong>诱导拓扑空间</strong>或者<strong>子拓扑空间</strong>。</p>\n<h1><a id=\"_42\"></a>几种常见的拓扑空间</h1>\n<h2><a id=\"_43\"></a>距离空间</h2>\n<p>我们熟悉的欧几里得空间则是一种特殊的距离空间。<br />\n此处定义的距离（度量）即为满足正定性，对称性，三角不等式的映射<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ρ</span></span></span></span>,称偶对（X,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ρ</span></span></span></span>）为X上的度量空间，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ρ</span></span></span></span>（x,y）为x,y间的距离。<br />\n称X是子集B(a;<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>)={x<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>X|<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ρ</span></span></span></span>(x,a)&lt;<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>}为以a为中心，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>为半径的开球，容易验证X的子集族为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ζ</mi><mi>ρ</mi></msub></mrow><annotation encoding=\"application/x-tex\">ζ_\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">ρ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span></span></span></span>={U|<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∀</mi></mrow><annotation encoding=\"application/x-tex\">\\forall</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathrm\">∀</span></span></span></span>a<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">∈</span></span></span></span>U,存在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>δ</mi><mi>α</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\delta_\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>&gt;0，s.t.开球B(a;<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>δ</mi><mi>α</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\delta_\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>)<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span>U}为X上的一个拓扑，称为由<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ρ</span></span></span></span>诱导的拓扑。</p>\n<h2><a id=\"_47\"></a>平庸拓扑空间</h2>\n<p>设X为非空集合，ζ_平庸={<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ϕ</span></span></span></span>，X}为X上的拓扑，{X，ζ_平庸}为平庸拓扑空间。</p>\n<h2><a id=\"_49\"></a>离散拓扑空间</h2>\n<p>ζ_离散={U|U<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span>X},记作<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mi>X</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8413309999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span></span></span></span></span></span></span></span>,为X上的一个拓扑，称为离散拓扑，而{X，ζ_离散}为离散拓扑空间。<br />\n接下来的三种拓扑空间为举反例时经常要使用的拓扑空间，较为重要。</p>\n<h2><a id=\"_52\"></a>余有限拓扑空间</h2>\n<p>ζ_余有限={U|U=X\\C,C是X中有限子集}<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ϕ</span></span></span></span>为X上的一个拓扑，称为余有限拓扑，而{X，ζ_余有限}为余有限拓扑空间。</p>\n<h2><a id=\"_54\"></a>余可数拓扑空间</h2>\n<p>ζ_余可数={U|U=X\\C,C是X中可数子集}<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ϕ</span></span></span></span>为X上的一个拓扑，称为余可数拓扑，而{X，ζ_余可数}为余可数拓扑空间。</p>\n<h2><a id=\"_56\"></a>余零度集空间</h2>\n<p>N为自然数集，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>ζ</mi><mi>N</mi></msub></mrow><annotation encoding=\"application/x-tex\">ζ_N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>=<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">ϕ</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋂</mo></mrow><annotation encoding=\"application/x-tex\">\\bigcap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"base\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span></span></span></span>{U|U=N\\C},C满足<img src=\"http://108lan.com:8001/images/2020/09/20/fec0c9ed7eac42b08342c2b77cd4c946.png\" alt=\"``XD6UCTIVWL9681.png\" /><br />\n（称C为零密度集，#表示取集合中的个数）<br />\n为X上的一个拓扑。</p>\n','  @[toc](目录)\n# 前言\n选择点集拓扑的原因是我前几天从书架上随意抽了几本书，而点集拓扑是其中看起来最容易的。按照我个人的想法，点集拓扑作为一门连接数学分析和几何拓扑学（虽然我还没学）的桥梁学科，其内容是相对抽象的而繁琐的，由点类理论到空间类理论，对于只学过数分的同学（就是我）来说，无疑是打开了新世界的大门，从更高的层面来给出定义，而非仅局限于欧式空间。\n\n  废话不多说，let\'s go!\n\n# 拓扑\n## def（定义）1\n  如果非空集合X的子集族ζ={U$\\subset$X|U具有性质*}满足：\n  (1)$\\phi$，X$\\in$ζ\n   (2)$U_1$,$U_2$$\\in$ζ蕴含着$U_1$$\\bigcap$$U_2$$\\in$ζ\n   (3)$U_\\alpha$$\\in$ζ蕴含$\\bigcup$$U_\\alpha$$\\in$ζ,$\\alpha\\in T$,T为指标集。\n则称ζ为X上的一个**拓扑**，偶对（X,ζ）称为X上的一个**拓扑空间**\n称$U$$\\in$ζ为拓扑空间中的**开集**\n若$F^c$=X\\F$\\in$ζ,则称F为该拓扑空间上的**闭集**\n  \n由（2）（3）看出可数个开集的交仍属于原拓扑，任意个开集的并也属于原拓扑。容易发现拓扑即为子集族，而拓扑空间则是全集与子集族的偶对（X,ζ）。用开集来定义拓扑空间是一件很自然的事情，如果要寻找一个有足够良好性质的空间来进行研究，肯定是要有空间的子集来满足开集的性质。当然，也可以用闭集族、闭包、邻域系（这两个定义在下面）来定义拓扑，其等价性证明在很多书上都可以找到，此处不作赘述。\n\n\n# 点与点集\n## def2\n设A$\\subset$X,x$\\in$X,(X为全空间)，如果对x的任何开邻域（含x的开集）U必有\n::: hljs-center\n\n U$\\bigcap$(A-{x})=(U-{X})$\\bigcap$A$\\neq$$\\phi$\n\n\n:::\n(即U中含A中任意异于x的点y),则称x为A的**聚点**，记A的聚点的全体为A\',称为**导集**，而$\\bar A=A\'$$\\bigcap$$A$,即为**闭包**。\n若$\\bar A=$A$，称A为X中的**稠密集**。\n\n## def3\n称$N_x^.$={U|U为x的开邻域}为点x$\\in$X的**开邻域系**。\n\n## def4\n称$N_x$={V|${\\exists}$x的开邻域U,s.t.x$\\in$U$\\subset$V}为点x$\\in$X的**邻域系**。\n\n注意def4这中定义方式，用较小的集合来引出较大集合，实则是覆盖关系，将会在后面的笔记中多次接触。\n\n## def5\n设（X,ζ）称为X上的一个拓扑空间，Y$\\subset$X为非空子集，记\n$ζ_Y$={Y$\\bigcap$U|U$\\in$ζ}为Y的子集族，可以证明$ζ_Y$是Y上的一个拓扑，称为由$ζ$诱导的**拓扑**或者**子拓扑**，（Y,$ζ_Y$）为（X,ζ）的**诱导拓扑空间**或者**子拓扑空间**。\n# 几种常见的拓扑空间\n## 距离空间\n   我们熟悉的欧几里得空间则是一种特殊的距离空间。\n   此处定义的距离（度量）即为满足正定性，对称性，三角不等式的映射$\\rho$,称偶对（X,$\\rho$）为X上的度量空间，$\\rho$（x,y）为x,y间的距离。\n  称X是子集B(a;$\\delta$)={x$\\in$X|$\\rho$(x,a)<$\\delta$}为以a为中心，$\\delta$为半径的开球，容易验证X的子集族为$ζ_\\rho$={U|$\\forall$a$\\in$U,存在$\\delta_\\alpha$>0，s.t.开球B(a;$\\delta_\\alpha$)$\\subset$U}为X上的一个拓扑，称为由$\\rho$诱导的拓扑。\n## 平庸拓扑空间\n设X为非空集合，$ζ_平庸$={$\\phi$，X}为X上的拓扑，{X，$ζ_平庸$}为平庸拓扑空间。\n## 离散拓扑空间\n$ζ_离散$={U|U$\\subset$X},记作$2^X$,为X上的一个拓扑，称为离散拓扑，而{X，$ζ_离散$}为离散拓扑空间。\n接下来的三种拓扑空间为举反例时经常要使用的拓扑空间，较为重要。\n## 余有限拓扑空间\n$ζ_余有限$={U|U=X\\C,C是X中有限子集}$\\bigcap$$\\phi$为X上的一个拓扑，称为余有限拓扑，而{X，$ζ_余有限$}为余有限拓扑空间。\n## 余可数拓扑空间\n$ζ_余可数$={U|U=X\\C,C是X中可数子集}$\\bigcap$$\\phi$为X上的一个拓扑，称为余可数拓扑，而{X，$ζ_余可数$}为余可数拓扑空间。\n## 余零度集空间\nN为自然数集，$ζ_N$=$\\phi$$\\bigcap${U|U=N\\C},C满足![``XD6UCTIVWL9681.png](http://108lan.com:8001/images/2020/09/20/fec0c9ed7eac42b08342c2b77cd4c946.png)\n（称C为零密度集，#表示取集合中的个数）\n为X上的一个拓扑。',1,'123456',2),(13,5,'2020-09-20 15:48:40','开源即优秀','windows下的一些好的软件推荐','https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1600598263839&di=19495a3fe49a61b0b35fbb04a9efe1f3&imgtype=0&src=http%3A%2F%2Fpic.51yuansu.com%2Fpic3%2Fcover%2F03%2F65%2F24%2F5bdff5304ed51_610.jpg','<p><h3>目录</h3><ul><li><a href=\"#_3\">软件推荐</a></li><ul><li><a href=\"#geek_4\">卸载软件的软件：geek</a></li><li><a href=\"#markdowntypora_7\">markdown编辑器：typora</a></li><li><a href=\"#Notepad_11\">代码文本编辑器：Notepad++</a></li><li><a href=\"#drawio_13\">绘图软件：drawio</a></li><li><a href=\"#Captura_29\">录屏软件：Captura</a></li><li><a href=\"#handbrake_33\">视频转码工具：handbrake</a></li><li><a href=\"#mkvmp4_37\">mkv格式快速转mp4</a></li><li><a href=\"#PDFSumatraPDF_43\">PDF阅读器：SumatraPDF</a></li><li><a href=\"#7zip_51\">解压软件：7-zip</a></li><li><a href=\"#Snipaste_58\">截图工具：Snipaste</a></li><li><a href=\"#QuickLook_68\">快速预览工具：QuickLook</a></li><li><a href=\"#potplayer_75\">视频播放器：potplayer</a></li><li><a href=\"#FDMIDM_82\">多线程下载工具：FDM/IDM</a></li><li><a href=\"#DismCCleaner_95\">清理工具：Dism++/CCleaner</a></li><li><a href=\"#Edgechromium_107\">浏览器：Edge（chromium内核）</a></li><li><a href=\"#Team_Viewer_126\">远程控制软件：Team Viewer/快速助手</a></li><li><a href=\"#SpaceSniffer_140\">磁盘检测工具：SpaceSniffer</a></li><li><a href=\"#Autoruns_147\">启动项检测工具：Autoruns</a></li><li><a href=\"#trafficmonitor_155\">网速显示工具：trafficmonitor</a></li><li><a href=\"#Fiddler_162\">抓包工具：Fiddler</a></li><li><a href=\"#__167\">杀毒软件 ：火绒</a></li><li><a href=\"#WePE_174\">装机工具：WePE</a></li></ul></ul></p>\n<h1><a id=\"_3\"></a>软件推荐</h1>\n<h2><a id=\"geek_4\"></a>卸载软件的软件：geek</h2>\n<p><a href=\"https://geekuninstaller.com/\" target=\"_blank\">官网下载地址</a></p>\n<ul>\n<li>清理注册表，清理残留非常好</li>\n</ul>\n<h2><a id=\"markdowntypora_7\"></a>markdown编辑器：typora</h2>\n<p><a href=\"https://www.typora.io/\" target=\"_blank\">下载地址</a></p>\n<h2><a id=\"Notepad_11\"></a>代码文本编辑器：Notepad++</h2>\n<p><a href=\"https://notepad-plus-plus.org/\" target=\"_blank\">官网下载地址</a></p>\n<h2><a id=\"drawio_13\"></a>绘图软件：drawio</h2>\n<p><a href=\"https://app.diagrams.net/\" target=\"_blank\">在线版使用地址</a><br />\n<a href=\"https://github.com/jgraph/drawio-desktop/releases\" target=\"_blank\">离线版下载地址</a></p>\n<ul>\n<li>画流程图很好的软件</li>\n<li>不局限于流程图</li>\n<li>开源的  ProcessOn/迅捷绘图</li>\n<li>可以选择在线版和离线版</li>\n<li>底层基于JavaScript，可跨平台</li>\n<li>github开源</li>\n<li>建议使用，新版的Edge安装为应用<br />\n<img src=\"https://img-blog.csdnimg.cn/20200725092316859.png\" alt=\"1234\" /></li>\n</ul>\n<h2><a id=\"Captura_29\"></a>录屏软件：Captura</h2>\n<p><a href=\"https://mathewsachin.github.io/Captura/\" target=\"_blank\">官网下载地址</a></p>\n<ul>\n<li>小，开源</li>\n</ul>\n<h2><a id=\"handbrake_33\"></a>视频转码工具：handbrake</h2>\n<p><a href=\"https://handbrake.fr/downloads.php\" target=\"_blank\">下载地址</a></p>\n<ul>\n<li>跨平台</li>\n</ul>\n<h2><a id=\"mkvmp4_37\"></a>mkv格式快速转mp4</h2>\n<ul>\n<li>如果你需要剪辑视频，pr又不支持mkv格式，这个软件可以帮你快速转换格式，3G的视频大概只需要5分钟<br />\n<a href=\"https://github.com/gavinbeatty/mkvtomp4\" target=\"_blank\">github项目地址</a></li>\n</ul>\n<h2><a id=\"PDFSumatraPDF_43\"></a>PDF阅读器：SumatraPDF</h2>\n<p><a href=\"https://www.sumatrapdfreader.org/download-free-pdf-viewer.html\" target=\"_blank\">下载地址</a></p>\n<ul>\n<li>开源</li>\n<li>轻量（5-6M）</li>\n<li>反应快</li>\n</ul>\n<h2><a id=\"7zip_51\"></a>解压软件：7-zip</h2>\n<p><a href=\"https://sparanoid.com/lab/7z/\" target=\"_blank\">中文下载网站</a><br />\n<a href=\"https://www.7-zip.org/\" target=\"_blank\">官方下载网站</a></p>\n<ul>\n<li>用过这个解压工具后再也没换过了</li>\n<li>开源，无广告，体积小，支持格式多<br />\n<img src=\"https://img-blog.csdnimg.cn/20200530082059266.png\" alt=\"1\" /></li>\n</ul>\n<h2><a id=\"Snipaste_58\"></a>截图工具：Snipaste</h2>\n<p><a href=\"https://www.microsoft.com/en-us/p/snipaste/9p1wxpkb68kx?cid=snipaste&amp;activetab=pivot:overviewtab\" target=\"_blank\">微软官网</a></p>\n<ul>\n<li>体积小，快速</li>\n<li>被收录在微软商店里</li>\n<li>可以重微软商店中下载</li>\n<li>快捷键设置</li>\n<li>图片编辑方便</li>\n<li>和QQ的截屏工具类似<br />\n<img src=\"https://img-blog.csdnimg.cn/20200530085247131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70\" alt=\"2344\" /></li>\n</ul>\n<h2><a id=\"QuickLook_68\"></a>快速预览工具：QuickLook</h2>\n<ul>\n<li>MAC的空格预览替代品</li>\n<li>收录在微软商店中</li>\n<li>扩展功能访问Github</li>\n</ul>\n<p><a href=\"https://github.com/QL-Win/QuickLook\" target=\"_blank\">Github项目地址</a><br />\n<img src=\"https://img-blog.csdnimg.cn/20200530091351151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<h2><a id=\"potplayer_75\"></a>视频播放器：potplayer</h2>\n<ul>\n<li>好看，小</li>\n<li>吊打其他播放器</li>\n</ul>\n<p><a href=\"https://potplayer.en.softonic.com/\" target=\"_blank\">官网下载地址</a></p>\n<h2><a id=\"FDMIDM_82\"></a>多线程下载工具：FDM/IDM</h2>\n<p><strong>开源版-FDM</strong></p>\n<ul>\n<li>免费开源，多线程下载工具</li>\n</ul>\n<p><a href=\"https://www.freedownloadmanager.org/zh/\" target=\"_blank\">官网下载网址</a><br />\n<img src=\"https://img-blog.csdnimg.cn/20200530084700542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70\" alt=\"233\" /></p>\n<p><strong>付费版-IDM</strong><br />\n<a href=\"http://www.internetdownloadmanager.com/\" target=\"_blank\">官网下载网址</a></p>\n<ul>\n<li>可集成到浏览器等多种下载场景</li>\n<li>有试用时间，如果不愿意付费就使用上一个。</li>\n</ul>\n<h2><a id=\"DismCCleaner_95\"></a>清理工具：Dism++/CCleaner</h2>\n<ul>\n<li>启动快，体积小，功能强大</li>\n<li>功能比较强大<br />\n<a href=\"https://www.chuyu.me/zh-Hans/index.html\" target=\"_blank\">官网下载地址</a></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200530085627333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70\" alt=\"45\" /></p>\n<p><strong>CCleaner</strong><br />\n<a href=\"https://www.ccleaner.com/\" target=\"_blank\">官网下载地址</a></p>\n<h2><a id=\"Edgechromium_107\"></a>浏览器：Edge（chromium内核）</h2>\n<p><strong>扩展脚本推荐：</strong></p>\n<ol>\n<li>Tampermonkey：油猴脚本，浏览器必备</li>\n<li>AdBlock ：最佳广告拦截工具</li>\n<li>图片助手(ImageAssistant) 批量图片下载器</li>\n<li>eHelper(前端助手)</li>\n<li>GiteeTree</li>\n<li>JSON Beautifier &amp; Editor</li>\n<li>Regex Search</li>\n<li>User Agents for Microsoft Edge</li>\n</ol>\n<p><strong>基于Edge的：网易云</strong></p>\n<ul>\n<li>最近才发现的，网页版应用</li>\n<li>可以把一个网页作为应用安装</li>\n<li>轻量，便捷</li>\n<li>不跳转页面的网址才好用<br />\n<img src=\"https://img-blog.csdnimg.cn/2020053009285548.png\" alt=\"122\" /></li>\n</ul>\n<h2><a id=\"Team_Viewer_126\"></a>远程控制软件：Team Viewer/快速助手</h2>\n<p><strong>Team Viewer</strong><br />\n<a href=\"https://www.teamviewer.cn/cn/\" target=\"_blank\">官网下载地址</a></p>\n<ul>\n<li>相比其他远程软件，这个个人版是免费的</li>\n<li>而且体验很好，快捷键画面都没得说，文件传输，角色切换都很方便<br />\n<img src=\"https://img-blog.csdnimg.cn/20200530083443436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70\" alt=\"2\" /><br />\n<strong>快速助手</strong></li>\n<li>Windows自带远程协助工具，免安装</li>\n<li>体验还不错，但是角色切换不方便</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200530083827799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70\" alt=\"12\" /></p>\n<h2><a id=\"SpaceSniffer_140\"></a>磁盘检测工具：SpaceSniffer</h2>\n<p><a href=\"https://baike.baidu.com/item/SpaceSniffer/3498384?fr=aladdin\" target=\"_blank\">百度百科介绍</a><br />\n<a href=\"https://spacesniffer.en.softonic.com/\" target=\"_blank\">官网下载工具</a></p>\n<ul>\n<li>清理C盘必备<br />\n<img src=\"https://img-blog.csdnimg.cn/20200530084215833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70\" alt=\"45\" /></li>\n</ul>\n<h2><a id=\"Autoruns_147\"></a>启动项检测工具：Autoruns</h2>\n<p><a href=\"https://baike.baidu.com/item/AutoRuns/8449010?fr=aladdin\" target=\"_blank\">百度百科介绍</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/sysinternals/downloads/autoruns\" target=\"_blank\">微软官方下载网址</a></p>\n<ul>\n<li>它能用于显示在 Windows启动或登录时自动运行的程序，并且允许用户有选择地禁用或删除它们<br />\n<img src=\"https://img-blog.csdnimg.cn/20200530082554942.png\" alt=\"在这里插入图片描述\" /></li>\n</ul>\n<h2><a id=\"trafficmonitor_155\"></a>网速显示工具：trafficmonitor</h2>\n<ul>\n<li>开源，体积小</li>\n</ul>\n<p><a href=\"https://github.com/zhongyang219/TrafficMonitor\" target=\"_blank\">Github下载地址</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200530085912382.png\" alt=\"在这里插入图片描述\" /></p>\n<h2><a id=\"Fiddler_162\"></a>抓包工具：Fiddler</h2>\n<p><a href=\"https://baike.baidu.com/item/Fiddler/2868968?fr=aladdin\" target=\"_blank\">百度百科介绍</a><br />\n<a href=\"https://www.telerik.com/fiddler\" target=\"_blank\">官网下载工具</a><br />\n<img src=\"https://img-blog.csdnimg.cn/20200530090133754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70\" alt=\"23\" /></p>\n<h2><a id=\"__167\"></a>杀毒软件 ：火绒</h2>\n<ul>\n<li>没有必要装</li>\n</ul>\n<ol>\n<li>火绒<br />\n<a href=\"https://www.huorong.cn/\" target=\"_blank\">官网下载地址</a></li>\n</ol>\n<h2><a id=\"WePE_174\"></a>装机工具：WePE</h2>\n<p><a href=\"http://www.wepe.com.cn/download.html\" target=\"_blank\">下载地址</a></p>\n','\n@[toc](目录)\n\n# 软件推荐\n## 卸载软件的软件：geek\n[官网下载地址](https://geekuninstaller.com/)\n- 清理注册表，清理残留非常好\n## markdown编辑器：typora\n[下载地址](https://www.typora.io/) \n\n\n## 代码文本编辑器：Notepad++\n[官网下载地址](https://notepad-plus-plus.org/)\n## 绘图软件：drawio\n\n[在线版使用地址](https://app.diagrams.net/)\n[离线版下载地址](https://github.com/jgraph/drawio-desktop/releases)\n\n- 画流程图很好的软件\n- 不局限于流程图\n- 开源的  ProcessOn/迅捷绘图\n- 可以选择在线版和离线版\n- 底层基于JavaScript，可跨平台\n- github开源\n- 建议使用，新版的Edge安装为应用\n![1234](https://img-blog.csdnimg.cn/20200725092316859.png)\n\n\n\n## 录屏软件：Captura\n[官网下载地址](https://mathewsachin.github.io/Captura/)\n- 小，开源\n\n## 视频转码工具：handbrake\n[下载地址](https://handbrake.fr/downloads.php)\n- 跨平台\n\n## mkv格式快速转mp4\n- 如果你需要剪辑视频，pr又不支持mkv格式，这个软件可以帮你快速转换格式，3G的视频大概只需要5分钟\n[github项目地址](https://github.com/gavinbeatty/mkvtomp4)\n\n\n\n## PDF阅读器：SumatraPDF\n\n[下载地址](https://www.sumatrapdfreader.org/download-free-pdf-viewer.html)\n\n- 开源\n- 轻量（5-6M）\n- 反应快\n\n## 解压软件：7-zip\n[中文下载网站](https://sparanoid.com/lab/7z/)\n[官方下载网站](https://www.7-zip.org/)\n\n- 用过这个解压工具后再也没换过了\n- 开源，无广告，体积小，支持格式多\n![1](https://img-blog.csdnimg.cn/20200530082059266.png)\n## 截图工具：Snipaste\n[微软官网](https://www.microsoft.com/en-us/p/snipaste/9p1wxpkb68kx?cid=snipaste&activetab=pivot:overviewtab)\n\n- 体积小，快速\n- 被收录在微软商店里\n- 可以重微软商店中下载\n- 快捷键设置\n- 图片编辑方便\n- 和QQ的截屏工具类似\n![2344](https://img-blog.csdnimg.cn/20200530085247131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70)\n## 快速预览工具：QuickLook\n- MAC的空格预览替代品\n- 收录在微软商店中\n- 扩展功能访问Github\n\n[Github项目地址](https://github.com/QL-Win/QuickLook)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200530091351151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70)\n## 视频播放器：potplayer\n- 好看，小\n- 吊打其他播放器\n\n[官网下载地址](https://potplayer.en.softonic.com/)\n\n\n## 多线程下载工具：FDM/IDM\n**开源版-FDM**\n- 免费开源，多线程下载工具\n\n[官网下载网址](https://www.freedownloadmanager.org/zh/)\n![233](https://img-blog.csdnimg.cn/20200530084700542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70)\n\n**付费版-IDM**\n[官网下载网址](http://www.internetdownloadmanager.com/)\n\n- 可集成到浏览器等多种下载场景\n- 有试用时间，如果不愿意付费就使用上一个。\n\n## 清理工具：Dism++/CCleaner\n\n- 启动快，体积小，功能强大\n- 功能比较强大\n[官网下载地址](https://www.chuyu.me/zh-Hans/index.html) \n\n![45](https://img-blog.csdnimg.cn/20200530085627333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70)\n\n**CCleaner**\n[官网下载地址](https://www.ccleaner.com/)\n\n\n## 浏览器：Edge（chromium内核）\n\n**扩展脚本推荐：**\n1. Tampermonkey：油猴脚本，浏览器必备\n2. AdBlock ：最佳广告拦截工具\n3. 图片助手(ImageAssistant) 批量图片下载器\n4. eHelper(前端助手)\n5. GiteeTree\n6. JSON Beautifier & Editor\n7. Regex Search\n8. User Agents for Microsoft Edge\n\n\n**基于Edge的：网易云**\n- 最近才发现的，网页版应用\n- 可以把一个网页作为应用安装\n- 轻量，便捷\n- 不跳转页面的网址才好用\n![122](https://img-blog.csdnimg.cn/2020053009285548.png)\n## 远程控制软件：Team Viewer/快速助手\n**Team Viewer**\n[官网下载地址](https://www.teamviewer.cn/cn/)\n\n- 相比其他远程软件，这个个人版是免费的\n- 而且体验很好，快捷键画面都没得说，文件传输，角色切换都很方便\n![2](https://img-blog.csdnimg.cn/20200530083443436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70)\n**快速助手**\n- Windows自带远程协助工具，免安装\n- 体验还不错，但是角色切换不方便\n\n![12](https://img-blog.csdnimg.cn/20200530083827799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70)\n\n\n## 磁盘检测工具：SpaceSniffer\n[百度百科介绍](https://baike.baidu.com/item/SpaceSniffer/3498384?fr=aladdin)\n[官网下载工具](https://spacesniffer.en.softonic.com/)\n- 清理C盘必备\n![45](https://img-blog.csdnimg.cn/20200530084215833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70)\n\n\n## 启动项检测工具：Autoruns\n[百度百科介绍](https://baike.baidu.com/item/AutoRuns/8449010?fr=aladdin)\n\n[微软官方下载网址](https://docs.microsoft.com/zh-cn/sysinternals/downloads/autoruns)\n\n- 它能用于显示在 Windows启动或登录时自动运行的程序，并且允许用户有选择地禁用或删除它们\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200530082554942.png)\n\n## 网速显示工具：trafficmonitor\n- 开源，体积小\n\n\n[Github下载地址](https://github.com/zhongyang219/TrafficMonitor)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200530085912382.png)\n## 抓包工具：Fiddler\n[百度百科介绍](https://baike.baidu.com/item/Fiddler/2868968?fr=aladdin)\n[官网下载工具](https://www.telerik.com/fiddler)\n![23](https://img-blog.csdnimg.cn/20200530090133754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70)\n\n## 杀毒软件 ：火绒\n- 没有必要装\n\n1. 火绒\n[官网下载地址](https://www.huorong.cn/)\n\n\n## 装机工具：WePE\n[下载地址](http://www.wepe.com.cn/download.html)\n',2,'123456',2),(14,5,'2020-09-23 22:19:13','初识汇编','学习汇编记录','http://108lan.com:8001/images/2020/09/23/9e314ba563dd4d0fb42c550dccbea7fd.png','<p><h3>文章目录</h3><ul><li><a href=\"#_2\">汇编</a></li><ul><li><a href=\"#_4\">计算机语言</a></li><li><a href=\"#_22\">数据宽度</a></li><li><a href=\"#_42\">位运算</a></li><li><a href=\"#_98\">汇编</a></li><ul><li><a href=\"#_102\">寄存器</a></li><li><a href=\"#_117\">内存</a></li></ul></ul></ul></p>\n<h1><a id=\"_2\"></a>汇编</h1>\n<h2><a id=\"_4\"></a>计算机语言</h2>\n<ul>\n<li>计算机是个傻子，只认识0和1，它没有思考，只是按照我们输入的01跑</li>\n<li>最早的编程人员，用着穿孔卡带和计算机交流。</li>\n<li>一串一串的01，让我们怎么也记不住。</li>\n<li>助记符的产生，是那么的合理。</li>\n<li>这些助记符就是汇编语言了，一般用于底层，单片机的编写</li>\n</ul>\n<blockquote>\n<p>加：INC<br />\n减：DEC<br />\n乘：MUL<br />\n除：DIV</p>\n</blockquote>\n<p>加密程序：使用自己定义的进制：进制的加密<br />\n无论什么进制，本身都是有一套完美的运算体系，我们都可以通过列表的方式将他们计算出来<br />\n寄存器、内存、位！底层的每一位都有含义。</p>\n<h2><a id=\"_22\"></a>数据宽度</h2>\n<p>计算机：内存！给数据增加宽度</p>\n<ul>\n<li>bit：1位</li>\n<li>Byte：8位</li>\n<li>Word：16位</li>\n<li>DWord：32位</li>\n</ul>\n<p>C、C++、java都需要定义数据类型，计算机底层需要我们给这些数据定义宽度</p>\n<ul>\n<li>位 ：0 1</li>\n<li>字节：0-0xff</li>\n<li>字：0-0xffff</li>\n<li>双字：0-0xffffffff</li>\n</ul>\n<p>在计算机中，每一个数据都要定义类型，给它定义宽度，在内存中的宽度</p>\n<ul>\n<li>无符号数：都是数</li>\n<li>有符号数：最高位是符号位1（负数）、0（正数）</li>\n</ul>\n<h2><a id=\"_42\"></a>位运算</h2>\n<p>计算机可以存储所有的数字</p>\n<ol>\n<li>与（and，&amp;）：同为1才为1</li>\n<li>或（or，|）：有一个1取1</li>\n<li>非（not，!）：取反，单目运算符</li>\n<li>异或（xor，^）：不相同则为1</li>\n<li>左移（shl，&lt;&lt;）：高位丢弃，所有位左移</li>\n<li>右移（shr，&gt;&gt;）：地位丢弃，高位根据符号位补相同位</li>\n</ol>\n<p><mark>位运算实现加减乘除</mark><br />\n基本数学都是建立在加减乘除上</p>\n<ul>\n<li>计算机内部计算加法的过程</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">4+5=?\n\n0000 0100\n0000 0101 \n----------(加法，计算机不会加法)\n0000 1001\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 计算机只会与或非异或，把加法转换为位运算</span>\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 第一步：异或运算（如果不考虑进位，这里就实现了）</span>\n0000 0100\n0000 0101 \n----------（异或）\n0000 0001\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 第二步：与运算（判断进位，有进位则为1）</span>\n0000 0100\n0000 0101 \n-----------（与）\n0000 0100\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 第三步：进位左移（将进位数字与对应位对齐）</span>\n0000 0100\n-----------（左移）\n0000 1000\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 第四步：异或（将进位数字与加法数字异或得到结果）</span>\n0000 0001\n0000 1000\n-----------（异或）\n0000 1001\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 第五步：与运算（判断加进位后有没有再进位）</span>\n0000 0001\n0000 1000\n----------（与）\n0000 0000\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> 如果不为0重复上述过程，最终结果为与运算为0的结果</span>\n</code></div></pre>\n<h2><a id=\"_98\"></a>汇编</h2>\n<ul>\n<li>OD界面：<br />\n<img src=\"https://img-blog.csdnimg.cn/20200920143219782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></li>\n</ul>\n<h3><a id=\"_102\"></a>寄存器</h3>\n<p>储存数据：CPU&gt;内存&gt;硬盘</p>\n<p><mark>通用寄存器</mark> ：可以存储任何的值</p>\n<ul>\n<li>32位的通用寄存器只有8个</li>\n<li>存值范围：0-FFFFFFFF</li>\n<li>计算机向寄存器中存值：对于二进制来说，直接存值，汇编中用mov指令（mov 地址 数据/地址）</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200920143702201.png#pic_center\" alt=\"1212\" /></p>\n<ul>\n<li>寄存器在不同位数计算机中对应的名称</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/2020092014472324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></p>\n<h3><a id=\"_117\"></a>内存</h3>\n<ul>\n<li>寄存器很小，不够用。所以数据要放到内存</li>\n<li>每个进程都有4G的内存空间</li>\n<li>程序真正运行的时候才会用到物理内存</li>\n</ul>\n<p>1B = 8bit<br />\n1kB = 1024B<br />\n1MB = 1024kB<br />\n1G = 1024MB</p>\n<p>计算机中内存地址很多，空间很大。</p>\n<p>== 内存地址==：</p>\n<ul>\n<li>给每个空间分配一个地址</li>\n<li>32位是8个16进制的值</li>\n<li>32位寻址能力是4G</li>\n</ul>\n<p>内存地址：<br />\n<img src=\"https://img-blog.csdnimg.cn/20200920150108448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"121\" /></p>\n<ul>\n<li>往内存中写东西：不是任意地址都可以写东西，要申请使用，只有程序申请过的内存地址我们才能使用</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 使用汇编忘内存中写入数据</span>\nmov 数据宽度 内存地址,数据\nmov byte/word/dword/qword ptr ds:[0019FF74],1\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> ptr ds:[0019FF74]：内存地址的一种固定写法</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> 传递的值达大小一定要和数据宽度相等</span>\n</code></div></pre>\n<p>内存地址有很多写法：</p>\n<ul>\n<li>ds:[0019FF74]：直接写地址</li>\n<li>ds:[0019FF74+4]：内存地址偏移</li>\n<li>ds:[eax]：写寄存器地址</li>\n<li>ds:[eax+4]：寄存器偏移</li>\n<li>数组[]：\n<ul>\n<li>ds:p[reg+reg*{1,2,4,8}]</li>\n<li>ds:p[reg+reg*{1,2,4,8}+4]：偏移</li>\n</ul>\n</li>\n</ul>\n','@[toc](文章目录)\n\n# 汇编\n\n## 计算机语言\n\n- 计算机是个傻子，只认识0和1，它没有思考，只是按照我们输入的01跑\n- 最早的编程人员，用着穿孔卡带和计算机交流。\n- 一串一串的01，让我们怎么也记不住。\n- 助记符的产生，是那么的合理。\n- 这些助记符就是汇编语言了，一般用于底层，单片机的编写\n\n> 加：INC \n> 减：DEC\n> 乘：MUL\n> 除：DIV\n\n加密程序：使用自己定义的进制：进制的加密\n无论什么进制，本身都是有一套完美的运算体系，我们都可以通过列表的方式将他们计算出来\n寄存器、内存、位！底层的每一位都有含义。\n\n\n## 数据宽度\n计算机：内存！给数据增加宽度\n- bit：1位\n- Byte：8位\n- Word：16位\n- DWord：32位\n\nC、C++、java都需要定义数据类型，计算机底层需要我们给这些数据定义宽度\n\n- 位 ：0 1\n- 字节：0-0xff\n- 字：0-0xffff\n- 双字：0-0xffffffff\n\n在计算机中，每一个数据都要定义类型，给它定义宽度，在内存中的宽度\n\n- 无符号数：都是数\n- 有符号数：最高位是符号位1（负数）、0（正数）\n\n\n## 位运算\n计算机可以存储所有的数字\n\n1. 与（and，&）：同为1才为1\n2. 或（or，|）：有一个1取1\n3. 非（not，!）：取反，单目运算符\n4. 异或（xor，^）：不相同则为1\n5. 左移（shl，<<）：高位丢弃，所有位左移\n6. 右移（shr，>>）：地位丢弃，高位根据符号位补相同位\n\n==位运算实现加减乘除==\n基本数学都是建立在加减乘除上\n- 计算机内部计算加法的过程\n\n```shell\n4+5=?\n\n0000 0100\n0000 0101 \n----------(加法，计算机不会加法)\n0000 1001\n\n# 计算机只会与或非异或，把加法转换为位运算\n\n# 第一步：异或运算（如果不考虑进位，这里就实现了）\n0000 0100\n0000 0101 \n----------（异或）\n0000 0001\n\n# 第二步：与运算（判断进位，有进位则为1）\n0000 0100\n0000 0101 \n-----------（与）\n0000 0100\n\n# 第三步：进位左移（将进位数字与对应位对齐）\n0000 0100\n-----------（左移）\n0000 1000\n\n# 第四步：异或（将进位数字与加法数字异或得到结果）\n0000 0001\n0000 1000\n-----------（异或）\n0000 1001\n\n# 第五步：与运算（判断加进位后有没有再进位）\n0000 0001\n0000 1000\n----------（与）\n0000 0000\n\n# 如果不为0重复上述过程，最终结果为与运算为0的结果\n```\n\n## 汇编\n- OD界面：\n![12121](https://img-blog.csdnimg.cn/20200920143219782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n### 寄存器\n储存数据：CPU>内存>硬盘\n\n==通用寄存器== ：可以存储任何的值\n\n- 32位的通用寄存器只有8个\n- 存值范围：0-FFFFFFFF\n- 计算机向寄存器中存值：对于二进制来说，直接存值，汇编中用mov指令（mov 地址 数据/地址）\n\n![1212](https://img-blog.csdnimg.cn/20200920143702201.png#pic_center)\n\n- 寄存器在不同位数计算机中对应的名称\n\n![12121](https://img-blog.csdnimg.cn/2020092014472324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n### 内存\n\n- 寄存器很小，不够用。所以数据要放到内存\n- 每个进程都有4G的内存空间\n- 程序真正运行的时候才会用到物理内存\n\n\n1B = 8bit\n1kB = 1024B\n1MB = 1024kB\n1G = 1024MB\n\n计算机中内存地址很多，空间很大。\n\n== 内存地址==：\n- 给每个空间分配一个地址\n- 32位是8个16进制的值\n- 32位寻址能力是4G\n\n内存地址：\n![121](https://img-blog.csdnimg.cn/20200920150108448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n- 往内存中写东西：不是任意地址都可以写东西，要申请使用，只有程序申请过的内存地址我们才能使用\n\n~~~shell\n# 使用汇编忘内存中写入数据\nmov 数据宽度 内存地址,数据\nmov byte/word/dword/qword ptr ds:[0019FF74],1\n# ptr ds:[0019FF74]：内存地址的一种固定写法\n# 传递的值达大小一定要和数据宽度相等\n~~~\n\n内存地址有很多写法：\n- ds:[0019FF74]：直接写地址\n- ds:[0019FF74+4]：内存地址偏移\n- ds:[eax]：写寄存器地址\n- ds:[eax+4]：寄存器偏移\n- 数组[]：\n  - ds:p[reg+reg*{1,2,4,8}]\n  - ds:p[reg+reg*{1,2,4,8}+4]：偏移\n\n\n\n',2,'123456',2),(20,5,'2020-10-02 17:06:20','再识汇编','深入学习汇编语言','http://108lan.com:8001/images/2020/10/02/24c93c6221f04b2e806481a0d27f9ea6.png','<p><h3>目录</h3><ul><li><a href=\"#_1\">汇编</a></li><ul><li><a href=\"#_3\">绪论</a></li><ul><li><a href=\"#1__10\">1. 汇编语言的执行过程</a></li><li><a href=\"#2__12\">2. 计算机组成</a></li><li><a href=\"#3__18\">3. 指令和数据的表示</a></li><li><a href=\"#4__26\">4. 计算机中的储存单元</a></li><li><a href=\"#5__30\">5. 计算机中的总线</a></li><li><a href=\"#6_X86_40\">6. X86性能</a></li><li><a href=\"#7_CPU_44\">7. CPU对储存器的读写</a></li><li><a href=\"#8__51\">8. 内存地址空间</a></li><li><a href=\"#9_Dos_58\">9. 搭建汇编语言实践环境（Dos模拟器）</a></li></ul><li><a href=\"#_68\">访问寄存器和内存</a></li><ul><li><a href=\"#1_CPU_69\">1. CPU的组成</a></li><li><a href=\"#2_CPU_77\">2. 寄存器是CPU的内部信息存储单元</a></li><li><a href=\"#3_AXBXCXDX_81\">3. 通用寄存器：AX，BX，CX，DX</a></li><li><a href=\"#4_80868_89\">4. 8086上一代的寄存器是8位的</a></li><li><a href=\"#5_movadd_100\">5. mov和add指令</a></li><li><a href=\"#6__105\">6. 确定物理地址</a></li><li><a href=\"#7_CPU_119\">7. 内存的分段表示法：内存并没有分段，段的划分来自于CPU</a></li><li><a href=\"#8_DebugDOS_126\">8. Debug：DOS系统中著名的调试程序</a></li><li><a href=\"#9_CSIP_161\">9. CS/IP两个关键的寄存器</a></li><li><a href=\"#10_jmp_167\">10. jmp指令</a></li><li><a href=\"#11_DSaddress_175\">11. 段寄存器DS和[address]实现字的传送</a></li><li><a href=\"#12__202\">12. 栈及其栈操作</a></li><li><a href=\"#13__231\">13. 段总结</a></li></ul><li><a href=\"#_238\">汇编语言程序</a></li><ul><li><a href=\"#1__240\">1. 汇编语言编写源程序</a></li><li><a href=\"#2__261\">2. 编写第一个程序</a></li><li><a href=\"#3__285\">3. 源程序到程序运行</a></li><li><a href=\"#4_debug_301\">4. 使用debug跟踪程序的执行</a></li><li><a href=\"#5__308\">5. [...]与(...)的约定</a></li><li><a href=\"#6_Loop_317\">6. Loop指令</a></li><li><a href=\"#7__329\">7. 将数据、代码、栈放入不同段</a></li></ul><li><a href=\"#_376\">内存寻址方式</a></li><ul><li><a href=\"#1__379\">1. 处理字符串</a></li><li><a href=\"#2_bxidata_430\">2. [bx+idata]方式寻址</a></li><li><a href=\"#3_SIDI_445\">3. SI和DI寄存器（变址寄存器）</a></li><li><a href=\"#4_bxsibxdi_480\">4. [bx+si]和[bx+di]方式寻址</a></li><li><a href=\"#5_dup_492\">5. 用dup设置内存空间</a></li></ul><li><a href=\"#_500\">流程转移与子程序</a></li><ul><li><a href=\"#1_offset_501\">1. 操作符offset</a></li><li><a href=\"#2_jmp_526\">2. jmp指令</a></li><li><a href=\"#3_callret_595\">3. call指令和ret指令</a></li><li><a href=\"#4_DF_646\">4. DF标志和段传送指令</a></li></ul><li><a href=\"#_744\">中断及外部设备的操作</a></li><ul><li><a href=\"#1__745\">1. 移位指令</a></li><li><a href=\"#2__758\">2. 操作显示原理</a></li><li><a href=\"#3__804\">3. 描述内存单元的标号</a></li><li><a href=\"#4__811\">4. 直接定址表</a></li></ul><li><a href=\"#_816\">高级汇编语言技术（宏汇编）</a></li><ul><li><a href=\"#1__819\">1. 子程序的另一种写法</a></li><li><a href=\"#2__828\">2. 程序的多文件组织</a></li><li><a href=\"#3__839\">3. 汇编指令汇总</a></li><li><a href=\"#4__883\">4. 汇编伪操作汇总</a></li><li><a href=\"#5__918\">5. 汇编操作符汇总</a></li><li><a href=\"#6__928\">6. 汇编过程</a></li></ul></ul></ul></p>\n<h1><a id=\"_1\"></a>汇编</h1>\n<h2><a id=\"_3\"></a>绪论</h2>\n<ul>\n<li>程序语言的老祖宗</li>\n<li>汇编语言的效率无可替代</li>\n<li>用于底层：计算机及周围设备的驱动程序</li>\n<li>汇编语言的主体是汇编指令（助记符）</li>\n</ul>\n<h3><a id=\"1__10\"></a>1. 汇编语言的执行过程</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20200925145558594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"121212\" /></p>\n<h3><a id=\"2__12\"></a>2. 计算机组成</h3>\n<ul>\n<li>CPU：</li>\n<li>总线</li>\n<li>内存</li>\n<li>扩展槽（连接外部设备）</li>\n</ul>\n<h3><a id=\"3__18\"></a>3. 指令和数据的表示</h3>\n<ul>\n<li>计算机中的数据和指令，储存在内存或磁盘中</li>\n<li>数据和指令都是二进制信息</li>\n<li>数据的表示：二进制B、十六进制H、八进制O、十进制D</li>\n<li>数据量：B、KB、MB、GB、TB</li>\n</ul>\n<h3><a id=\"4__26\"></a>4. 计算机中的储存单元</h3>\n<ul>\n<li>存储器被划分为若干个存储单元，每个存储单元从0开始顺序编码</li>\n</ul>\n<h3><a id=\"5__30\"></a>5. 计算机中的总线</h3>\n<ul>\n<li>计算机中专门连接CPU和其他芯片的导线，通常成为总线</li>\n<li>物理上：一根根导线的集合</li>\n<li>逻辑上：\n<ul>\n<li>地址总线：CPU通过地址总线来指定储存单元，宽度决定可寻址的储存单元的大小（N根总线宽度为N，寻址空间为2^N）</li>\n<li>数据总线：CPU通过内存或其他器件之间数据传输是通过数据总线实现的，宽度觉得速度</li>\n<li>控制总线：CPU通过控制总线对外部器件进行控制，宽度决定对外部器件的控制能力</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"6_X86_40\"></a>6. X86性能</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20200925151208147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></p>\n<h3><a id=\"7_CPU_44\"></a>7. CPU对储存器的读写</h3>\n<p>CPU想要进行数据读写，必须要和外部器件进行三类信息的数据交换</p>\n<ul>\n<li>存储单元的地址（地址信息）</li>\n<li>器件的选择，读或写命令（控制信息）</li>\n<li>读或写的数据（数据信息）</li>\n</ul>\n<h3><a id=\"8__51\"></a>8. 内存地址空间</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20200925152038225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"1212121\" /></p>\n<ul>\n<li>把各类储存器看作一个逻辑存储–统一编址</li>\n<li>所有的物理存储器被看作一个由若干存储单元组成的逻辑存储器</li>\n<li>每个物理储存器在这个逻辑储存器中占有一个地址段<br />\n<img src=\"https://img-blog.csdnimg.cn/20200925152608578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"1212\" /></li>\n</ul>\n<h3><a id=\"9_Dos_58\"></a>9. 搭建汇编语言实践环境（Dos模拟器）</h3>\n<ul>\n<li>DOSBox：下载地址</li>\n</ul>\n<p>百度网盘 ：<a href=\"https://pan.baidu.com/s/17cOEc9MU2N7xrF8W43JeJA\" target=\"_blank\">https://pan.baidu.com/s/17cOEc9MU2N7xrF8W43JeJA</a><br />\n提取码 ：m06f</p>\n<h2><a id=\"_68\"></a>访问寄存器和内存</h2>\n<h3><a id=\"1_CPU_69\"></a>1. CPU的组成</h3>\n<ul>\n<li>运算器进行信息处理</li>\n<li>寄存器进行信息存储</li>\n<li>控制器协调各种器件进行工作</li>\n<li>内部总线协调各种器件之间的联系</li>\n</ul>\n<h3><a id=\"2_CPU_77\"></a>2. 寄存器是CPU的内部信息存储单元</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/2020092615221749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></p>\n<h3><a id=\"3_AXBXCXDX_81\"></a>3. 通用寄存器：AX，BX，CX，DX</h3>\n<ul>\n<li>一个16位寄存器储存一个16位的数据</li>\n<li>最大值2<sup>16</sup>-1（FFFF）</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/202009261525208.png#pic_center\" alt=\"1212\" /></p>\n<h3><a id=\"4_80868_89\"></a>4. 8086上一代的寄存器是8位的</h3>\n<ul>\n<li>通用寄存器可以分为两个独立的8八位寄存器独立使用</li>\n<li>AX分为AH，AL</li>\n<li>B分分为BH，BL</li>\n<li>CX分为CH，CL</li>\n<li>DX分为DH，DL</li>\n<li>这样可以保证程序的兼容性</li>\n<li>8086是16位CPU，8086的字长是16位</li>\n<li>一个字的高位存在高八位寄存器中，地位存在低八位寄存器中</li>\n</ul>\n<h3><a id=\"5_movadd_100\"></a>5. mov和add指令</h3>\n<p>mov ax bx：把bx的值赋值到ax<br />\nadd ax bx：把bx和ax加起来，结果存到ax中</p>\n<h3><a id=\"6__105\"></a>6. 确定物理地址</h3>\n<ul>\n<li>CPU访问内存单元时要给出内存单元的地址</li>\n<li>所有的内存单元构成的存储空间是一个一维的线性空间，每一个内存单元在这个空间中都有唯一的地址，这个唯一的地址叫物理地址</li>\n<li>8086有20位地址总线，可传送20位地址，寻址能力是1M</li>\n<li>8086是16位结构的CPU，运算器最多可以处理16位的数据寻址能力只有64KB</li>\n<li>8086CPU用两个16位地址（段地址、偏移地址）合成一个20位的物理地址</li>\n<li>物理地址 = 段地址（16位）x16（左移4位） +偏移地址\n<ul>\n<li>得到一个20位的地址，可以访问内存的1M的空间了</li>\n<li>CPU在访问时，用一个基础地址（段地址x16）和一个相对于基础地址的偏移地址相加，给出内存单元的物理地址</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200926155752261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"121213\" /></p>\n<h3><a id=\"7_CPU_119\"></a>7. 内存的分段表示法：内存并没有分段，段的划分来自于CPU</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20200926163144144.png#pic_center\" alt=\"12121\" /></p>\n<ul>\n<li>不同的段地址和偏移地址可以形成同一地址</li>\n<li>段地址很重要，用专门的寄存器存放段地址</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200926163555600.png#pic_center\" alt=\"1212\" /></p>\n<h3><a id=\"8_DebugDOS_126\"></a>8. Debug：DOS系统中著名的调试程序</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20200926163837154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></p>\n<ul>\n<li>可以查看CPU各种寄存器中的内容、内存的情况，并且在机器指令级跟踪程序的运行</li>\n</ul>\n<p><mark>R查看寄存器指令</mark></p>\n<ul>\n<li>R	- 查看寄存器的内容</li>\n<li>R 寄存器名	- 改变指定寄存器内容</li>\n</ul>\n<p><mark>D查看内存指令</mark></p>\n<ul>\n<li>D	- 列出预设地址内存处的128个字节的内容</li>\n<li>D 段地址：偏移地址	- 列出内存中指定地址处的内容</li>\n<li>D 段地址：偏移地址 结尾偏移地址	- 列出内存中指定地址范围的内容</li>\n</ul>\n<p><mark>E修改内存数据指令</mark></p>\n<ul>\n<li>E 段地址：偏移地址 数据1 数据2	- 改变内存中的内容</li>\n<li>E 段地址：偏移地址	- 逐个询问式修改，空格接受，回车结束</li>\n</ul>\n<p><mark>U将内存中的机器指令翻译成汇编指令</mark></p>\n<ul>\n<li>u 地址	- 查看代码</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200926170159615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12123\" /><br />\n<mark>用A命令以汇编指令的格式在内存中写入机器指令</mark></p>\n<ul>\n<li>a 地址 	- 写入汇编指令</li>\n</ul>\n<p><mark>用T命令执行机器指令</mark></p>\n<ul>\n<li>t -执行CS:IP处的指令</li>\n</ul>\n<p><mark>Q推出debug</mark></p>\n<h3><a id=\"9_CSIP_161\"></a>9. CS/IP两个关键的寄存器</h3>\n<ul>\n<li>CS：代码段寄存器</li>\n<li>IP：指令指针寄存器</li>\n<li>CS/IP：CPU将内存中CS：IP指向的内容当作指令来执行</li>\n</ul>\n<h3><a id=\"10_jmp_167\"></a>10. jmp指令</h3>\n<ul>\n<li>执行何处的指令取决于CS：IP</li>\n<li>可以通过CS：IP中的内容来控制CPU要执行的目标指令</li>\n<li>debug中r指令可以改变寄存器中的值rCS rip</li>\n<li>不能用moc cs 123 这种方法</li>\n<li>使用转移指令jmp：<mark>jmp CS：IP</mark>，用指令中给出的段地址修改CS，偏移地址修改IP</li>\n</ul>\n<h3><a id=\"11_DSaddress_175\"></a>11. 段寄存器DS和[address]实现字的传送</h3>\n<ul>\n<li>字单元：由两个地址连续的内存单元组成，存放一个字型数据（16位）</li>\n<li>在一个字单元中，低地址单元存放低位字节，高地址单元存放高位字节</li>\n</ul>\n<p>CPU要读取一个内存单元的时候，必须先给出这个内存单元的地址</p>\n<ul>\n<li>DS个[address]配合使用：\n<ul>\n<li>用寄存器DS存放要访问的段地址</li>\n<li>偏移地址用[…]的形式给出</li>\n</ul>\n</li>\n<li>8086不支持将数据直接放入段寄存器中的：数据–》一般寄存器–》段寄存器</li>\n</ul>\n<p><mark>DS与数据段</mark></p>\n<ul>\n<li>可以根据需要将一组内存单元定义位一个段\n<ul>\n<li>物理地址 = 段地址x16+偏移地址</li>\n<li>将一组长度为N（N&lt;64K）、地址连续、起始位置为16的倍数的内存单元当作专门存储数据的内存空间，从而定义一个数据段</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/2020092709292072.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></p>\n<ul>\n<li>字在内存中存放时，要用连个连续的内存单元来存放，字的地位字节存放在地位单元中，高位字节存放在高位地址单元中</li>\n<li>用mov指令要访问内存单元，可以在mov指令中只给出单元的偏移地址，段地址默认在DS寄存器中</li>\n<li>[address]表示一个偏移地址为address的内存单元</li>\n<li>在内存和寄存器之间传送字型数据时，高地址单元和高八位寄存器，低地址单元和低8位寄存器相对应</li>\n<li>mov、add、sub是具有两个操作对象的指令，访问内存中的数据段</li>\n<li>jmp具有一个操作对象的指令，对应内存中的代码段</li>\n<li>可以根据自己的推测，在Debug中实验指令的新格式</li>\n</ul>\n<h3><a id=\"12__202\"></a>12. 栈及其栈操作</h3>\n<ul>\n<li>只能在一段插入或删除操作的数据结构\n<ul>\n<li>入栈：将一个新的元素放到栈顶</li>\n<li>出栈：从栈顶取出一个元素</li>\n</ul>\n</li>\n<li>规则：后入先出LIFO（last in first out）</li>\n<li>CPU提供栈机制：如今的CPU都有栈的设计</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200927094609140.png#pic_center\" alt=\"1212121\" /></p>\n<ul>\n<li>8086中有两个与栈相关的寄存器：\n<ul>\n<li>栈段寄存器SS：存放栈顶的段地址</li>\n<li>栈顶指针寄存器SP：存放栈顶的偏移地址</li>\n<li>任意时刻，SS:SP指向栈顶元素</li>\n<li>push指令执行步骤：\n<ul>\n<li>SP=SP-2</li>\n<li>向SS:SP指向的字单元中传入数据</li>\n</ul>\n</li>\n<li>pop指令执行步骤：\n<ul>\n<li>从SS:SP指向的字单元中读取数据</li>\n<li>SP = SP - 2</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200927100455746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></p>\n<ul>\n<li>8086CPU不保证对栈的操作不会越界</li>\n<li>编程时要小心栈顶越界的问题</li>\n<li>push、pop实质上就是一种内存传送指令，可以在寄存器和内存之间传送数据，与mov指令不同的是，push和pop指令访问的内存单元的地址不是在指令中给出的而是SS:SP指出的</li>\n<li>执行push和pop指令时，SP中的内容自动改变</li>\n</ul>\n<h3><a id=\"13__231\"></a>13. 段总结</h3>\n<ul>\n<li>物理地址=段地址x16+偏移地址</li>\n<li>编程时，可以根据需要将一组内存单元定义为一个段</li>\n<li>可以将起始位置为16的倍数，长度为N（N&lt;64K）的一组地址连续的内存单元定义为一个段</li>\n<li>将一段内存定义为一个段，用一个段地址指示段，用偏移地址访问段内的单元</li>\n</ul>\n<h2><a id=\"_238\"></a>汇编语言程序</h2>\n<h3><a id=\"1__240\"></a>1. 汇编语言编写源程序</h3>\n<ul>\n<li>汇编程序：包含汇编程序和伪指令的文本</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/2020092710311341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"121212\" /><br />\n<mark>程序中的三种伪指令</mark></p>\n<ul>\n<li>\n<p>段定义</p>\n<ul>\n<li>一个汇编程序是由多个段组成，这些段用来存放代码、数据、或当作栈空间来使用</li>\n<li>一个有意义的汇编程序中至少有一个段，这个段用来存放代码</li>\n<li>定义程序中的段：每个段都需要有段名\n<ul>\n<li>段名 segment	– 段的开始</li>\n<li>段名 ends			--段的结束</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>end（不是ends）</p>\n<ul>\n<li>汇编程序的结束标记。若结尾处不加end编译器在编译程序时，无法知道程序在何时结束</li>\n</ul>\n</li>\n<li>\n<p>assume（假设）</p>\n<ul>\n<li>含义是假设某一段寄存器和程序中某一个用sement …ends定义的段相关联 --assume cs:sement指CS寄存器与codesg关联，将定义的codesg当作程序代码使用</li>\n</ul>\n</li>\n<li>\n<p>注释（；）</p>\n</li>\n</ul>\n<h3><a id=\"2__261\"></a>2. 编写第一个程序</h3>\n<ol>\n<li>定义一个段</li>\n<li>实现处理任务</li>\n<li>指出程序在何时结束</li>\n<li>段与段寄存器关联</li>\n<li>加上程序返回代码</li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-c\">assume cs:abc\nabc segment\n	mov ax,<span class=\"hljs-number\">2</span>\n	add ax,ax\n	add ax,ax\n	\n	mov ax,<span class=\"hljs-number\">4</span>c00h\n	<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">21</span>h\nabc ends\nend\n</code></div></pre>\n<ul>\n<li>语法错误：程序在编译时被编译器发现的错误</li>\n<li>逻辑错误：程序在运行时表现的错误</li>\n</ul>\n<h3><a id=\"3__285\"></a>3. 源程序到程序运行</h3>\n<ul>\n<li>源程序文件：（.asm）</li>\n<li>目标文件：（.obj）</li>\n<li>可执行文件：（.exe）</li>\n</ul>\n<p><mark>编译执行</mark></p>\n<ul>\n<li>\n<p>编写程序：这里使用Notepad++编写<br />\n<img src=\"https://img-blog.csdnimg.cn/20200927155043110.png#pic_center\" alt=\"12121\" /></p>\n</li>\n<li>\n<p>使用masm编译文件生成.obj文件<br />\n<img src=\"https://img-blog.csdnimg.cn/20200927155224455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"121212121121\" /></p>\n</li>\n<li>\n<p>连接生成exe文件<br />\n<img src=\"https://img-blog.csdnimg.cn/20200927155626956.png#pic_center\" alt=\"1212121\" /></p>\n</li>\n</ul>\n<h3><a id=\"4_debug_301\"></a>4. 使用debug跟踪程序的执行</h3>\n<ul>\n<li>用debug装载程序<br />\n<img src=\"https://img-blog.csdnimg.cn/20200927160403437.png#pic_center\" alt=\"456\" /></li>\n<li>t命令：继续命令p（proceed）类似T命令，逐条执行指令、显示结果。但是遇到子程序、中断等时，直接执行，然后显示结果</li>\n<li>g命令：运行指令G（GO）从指定地址开始运行程序，直到遇到断点或者程序程序正常结束</li>\n</ul>\n<h3><a id=\"5__308\"></a>5. […]与(…)的约定</h3>\n<ul>\n<li>[…]：（汇编语法规定）表示一个内存单元</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200927161517375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12345\" /></p>\n<ul>\n<li>(…)：（为学习方便做出的约定）表示一个内存单元或寄存器中内容</li>\n<li>idata：约定表示常量</li>\n</ul>\n<h3><a id=\"6_Loop_317\"></a>6. Loop指令</h3>\n<ul>\n<li>功能：实现循环（计数型循环）</li>\n<li>指令的格式：（loop 标号）</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200927162907793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"34678\" /></p>\n<ul>\n<li>CPU执行loop指令时要进行的操作\n<ul>\n<li>cx要提前存放循环次数，cx影响loop指令的执行结果</li>\n<li>（cx）=（cx）-1</li>\n<li>判断cx中的值：不为0转至标号处，为0则向下执行</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"7__329\"></a>7. 将数据、代码、栈放入不同段</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20200927170126417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"143124123432423\" /></p>\n<pre><div class=\"hljs\"><code class=\"lang-c\">assume cs:code\ndata segment\n	dw <span class=\"hljs-number\">0123</span>h,<span class=\"hljs-number\">0456</span>h,<span class=\"hljs-number\">0789</span>h,<span class=\"hljs-number\">0</span>abch,<span class=\"hljs-number\">0</span>defh,<span class=\"hljs-number\">0f</span>edh,<span class=\"hljs-number\">0</span>cbah,<span class=\"hljs-number\">0987</span>h\ndata ends\n\n<span class=\"hljs-built_in\">stack</span> segment\n	dw <span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>\n<span class=\"hljs-built_in\">stack</span> ends\n\ncode segment\nstart:\n	;初始化各段寄存器\n	mov ax,<span class=\"hljs-built_in\">stack</span>\n	mov ss,ax\n	mov sp,<span class=\"hljs-number\">20</span>h\n	mov ax,data\n	mov ds,ax\n	\n	; 入栈\n	mov bx,<span class=\"hljs-number\">0</span>\n	mov cx,<span class=\"hljs-number\">8</span>\n	s:push [bx]\n	add bx,<span class=\"hljs-number\">2</span>\n	loop s\n	\n	; 出栈\n	mov bx,<span class=\"hljs-number\">0</span>\n	mov cx,<span class=\"hljs-number\">8</span>\n	s0:pop [bx]\n	add bx,<span class=\"hljs-number\">2</span>\n	loop s0\n	\n	mov ax,<span class=\"hljs-number\">4</span>c00h\n	<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">21</span>h\ncode ends\nend\n\n</code></div></pre>\n<h2><a id=\"_376\"></a>内存寻址方式</h2>\n<h3><a id=\"1__379\"></a>1. 处理字符串</h3>\n<ul>\n<li>汇编程序中，用’\'的方式指明数据是以字符串的形式给出的，</li>\n<li>编译器将他们转化为相应的ASCll码</li>\n</ul>\n<p><mark>大小写转换</mark></p>\n<ul>\n<li>大写+20H—&gt;小写</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-c\">assume cs:code\ndata segment\n	db <span class=\"hljs-string\">\'BaSiC\'</span>\n	db <span class=\"hljs-string\">\'iNfOrMaTiOn\'</span>\ndata ends\n\n<span class=\"hljs-built_in\">stack</span> segment\n	dw <span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>\n<span class=\"hljs-built_in\">stack</span> ends\n\ncode segment\nstart:\n	;初始化各段寄存器\n	mov ax,<span class=\"hljs-built_in\">stack</span>\n	mov ss,ax\n	mov sp,<span class=\"hljs-number\">20</span>h\n	mov ax,data\n	mov ds,ax\n	\n	;第一个字符串转换为大写字母\n	mov bx,<span class=\"hljs-number\">0</span>\n	mov cx,<span class=\"hljs-number\">5</span>\n	s: mov al,[bx]\n	<span class=\"hljs-keyword\">and</span> al,<span class=\"hljs-number\">11011111b</span>\n	mov [bx],al\n	inc bx\n	loop s\n	\n	;第二个字符串转换为小写字母\n	mov bx,<span class=\"hljs-number\">5</span>\n	mov cx,<span class=\"hljs-number\">11</span>\n	s0: mov al,[bx]\n	<span class=\"hljs-keyword\">or</span> al,<span class=\"hljs-number\">00100000b</span>\n	inc bx\n	loop s0\n	\n	mov ax,<span class=\"hljs-number\">4</span>c00h\n	<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">21</span>h\ncode ends\nend start\n</code></div></pre>\n<h3><a id=\"2_bxidata_430\"></a>2. [bx+idata]方式寻址</h3>\n<ul>\n<li>[bx+idata]表示一个内存单元，它的偏移地址为（bx）+idata（bx中的数值加上idata）</li>\n<li>mov ax,[bx+200]/mov ax,[200+bx]的含义\n<ul>\n<li>将一个内存单元的内容送入ax</li>\n<li>这个内存单元的长度为2字节，存放一个字</li>\n<li>内存单元的短地址在ds中，偏移地址为200加上bx中的数值</li>\n<li>数学化描述为：（ax）=（（ds）*16+200+（bx））</li>\n<li>其他常用写法：\n<ul>\n<li>mov ax,[200+bx]</li>\n<li>mov ax,200[bx]</li>\n<li>mov ax,[bx].200</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"3_SIDI_445\"></a>3. SI和DI寄存器（变址寄存器）</h3>\n<ul>\n<li>SI和DI是8086CPU中和BX功能相近的寄存器</li>\n<li>SI：Source Index，源变址寄存器</li>\n<li>DI：Destination Index，目标变址寄存器</li>\n<li>SI，DI不能分成两个八位寄存器来使用</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-c\">assume cs:code\ndata segment\n	db <span class=\"hljs-string\">\'welcome to masm!\'</span>\n	db <span class=\"hljs-string\">\'................\'</span>\ndata ends\n\ncode segment\nstart:\n	;初始化寄存器\n	mov ax,data\n	mov ds,ax\n	\n	;开始执行数据\n	mov si,<span class=\"hljs-number\">0</span>\n	mov di,<span class=\"hljs-number\">16</span>\n	mov cx,<span class=\"hljs-number\">8</span>\n	s: mov ax [si]\n	mov [di],ax\n	add si,<span class=\"hljs-number\">2</span>\n	add di,<span class=\"hljs-number\">2</span>\n	loop s\n	\n	mov ax,<span class=\"hljs-number\">4</span>c00h\n	<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">21</span>h\ncode ends\nend start\n</code></div></pre>\n<h3><a id=\"4_bxsibxdi_480\"></a>4. [bx+si]和[bx+di]方式寻址</h3>\n<ul>\n<li>\n<p>[bx+si]表示一个内存单元</p>\n<ul>\n<li>偏移地址为(bx)+(si)：bx中的数值加上si中的数值</li>\n<li>数学化描述：（ax）=（（ds）*16+（bx）+（si））</li>\n<li>其他写法：mov ax，[bx][si]</li>\n</ul>\n</li>\n<li>\n<p>[bx+si+idata]和[bx+di+idata]方式寻址</p>\n<ul>\n<li>[bx+si+idata]表示一个内存单元</li>\n<li>偏移地址为：（bx）+（si）+idata：bx中的数值加上si中的数值，再加上idata</li>\n<li>数学化的描述：（ax）=（（ds）*16+（bx）+（si）+idata）</li>\n<li>其他写法：mov ax，200[bx][si]，mov ax，[bx][si].200</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"5_dup_492\"></a>5. 用dup设置内存空间</h3>\n<ul>\n<li>\n<p>功能：dup和db、dw、dd等数据定义伪指令配合使用，用来进行数据的重复</p>\n</li>\n<li>\n<p>db/dw/dd 重复的次数 dup（重复的字节型数据）<br />\n<img src=\"https://img-blog.csdnimg.cn/20200929155119424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"1121212121\" /></p>\n</li>\n<li>\n<p>定义一个200个字节的栈段：dw 200 dup(0)</p>\n</li>\n</ul>\n<h2><a id=\"_500\"></a>流程转移与子程序</h2>\n<h3><a id=\"1_offset_501\"></a>1. 操作符offset</h3>\n<p><mark>转移</mark></p>\n<ul>\n<li>\n<p>可以控制CPU执行内存中的某处指令</p>\n</li>\n<li>\n<p>可以修改IP，或同时修改 CS和IP的指令</p>\n</li>\n<li>\n<p>按转移行为分类：</p>\n<ul>\n<li>段内转移：只修改IP，jmp ax</li>\n<li>段间转移：同时修改CS和IP，jmp 1000:0</li>\n</ul>\n</li>\n<li>\n<p>按指令对IP的修改的范围不同分类：</p>\n<ul>\n<li>段内短转移：IP修改范围-128~127</li>\n<li>段内近转移：IP修改范围为-32768~32767</li>\n</ul>\n</li>\n<li>\n<p>按转移指令分类：</p>\n<ul>\n<li>无条件转移指令，jmp</li>\n<li>条件转移指令，jcxz</li>\n<li>循环指令，loop</li>\n<li>过程</li>\n<li>中断</li>\n</ul>\n</li>\n<li>\n<p>offset：取得标号的偏移地址</p>\n</li>\n<li>\n<p>格式：offset 标号</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200929162041584.png#pic_center\" alt=\"34421\" /></p>\n<h3><a id=\"2_jmp_526\"></a>2. jmp指令</h3>\n<ul>\n<li>无条件转移：可以只修改IP，也可以同时修改CS和IP</li>\n<li>jmp指令要给出两种信息：\n<ul>\n<li>转移的目标地址</li>\n<li>转移的距离\n<ul>\n<li>段间转移（远转移）：jmp 2000：1000</li>\n<li>段内短转移：jmp short 标号；IP修改范围为-128~127，8位转移</li>\n<li>段内近转移：jmp near ptr 标号；IP的修改范围为：-32768~32767，16位转移</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><mark>根据标号进行转移</mark></p>\n<ul>\n<li>\n<p>常见指令的立即数均在机器指令中有体现</p>\n</li>\n<li>\n<p>jmp short 标号</p>\n<ul>\n<li>机器指令中，包含的是跳转到指令的相对位置，而不是转移的目标地址</li>\n<li>功能：（IP）=（IP）+8位位移</li>\n<li>原理：\n<ul>\n<li>8位位移=“标号”处的地址-jmp指令后的第一个字节的地址；</li>\n<li>short指明此处的位移位8位位移</li>\n<li>8位位移的范围为-128127，用补码表示</li>\n<li>8位位移由编译程序在编译时算出</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>jmp near ptr 标号：段内转移</p>\n<ul>\n<li>功能：（IP）=（IP）+16位位移</li>\n<li>原理：类似jmp short</li>\n</ul>\n</li>\n<li>\n<p>jmp far ptr 标号 ：段间转移</p>\n<ul>\n<li>指明了跳转的目的地址，即包含了标号的段地址CS和偏移地址IP</li>\n</ul>\n</li>\n</ul>\n<p><mark>根据寄存器中的值转移</mark></p>\n<ul>\n<li>jmp 16位寄存器</li>\n<li>功能：IP=（16位寄存器）：jmp ax</li>\n</ul>\n<p><mark>转移地址在内存中的jmp指令</mark></p>\n<ul>\n<li>\n<p>jmp word ptr 内存单元地址：</p>\n<ul>\n<li>段内转移</li>\n<li>从内存单元地址处开始存放着一个字，是转移的目的偏移地址</li>\n</ul>\n</li>\n<li>\n<p>jmp dword ptr 内存单元地址：</p>\n<ul>\n<li>段间转移</li>\n<li>从内存单元地址处开始存放两个字，高地址处的字是转移的目的段地址，低地址处是转移的目的偏移地址</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200929171852980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"124132323233\" /></p>\n<ul>\n<li>在源程序中不允许直接写 2000：1000指定地址转移，编译时会报错</li>\n</ul>\n<p><mark>jcxz指令</mark></p>\n<ul>\n<li>格式：jcxz 标号</li>\n<li>功能：\n<ul>\n<li>如果（cx）=0,则转移到标号处执行，（IP）=（IP）+8位位移\n<ul>\n<li>8位位移=“标号”处的地址-jcxz指令后的第一个字节的地址，补码表示，编译程序编译出来的</li>\n</ul>\n</li>\n<li>当（cx）!=0时，什么也不做（程序向下执行）</li>\n</ul>\n</li>\n<li>jcxz是条件转移指令\n<ul>\n<li>所有的有条件转移指令都是短转移</li>\n<li>对于IP的修改范围都是-128~127</li>\n<li>在对应的机器码中包含转移的位移，而不是目的地址</li>\n</ul>\n</li>\n</ul>\n<p><mark>loop指令</mark></p>\n<ul>\n<li>格式：loop 标号</li>\n<li>指令操作：\n<ul>\n<li>（cx）=（cx）-1</li>\n<li>当（cx）！=0时，则转移到标号处执行，（IP）=（IP）+8位位移</li>\n<li>当（cx）=0时，程序向下执行</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"3_callret_595\"></a>3. call指令和ret指令</h3>\n<ul>\n<li>call：调用子程序</li>\n<li>ret：返回指令</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200929184744399.png#pic_center\" alt=\"52822222\" /><br />\n<mark>call</mark></p>\n<ul>\n<li>\n<p>实质：流程转移指令，他们都修改IP或同时修改CS和IP，实现原理和jmp指令相似</p>\n</li>\n<li>\n<p>CPU执行call指令，进行两步操作：</p>\n<ul>\n<li>将当前的IP或CS：IP压入栈中</li>\n<li>转移到标号处执行指令</li>\n</ul>\n</li>\n<li>\n<p>call标号</p>\n<ul>\n<li>16位位移=“标号”处的地址 -call指令后的第一个字节的地址</li>\n<li>16位位移的范围位 -32768~32767，用补码表示</li>\n<li>16位位移由编译程序在编译时算出</li>\n</ul>\n</li>\n</ul>\n<p><mark>call far ptr 标号</mark></p>\n<ul>\n<li>实现的是段间转移，把段地址也压栈了</li>\n<li>CPU执行“call for ptr 标号”时的操作\n<ul>\n<li>（SP）=（SP）-2</li>\n<li>（（SS）x16+（SP））=（CS）</li>\n<li>（SP）=（SP）-2</li>\n<li>（（SS）x16+（SP））=（IP）</li>\n<li>（CS）：标号所在的段地址</li>\n<li>（IP）：标号所在的偏移地址</li>\n</ul>\n</li>\n</ul>\n<p><mark>转移地址在寄存器中的call</mark></p>\n<ul>\n<li>格式：call 16位寄存器</li>\n<li>功能：\n<ul>\n<li>（SP）=（SP）-2</li>\n<li>（（SS）*16+（SP））=（IP）</li>\n<li>（IP）=（16位寄存器）</li>\n</ul>\n</li>\n</ul>\n<p><mark>转移地址在内存中的call</mark></p>\n<ul>\n<li>格式：call word ptr 内存单元地址：把IP放入栈中</li>\n<li>格式：call dword ptr 内存单元：把IP和CS都放入栈中</li>\n</ul>\n<p><mark>ret指令和retf</mark></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200929191958982.png#pic_center\" alt=\"21312\" /></p>\n<h3><a id=\"4_DF_646\"></a>4. DF标志和段传送指令</h3>\n<p><mark>DF</mark></p>\n<ul>\n<li>方向标志位（Direction Flag）</li>\n<li>功能：\n<ul>\n<li>在串处理指令中，控制每次操作后si，di的递减</li>\n<li>DF=0：每次操作后si，di递增</li>\n<li>DF=1：每次操作后si，di递减</li>\n</ul>\n</li>\n<li>对DF指令进行设置的指令\n<ul>\n<li>cld指令：将标志寄存器的DF位设为0（clear）</li>\n<li>std指令：将标志寄存器的DF位设为1（setup）</li>\n</ul>\n</li>\n</ul>\n<p><mark>串传送指令</mark></p>\n<ul>\n<li>\n<p>movsb：（以字节为单位传送）</p>\n<ul>\n<li>（（ES）x16+（DI））=（（DS）x16+（SI））</li>\n<li>如果DF=0则：（SI）=（SI）+1，（DI）=（DI）+1</li>\n<li>如果DF=1则：（SI）=（SI）-1，（DI）=（DI）-1</li>\n</ul>\n</li>\n<li>\n<p>movsw：（以字为单位传送）</p>\n<ul>\n<li>（（ES）x16+（DI））=（（DS）x16+（SI））</li>\n<li>如果DF=0则：（SI）=（SI）+2，（DI）=（DI）+2</li>\n<li>如果DF=1则：（SI）=（SI）-2，（DI）=（DI）-2</li>\n</ul>\n</li>\n<li>\n<p>字符串的复制</p>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-c\">assume cs:code\ndata segment\n	db <span class=\"hljs-string\">\'welcome to masm!\'</span>\n	db <span class=\"hljs-number\">16</span> dup(<span class=\"hljs-number\">0</span>)\ndata ends\n\ncode segment\nstart:\n	;初始化寄存器\n	mov ax,data\n	mov ds,ax\n	mov si,<span class=\"hljs-number\">0</span>\n	mov es,ax\n	mov di,<span class=\"hljs-number\">16</span>\n	cld\n	\n	;循环传送\n	mov cx,<span class=\"hljs-number\">16</span>\n	s:movsb\n	loop s\n	\n	mov ax,<span class=\"hljs-number\">4</span>c00h\n	<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">21</span>h\ncode ends\nend start\n</code></div></pre>\n<p><mark>rep指令</mark></p>\n<ul>\n<li>rep指令常和串传送指令搭配使用</li>\n<li>功能：根据cx的值，重复执行后面的指令</li>\n<li>用法：rep movsb</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200929195134579.png#pic_center\" alt=\"12121212\" /></p>\n<ul>\n<li>上面一段代码可简化为</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-c\">assume cs:code\ndata segment\n	db <span class=\"hljs-string\">\'welcome to masm!\'</span>\n	db <span class=\"hljs-number\">16</span> dup(<span class=\"hljs-number\">0</span>)\ndata ends\n\ncode segment\nstart:\n	;初始化寄存器\n	mov ax,data\n	mov ds,ax\n	mov si,<span class=\"hljs-number\">0</span>\n	mov es,ax\n	mov di,<span class=\"hljs-number\">16</span>\n	cld\n	\n	;循环传送\n	mov cx,<span class=\"hljs-number\">8</span>\n	rep movsw\n	\n	mov ax,<span class=\"hljs-number\">4</span>c00h\n	<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">21</span>h\ncode ends\nend start\n</code></div></pre>\n<h2><a id=\"_744\"></a>中断及外部设备的操作</h2>\n<h3><a id=\"1__745\"></a>1. 移位指令</h3>\n<ul>\n<li>逻辑左移：SHL OPR，CNT：把最高位移动到CF中，其他左移一位，低位补0</li>\n<li>循环左移：ROL OPR，CNT：最高位移动到最低位，其他位顺序左移</li>\n<li>逻辑右移：SHR OPR，CNT：把最低位移动到CF中，其他右移一位，高位补1</li>\n<li>算术左移：SAL OPR，CNT：和逻辑左移一样</li>\n<li>算术右移：SAR OPR，CNT：把最低位移到CF，其他右移，高位复制一份</li>\n<li>带进位循环左移：RCL OPR，CNT：最高位放到CF中，原CF中的放到最低位，其他左移一位</li>\n<li>带进位循环右移：RCR OPR，CNT：最高位补原CF的数</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20201002083646718.png#pic_center\" alt=\"1231231231\" /></p>\n<h3><a id=\"2__758\"></a>2. 操作显示原理</h3>\n<p><mark>屏幕上的内容=显存中的数据</mark></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201002084242791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"1212312312\" /><br />\n<img src=\"https://img-blog.csdnimg.cn/20201002084338469.png#pic_center\" alt=\"1231212\" /></p>\n<ul>\n<li>显存中的结构，每个字符有两个位表示</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/2020100208485385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"32qwr\" /></p>\n<ul>\n<li>显示例子：在屏幕中间显示：welcome to masm!</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-c\">assume cs:code\ndata segment\n	db <span class=\"hljs-string\">\'welcome to masm!\'</span>\ndata ends\n\ncode segment\nstart:\n	;初始化寄存器\n	mov ax,data\n	mov ds,ax\n	mov ax,<span class=\"hljs-number\">0B</span>800H\n	mov si,<span class=\"hljs-number\">0</span>\n	mov es,ax\n	mov di,<span class=\"hljs-number\">160</span>*<span class=\"hljs-number\">12</span>+<span class=\"hljs-number\">80</span><span class=\"hljs-number\">-16</span>\n	\n	;显示字符串\n	mov cx,<span class=\"hljs-number\">16</span>\n	w:mov al,[si]\n	mov es:[di],al\n	inc di\n	mov al,<span class=\"hljs-number\">71</span>H\n	mov es:[di],al\n	inc si\n	inc di\n	loop w\n	\n	mov ax,<span class=\"hljs-number\">4</span>c00h\n	<span class=\"hljs-keyword\">int</span> <span class=\"hljs-number\">21</span>h\ncode ends\nend start\n</code></div></pre>\n<h3><a id=\"3__804\"></a>3. 描述内存单元的标号</h3>\n<ul>\n<li>数据标号同时描述内存地址和内存单元长度</li>\n<li>扩展用法：将标号当作数据来定义</li>\n</ul>\n<h3><a id=\"4__811\"></a>4. 直接定址表</h3>\n<p><mark>数据的直接定址表</mark></p>\n<ul>\n<li>利用表，在两个数据集合之间建立一种映射关系，用查表的方法根据给出的数据得到其在另一集合中的对应数据</li>\n</ul>\n<h2><a id=\"_816\"></a>高级汇编语言技术（宏汇编）</h2>\n<h3><a id=\"1__819\"></a>1. 子程序的另一种写法</h3>\n<pre><div class=\"hljs\"><code class=\"lang-c\">名称 proc\n...\n名称 endp\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20201002110254727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"345634633\" /></p>\n<h3><a id=\"2__828\"></a>2. 程序的多文件组织</h3>\n<ul>\n<li>文件中引用另一个文件：<mark>extern 名称:far</mark></li>\n<li>被引用的文件头部申明可以被引用：<mark>public 名称</mark></li>\n<li>编译时分别编译：\n<ul>\n<li><mark>masm p1</mark></li>\n<li><mark>masm p2</mark></li>\n<li><mark>link p1.OBJ+p2.OBJ</mark></li>\n</ul>\n</li>\n<li>默认生成：p1.exe</li>\n</ul>\n<h3><a id=\"3__839\"></a>3. 汇编指令汇总</h3>\n<ul>\n<li>\n<p>数据传送指令</p>\n<ul>\n<li>通用数据传送指令：mov，push，pop，xchg（交换指令：xchg 操作数1 操作数2）</li>\n<li>累加器专用传送指令：in，out，xlat（换码指令：xlat或xlat opr）</li>\n<li>地址传送指令：LEA（有效地址送寄存器指令），LDS（指针送寄存器和DS指令），LES（指针送寄存器和ES指令）</li>\n<li>标志寄存器传送指令：LAHF（标志送AH指令），SAHF（AH送标志寄存器指令），PUSHF（标志进栈指令），POPF（标志出栈指令）</li>\n<li>类型转换指令：CBW（字节转字指令），CWD（字转字节指令）</li>\n</ul>\n</li>\n<li>\n<p>算术指令</p>\n<ul>\n<li>加法指令：ADD，ADC（带进位的加法），INC（加1）</li>\n<li>减法指令：SUB，SBB（带借位的减法），DEC（减1），NEG（取负），CMP（减法，不影响操作数，只影响标志位）</li>\n<li>乘法：MUL，IMUL（有符号数的乘法）</li>\n<li>除法：DIV，IDIV（有符号数除法）</li>\n<li>十进制指令：DAA（压缩BCD码加法十进制调整指令），DAS（压缩BCD码减法法十进制调整指令），AAA（非压缩BCD码加法十进制调整指令），AAS（非压缩BCD码减法十进制调整指令），AAM（非压缩BCD码乘法十进制调整指令），AAD（非压缩BCD码除法十进制调整指令）</li>\n</ul>\n</li>\n<li>\n<p>逻辑指令</p>\n<ul>\n<li>逻辑运算指令：AND，OR，NOT，XOP，TEST</li>\n<li>移位指令：SHL，SHR，SAL，SAR，ROL，ROR，RCL，RCR</li>\n</ul>\n</li>\n<li>\n<p>串处理指令</p>\n<ul>\n<li>设置方向标志指令：CLD，STD</li>\n<li>串处理指令：MOVSB/MOVSW，STOSB/STOSW，LODSB／LODSW，CMPSB／CMPSW，SCASB／SCASW</li>\n</ul>\n</li>\n<li>\n<p>控制转移指令</p>\n<ul>\n<li>无条件转移指令：JMP</li>\n<li>条件转移指令</li>\n<li>循环指令：LOOP，LOOPZ/LOOPE，LOOPNZ/LOOPNE</li>\n<li>子程序调用和返回指令：CALL，RET</li>\n<li>中断与中断返回指令：INT，INTO，IRET</li>\n</ul>\n</li>\n<li>\n<p>处理机控制与杂项操作指令</p>\n<ul>\n<li>标志处理指令：CLC，STC，CMC，CLD，STD，CLI，STI</li>\n<li>其他处理机控制与杂项操作指令：\n<ul>\n<li>NOP：无操作（机器码占一个字节）</li>\n<li>HTL：暂停机（等待一次外中断，之后继续执行程序）</li>\n<li>WAIT：等待（等待中断，之后仍继续等待）</li>\n<li>ESC：换码</li>\n<li>LOCK：封锁（维持总线的锁存信号，直到其后的指令执行完）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"4__883\"></a>4. 汇编伪操作汇总</h3>\n<p><strong>伪操作</strong>：在汇编程序对源程序汇编期间，由汇编程序处理的操作，可以完成如数据定义、分配存储区、指示程序结束等指令</p>\n<ul>\n<li>\n<p>处理器选择伪操作<br />\n<img src=\"https://img-blog.csdnimg.cn/20201002150624379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"222222\" /></p>\n</li>\n<li>\n<p>段定义伪操作</p>\n<ul>\n<li>data segment     data ends：定义数据段</li>\n<li>extra segment     extra segment：定义附加段</li>\n<li>code segment    code segment：定义代码段<br />\n<img src=\"https://img-blog.csdnimg.cn/20201002150957588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"231312\" /></li>\n</ul>\n</li>\n<li>\n<p>程序开始和结束伪操作</p>\n</li>\n<li>\n<p><img src=\"https://img-blog.csdnimg.cn/2020100215350427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"1212\" /></p>\n</li>\n<li>\n<p>数据定义及存储器分配伪操作</p>\n<ul>\n<li>助记符：DB，DW，DD，DF，DQ，DT</li>\n</ul>\n</li>\n<li>\n<p>表达式赋值伪操作</p>\n<ul>\n<li>表达式名 EQU 表达式</li>\n<li>= 伪操作（允许重定义）</li>\n</ul>\n</li>\n<li>\n<p>地址计数器与对准伪操作<br />\n<img src=\"https://img-blog.csdnimg.cn/20201002155109224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n</li>\n<li>\n<p>基数控制器伪操作</p>\n</li>\n</ul>\n<h3><a id=\"5__918\"></a>5. 汇编操作符汇总</h3>\n<ul>\n<li>算术操作符：+，-，*，/，MOD</li>\n<li>逻辑和移位操作符号：and，or，xor，not，shl，shr</li>\n<li>关系操作符：EQ（等于），NE（不等于），LT（小于），LE（小于等于），GT（大于），GE（大于等于）</li>\n<li>数值回送操作符：OFFSET（回送变量或标号的偏址/段址）、SEG、TYPE、LENGTH（回送由DUP定义的变量的单元数，其他情况返回1）、SIZE</li>\n<li>属性操作符：<br />\n<img src=\"https://img-blog.csdnimg.cn/20201002163139359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12312312\" /></li>\n</ul>\n<h3><a id=\"6__928\"></a>6. 汇编过程</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20201002163940977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"123123\" /></p>\n<ul>\n<li>\n<p>伪指令不产生机器码</p>\n</li>\n<li>\n<p>汇编指令和机器码是一一对应的</p>\n</li>\n<li>\n<p>Binary Viewer：一个文件查看器</p>\n</li>\n</ul>\n','@[toc](目录)\n# 汇编\n\n## 绪论\n\n- 程序语言的老祖宗\n- 汇编语言的效率无可替代\n- 用于底层：计算机及周围设备的驱动程序\n- 汇编语言的主体是汇编指令（助记符）\n\n### 1. 汇编语言的执行过程\n![121212](https://img-blog.csdnimg.cn/20200925145558594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n### 2. 计算机组成\n- CPU：\n- 总线\n- 内存\n- 扩展槽（连接外部设备）\n\n### 3. 指令和数据的表示\n\n- 计算机中的数据和指令，储存在内存或磁盘中\n- 数据和指令都是二进制信息\n- 数据的表示：二进制B、十六进制H、八进制O、十进制D\n- 数据量：B、KB、MB、GB、TB\n\n\n### 4. 计算机中的储存单元\n\n- 存储器被划分为若干个存储单元，每个存储单元从0开始顺序编码\n\n### 5. 计算机中的总线\n\n- 计算机中专门连接CPU和其他芯片的导线，通常成为总线\n- 物理上：一根根导线的集合\n- 逻辑上：\n  - 地址总线：CPU通过地址总线来指定储存单元，宽度决定可寻址的储存单元的大小（N根总线宽度为N，寻址空间为2^N）\n  - 数据总线：CPU通过内存或其他器件之间数据传输是通过数据总线实现的，宽度觉得速度\n  - 控制总线：CPU通过控制总线对外部器件进行控制，宽度决定对外部器件的控制能力\n\n\n### 6. X86性能\n\n![12121](https://img-blog.csdnimg.cn/20200925151208147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n### 7. CPU对储存器的读写\n\nCPU想要进行数据读写，必须要和外部器件进行三类信息的数据交换\n- 存储单元的地址（地址信息）\n- 器件的选择，读或写命令（控制信息）\n- 读或写的数据（数据信息）\n\n### 8. 内存地址空间\n![1212121](https://img-blog.csdnimg.cn/20200925152038225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n- 把各类储存器看作一个逻辑存储--统一编址\n- 所有的物理存储器被看作一个由若干存储单元组成的逻辑存储器\n- 每个物理储存器在这个逻辑储存器中占有一个地址段\n![1212](https://img-blog.csdnimg.cn/20200925152608578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n### 9. 搭建汇编语言实践环境（Dos模拟器）\n\n- DOSBox：下载地址\n\n百度网盘 ：[https://pan.baidu.com/s/17cOEc9MU2N7xrF8W43JeJA](https://pan.baidu.com/s/17cOEc9MU2N7xrF8W43JeJA)\n提取码 ：m06f  \n\n\n \n\n## 访问寄存器和内存\n### 1. CPU的组成\n\n- 运算器进行信息处理\n- 寄存器进行信息存储\n- 控制器协调各种器件进行工作\n- 内部总线协调各种器件之间的联系\n\n\n### 2. 寄存器是CPU的内部信息存储单元\n\n![12121](https://img-blog.csdnimg.cn/2020092615221749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n### 3. 通用寄存器：AX，BX，CX，DX\n\n- 一个16位寄存器储存一个16位的数据\n- 最大值2^16^-1（FFFF）\n\n![1212](https://img-blog.csdnimg.cn/202009261525208.png#pic_center)\n\n\n### 4. 8086上一代的寄存器是8位的\n\n- 通用寄存器可以分为两个独立的8八位寄存器独立使用\n- AX分为AH，AL\n- B分分为BH，BL\n- CX分为CH，CL\n- DX分为DH，DL\n- 这样可以保证程序的兼容性\n- 8086是16位CPU，8086的字长是16位\n- 一个字的高位存在高八位寄存器中，地位存在低八位寄存器中\n\n### 5. mov和add指令\n\nmov ax bx：把bx的值赋值到ax\nadd ax bx：把bx和ax加起来，结果存到ax中\n\n### 6. 确定物理地址\n\n- CPU访问内存单元时要给出内存单元的地址\n- 所有的内存单元构成的存储空间是一个一维的线性空间，每一个内存单元在这个空间中都有唯一的地址，这个唯一的地址叫物理地址\n- 8086有20位地址总线，可传送20位地址，寻址能力是1M\n- 8086是16位结构的CPU，运算器最多可以处理16位的数据寻址能力只有64KB\n- 8086CPU用两个16位地址（段地址、偏移地址）合成一个20位的物理地址\n- 物理地址 = 段地址（16位）x16（左移4位） +偏移地址\n  - 得到一个20位的地址，可以访问内存的1M的空间了\n  - CPU在访问时，用一个基础地址（段地址x16）和一个相对于基础地址的偏移地址相加，给出内存单元的物理地址\n\n![121213](https://img-blog.csdnimg.cn/20200926155752261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n### 7. 内存的分段表示法：内存并没有分段，段的划分来自于CPU\n![12121](https://img-blog.csdnimg.cn/20200926163144144.png#pic_center)\n- 不同的段地址和偏移地址可以形成同一地址\n- 段地址很重要，用专门的寄存器存放段地址\n\n![1212](https://img-blog.csdnimg.cn/20200926163555600.png#pic_center)\n\n### 8. Debug：DOS系统中著名的调试程序\n\n![12121](https://img-blog.csdnimg.cn/20200926163837154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n- 可以查看CPU各种寄存器中的内容、内存的情况，并且在机器指令级跟踪程序的运行\n\n==R查看寄存器指令==\n- R	- 查看寄存器的内容\n- R 寄存器名	- 改变指定寄存器内容\n\n==D查看内存指令==\n- D	- 列出预设地址内存处的128个字节的内容\n- D 段地址：偏移地址	- 列出内存中指定地址处的内容\n- D 段地址：偏移地址 结尾偏移地址	- 列出内存中指定地址范围的内容\n\n==E修改内存数据指令==\n- E 段地址：偏移地址 数据1 数据2	- 改变内存中的内容\n- E 段地址：偏移地址	- 逐个询问式修改，空格接受，回车结束 \n\n\n==U将内存中的机器指令翻译成汇编指令==\n- u 地址	- 查看代码\n\n![12123](https://img-blog.csdnimg.cn/20200926170159615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n==用A命令以汇编指令的格式在内存中写入机器指令==\n\n- a 地址 	- 写入汇编指令\n\n\n==用T命令执行机器指令==\n\n- t -执行CS:IP处的指令\n\n==Q推出debug==\n\n\n### 9. CS/IP两个关键的寄存器\n\n- CS：代码段寄存器\n- IP：指令指针寄存器\n -  CS/IP：CPU将内存中CS：IP指向的内容当作指令来执行\n\n### 10. jmp指令\n- 执行何处的指令取决于CS：IP\n- 可以通过CS：IP中的内容来控制CPU要执行的目标指令\n- debug中r指令可以改变寄存器中的值rCS rip\n- 不能用moc cs 123 这种方法\n- 使用转移指令jmp：==jmp CS：IP==，用指令中给出的段地址修改CS，偏移地址修改IP\n\n\n### 11. 段寄存器DS和[address]实现字的传送\n- 字单元：由两个地址连续的内存单元组成，存放一个字型数据（16位）\n- 在一个字单元中，低地址单元存放低位字节，高地址单元存放高位字节\n\nCPU要读取一个内存单元的时候，必须先给出这个内存单元的地址\n- DS个[address]配合使用：\n  -  用寄存器DS存放要访问的段地址\n  - 偏移地址用[....]的形式给出\n- 8086不支持将数据直接放入段寄存器中的：数据--》一般寄存器--》段寄存器\n\n==DS与数据段==\n\n- 可以根据需要将一组内存单元定义位一个段\n  - 物理地址 = 段地址x16+偏移地址\n  - 将一组长度为N（N<64K）、地址连续、起始位置为16的倍数的内存单元当作专门存储数据的内存空间，从而定义一个数据段\n \n![12121](https://img-blog.csdnimg.cn/2020092709292072.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n- 字在内存中存放时，要用连个连续的内存单元来存放，字的地位字节存放在地位单元中，高位字节存放在高位地址单元中\n- 用mov指令要访问内存单元，可以在mov指令中只给出单元的偏移地址，段地址默认在DS寄存器中\n- [address]表示一个偏移地址为address的内存单元\n- 在内存和寄存器之间传送字型数据时，高地址单元和高八位寄存器，低地址单元和低8位寄存器相对应\n- mov、add、sub是具有两个操作对象的指令，访问内存中的数据段\n- jmp具有一个操作对象的指令，对应内存中的代码段\n- 可以根据自己的推测，在Debug中实验指令的新格式\n\n\n\n### 12. 栈及其栈操作\n\n- 只能在一段插入或删除操作的数据结构\n  - 入栈：将一个新的元素放到栈顶\n  - 出栈：从栈顶取出一个元素\n- 规则：后入先出LIFO（last in first out） \n- CPU提供栈机制：如今的CPU都有栈的设计\n\n![1212121](https://img-blog.csdnimg.cn/20200927094609140.png#pic_center)\n\n- 8086中有两个与栈相关的寄存器：\n  - 栈段寄存器SS：存放栈顶的段地址\n  - 栈顶指针寄存器SP：存放栈顶的偏移地址\n  - 任意时刻，SS:SP指向栈顶元素\n  - push指令执行步骤：\n    - SP=SP-2\n    - 向SS:SP指向的字单元中传入数据\n  - pop指令执行步骤：\n    - 从SS:SP指向的字单元中读取数据\n    - SP = SP - 2\n\n![12121](https://img-blog.csdnimg.cn/20200927100455746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n- 8086CPU不保证对栈的操作不会越界\n- 编程时要小心栈顶越界的问题\n- push、pop实质上就是一种内存传送指令，可以在寄存器和内存之间传送数据，与mov指令不同的是，push和pop指令访问的内存单元的地址不是在指令中给出的而是SS:SP指出的\n- 执行push和pop指令时，SP中的内容自动改变\n\n\n### 13. 段总结\n- 物理地址=段地址x16+偏移地址\n- 编程时，可以根据需要将一组内存单元定义为一个段\n- 可以将起始位置为16的倍数，长度为N（N<64K）的一组地址连续的内存单元定义为一个段\n- 将一段内存定义为一个段，用一个段地址指示段，用偏移地址访问段内的单元\n\n\n## 汇编语言程序\n\n### 1. 汇编语言编写源程序\n- 汇编程序：包含汇编程序和伪指令的文本\n\n![121212](https://img-blog.csdnimg.cn/2020092710311341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n==程序中的三种伪指令==\n- 段定义\n  - 一个汇编程序是由多个段组成，这些段用来存放代码、数据、或当作栈空间来使用\n  - 一个有意义的汇编程序中至少有一个段，这个段用来存放代码\n  - 定义程序中的段：每个段都需要有段名\n    -  段名 segment	-- 段的开始\n    - 段名 ends			--段的结束\n- end（不是ends）\n  - 汇编程序的结束标记。若结尾处不加end编译器在编译程序时，无法知道程序在何时结束\n- assume（假设）\n  - 含义是假设某一段寄存器和程序中某一个用sement ....ends定义的段相关联 --assume cs:sement指CS寄存器与codesg关联，将定义的codesg当作程序代码使用\n\n\n\n- 注释（；）\n\n\n### 2. 编写第一个程序\n1. 定义一个段\n2. 实现处理任务\n3. 指出程序在何时结束\n4. 段与段寄存器关联\n5. 加上程序返回代码\n\n~~~c\nassume cs:abc\nabc segment\n	mov ax,2\n	add ax,ax\n	add ax,ax\n	\n	mov ax,4c00h\n	int 21h\nabc ends\nend\n~~~\n\n- 语法错误：程序在编译时被编译器发现的错误\n- 逻辑错误：程序在运行时表现的错误\n\n\n### 3. 源程序到程序运行\n- 源程序文件：（.asm）\n- 目标文件：（.obj）\n- 可执行文件：（.exe）\n\n\n==编译执行==\n\n- 编写程序：这里使用Notepad++编写\n![12121](https://img-blog.csdnimg.cn/20200927155043110.png#pic_center)\n\n- 使用masm编译文件生成.obj文件\n![121212121121](https://img-blog.csdnimg.cn/20200927155224455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n- 连接生成exe文件\n![1212121](https://img-blog.csdnimg.cn/20200927155626956.png#pic_center)\n\n### 4. 使用debug跟踪程序的执行\n- 用debug装载程序\n![456](https://img-blog.csdnimg.cn/20200927160403437.png#pic_center)\n- t命令：继续命令p（proceed）类似T命令，逐条执行指令、显示结果。但是遇到子程序、中断等时，直接执行，然后显示结果\n- g命令：运行指令G（GO）从指定地址开始运行程序，直到遇到断点或者程序程序正常结束\n\n\n### 5. [...]与(...)的约定\n- [...]：（汇编语法规定）表示一个内存单元\n\n![12345](https://img-blog.csdnimg.cn/20200927161517375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n- (...)：（为学习方便做出的约定）表示一个内存单元或寄存器中内容\n- idata：约定表示常量\n\n\n### 6. Loop指令\n- 功能：实现循环（计数型循环）\n- 指令的格式：（loop 标号）\n\n![34678](https://img-blog.csdnimg.cn/20200927162907793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n- CPU执行loop指令时要进行的操作\n  - cx要提前存放循环次数，cx影响loop指令的执行结果\n  - （cx）=（cx）-1\n  - 判断cx中的值：不为0转至标号处，为0则向下执行\n\n\n### 7. 将数据、代码、栈放入不同段\n\n![143124123432423](https://img-blog.csdnimg.cn/20200927170126417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n```c\nassume cs:code\ndata segment\n	dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h\ndata ends\n\nstack segment\n	dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\nstack ends\n\ncode segment\nstart:\n	;初始化各段寄存器\n	mov ax,stack\n	mov ss,ax\n	mov sp,20h\n	mov ax,data\n	mov ds,ax\n	\n	; 入栈\n	mov bx,0\n	mov cx,8\n	s:push [bx]\n	add bx,2\n	loop s\n	\n	; 出栈\n	mov bx,0\n	mov cx,8\n	s0:pop [bx]\n	add bx,2\n	loop s0\n	\n	mov ax,4c00h\n	int 21h\ncode ends\nend\n\n```\n\n\n\n\n## 内存寻址方式\n\n\n### 1. 处理字符串\n- 汇编程序中，用\'\'的方式指明数据是以字符串的形式给出的，\n- 编译器将他们转化为相应的ASCll码\n\n==大小写转换==\n- 大写+20H--->小写\n\n~~~c\nassume cs:code\ndata segment\n	db \'BaSiC\'\n	db \'iNfOrMaTiOn\'\ndata ends\n\nstack segment\n	dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\nstack ends\n\ncode segment\nstart:\n	;初始化各段寄存器\n	mov ax,stack\n	mov ss,ax\n	mov sp,20h\n	mov ax,data\n	mov ds,ax\n	\n	;第一个字符串转换为大写字母\n	mov bx,0\n	mov cx,5\n	s: mov al,[bx]\n	and al,11011111b\n	mov [bx],al\n	inc bx\n	loop s\n	\n	;第二个字符串转换为小写字母\n	mov bx,5\n	mov cx,11\n	s0: mov al,[bx]\n	or al,00100000b\n	inc bx\n	loop s0\n	\n	mov ax,4c00h\n	int 21h\ncode ends\nend start\n~~~\n\n\n### 2. [bx+idata]方式寻址\n\n- [bx+idata]表示一个内存单元，它的偏移地址为（bx）+idata（bx中的数值加上idata）\n- mov ax,[bx+200]/mov ax,[200+bx]的含义\n  - 将一个内存单元的内容送入ax\n  - 这个内存单元的长度为2字节，存放一个字\n  - 内存单元的短地址在ds中，偏移地址为200加上bx中的数值\n  - 数学化描述为：（ax）=（（ds）*16+200+（bx））\n  - 其他常用写法：\n    - mov ax,[200+bx]\n    - mov ax,200[bx]\n    - mov ax,[bx].200\n\n\n\n### 3. SI和DI寄存器（变址寄存器）\n- SI和DI是8086CPU中和BX功能相近的寄存器\n- SI：Source Index，源变址寄存器\n- DI：Destination Index，目标变址寄存器\n- SI，DI不能分成两个八位寄存器来使用\n\n```c\nassume cs:code\ndata segment\n	db \'welcome to masm!\'\n	db \'................\'\ndata ends\n\ncode segment\nstart:\n	;初始化寄存器\n	mov ax,data\n	mov ds,ax\n	\n	;开始执行数据\n	mov si,0\n	mov di,16\n	mov cx,8\n	s: mov ax [si]\n	mov [di],ax\n	add si,2\n	add di,2\n	loop s\n	\n	mov ax,4c00h\n	int 21h\ncode ends\nend start\n```\n\n### 4. [bx+si]和[bx+di]方式寻址\n- [bx+si]表示一个内存单元\n  - 偏移地址为(bx)+(si)：bx中的数值加上si中的数值\n  - 数学化描述：（ax）=（（ds）*16+（bx）+（si））\n  - 其他写法：mov ax，[bx][si]\n\n- [bx+si+idata]和[bx+di+idata]方式寻址\n  - [bx+si+idata]表示一个内存单元\n  - 偏移地址为：（bx）+（si）+idata：bx中的数值加上si中的数值，再加上idata\n  - 数学化的描述：（ax）=（（ds）*16+（bx）+（si）+idata）\n  - 其他写法：mov ax，200[bx][si]，mov ax，[bx][si].200	\n\n### 5. 用dup设置内存空间\n- 功能：dup和db、dw、dd等数据定义伪指令配合使用，用来进行数据的重复\n- db/dw/dd 重复的次数 dup（重复的字节型数据）\n![1121212121](https://img-blog.csdnimg.cn/20200929155119424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n- 定义一个200个字节的栈段：dw 200 dup(0)\n\n\n## 流程转移与子程序\n### 1. 操作符offset\n\n==转移==\n- 可以控制CPU执行内存中的某处指令\n- 可以修改IP，或同时修改 CS和IP的指令\n- 按转移行为分类：\n  - 段内转移：只修改IP，jmp ax\n  - 段间转移：同时修改CS和IP，jmp 1000:0\n- 按指令对IP的修改的范围不同分类：\n  - 段内短转移：IP修改范围-128~127\n  - 段内近转移：IP修改范围为-32768~32767\n- 按转移指令分类：\n  - 无条件转移指令，jmp\n  - 条件转移指令，jcxz\n  - 循环指令，loop\n  - 过程\n  - 中断\n\n\n- offset：取得标号的偏移地址\n- 格式：offset 标号\n\n![34421](https://img-blog.csdnimg.cn/20200929162041584.png#pic_center)\n\n\n### 2. jmp指令\n- 无条件转移：可以只修改IP，也可以同时修改CS和IP\n- jmp指令要给出两种信息：\n  - 转移的目标地址\n  - 转移的距离\n    - 段间转移（远转移）：jmp 2000：1000\n    - 段内短转移：jmp short 标号；IP修改范围为-128~127，8位转移\n    - 段内近转移：jmp near ptr 标号；IP的修改范围为：-32768~32767，16位转移\n\n==根据标号进行转移==\n\n- 常见指令的立即数均在机器指令中有体现\n- jmp short 标号\n  - 机器指令中，包含的是跳转到指令的相对位置，而不是转移的目标地址\n  - 功能：（IP）=（IP）+8位位移\n  - 原理：\n    - 8位位移=“标号”处的地址-jmp指令后的第一个字节的地址；\n    - short指明此处的位移位8位位移\n    - 8位位移的范围为-128127，用补码表示\n    - 8位位移由编译程序在编译时算出\n- jmp near ptr 标号：段内转移\n  - 功能：（IP）=（IP）+16位位移\n  - 原理：类似jmp short\n\n- jmp far ptr 标号 ：段间转移\n  - 指明了跳转的目的地址，即包含了标号的段地址CS和偏移地址IP\n\n==根据寄存器中的值转移==\n\n- jmp 16位寄存器\n- 功能：IP=（16位寄存器）：jmp ax\n\n\n==转移地址在内存中的jmp指令==\n\n- jmp word ptr 内存单元地址：\n  - 段内转移\n  - 从内存单元地址处开始存放着一个字，是转移的目的偏移地址\n\n\n- jmp dword ptr 内存单元地址：\n  - 段间转移\n  - 从内存单元地址处开始存放两个字，高地址处的字是转移的目的段地址，低地址处是转移的目的偏移地址\n\n\n![124132323233](https://img-blog.csdnimg.cn/20200929171852980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n- 在源程序中不允许直接写 2000：1000指定地址转移，编译时会报错\n\n\n==jcxz指令==\n\n- 格式：jcxz 标号\n- 功能：\n  - 如果（cx）=0,则转移到标号处执行，（IP）=（IP）+8位位移\n    - 8位位移=“标号”处的地址-jcxz指令后的第一个字节的地址，补码表示，编译程序编译出来的\n  - 当（cx）!=0时，什么也不做（程序向下执行）\n- jcxz是条件转移指令\n  - 所有的有条件转移指令都是短转移\n  - 对于IP的修改范围都是-128~127\n  - 在对应的机器码中包含转移的位移，而不是目的地址\n\n==loop指令==\n\n- 格式：loop 标号\n- 指令操作：\n  - （cx）=（cx）-1\n  - 当（cx）！=0时，则转移到标号处执行，（IP）=（IP）+8位位移\n  - 当（cx）=0时，程序向下执行\n\n### 3. call指令和ret指令\n\n- call：调用子程序\n- ret：返回指令\n\n![52822222](https://img-blog.csdnimg.cn/20200929184744399.png#pic_center)\n==call==\n\n- 实质：流程转移指令，他们都修改IP或同时修改CS和IP，实现原理和jmp指令相似\n- CPU执行call指令，进行两步操作：\n  - 将当前的IP或CS：IP压入栈中\n  - 转移到标号处执行指令\n\n- call标号 \n  - 16位位移=“标号”处的地址 -call指令后的第一个字节的地址\n  - 16位位移的范围位 -32768~32767，用补码表示\n  - 16位位移由编译程序在编译时算出\n\n==call far ptr 标号==\n\n- 实现的是段间转移，把段地址也压栈了\n- CPU执行“call for ptr 标号”时的操作\n  - （SP）=（SP）-2\n  - （（SS）x16+（SP））=（CS）\n  - （SP）=（SP）-2\n  - （（SS）x16+（SP））=（IP）\n  - （CS）：标号所在的段地址\n  - （IP）：标号所在的偏移地址\n\n\n==转移地址在寄存器中的call==\n\n- 格式：call 16位寄存器\n- 功能：\n  - （SP）=（SP）-2\n  - （（SS）*16+（SP））=（IP）\n  - （IP）=（16位寄存器）\n\n==转移地址在内存中的call==\n\n- 格式：call word ptr 内存单元地址：把IP放入栈中	\n- 格式：call dword ptr 内存单元：把IP和CS都放入栈中\n\n\n\n==ret指令和retf==\n\n![21312](https://img-blog.csdnimg.cn/20200929191958982.png#pic_center)\n\n\n\n### 4. DF标志和段传送指令\n==DF==\n\n- 方向标志位（Direction Flag）\n- 功能：\n  - 在串处理指令中，控制每次操作后si，di的递减\n  - DF=0：每次操作后si，di递增\n  - DF=1：每次操作后si，di递减\n- 对DF指令进行设置的指令\n  - cld指令：将标志寄存器的DF位设为0（clear）\n  - std指令：将标志寄存器的DF位设为1（setup）\n\n\n\n\n\n==串传送指令==\n\n- movsb：（以字节为单位传送）\n  - （（ES）x16+（DI））=（（DS）x16+（SI））\n  - 如果DF=0则：（SI）=（SI）+1，（DI）=（DI）+1\n  - 如果DF=1则：（SI）=（SI）-1，（DI）=（DI）-1\n\n\n- movsw：（以字为单位传送）\n  - （（ES）x16+（DI））=（（DS）x16+（SI））\n  - 如果DF=0则：（SI）=（SI）+2，（DI）=（DI）+2\n  - 如果DF=1则：（SI）=（SI）-2，（DI）=（DI）-2\n\n\n- 字符串的复制\n```c\nassume cs:code\ndata segment\n	db \'welcome to masm!\'\n	db 16 dup(0)\ndata ends\n\ncode segment\nstart:\n	;初始化寄存器\n	mov ax,data\n	mov ds,ax\n	mov si,0\n	mov es,ax\n	mov di,16\n	cld\n	\n	;循环传送\n	mov cx,16\n	s:movsb\n	loop s\n	\n	mov ax,4c00h\n	int 21h\ncode ends\nend start\n```\n\n\n==rep指令==\n\n- rep指令常和串传送指令搭配使用\n- 功能：根据cx的值，重复执行后面的指令\n- 用法：rep movsb \n\n![12121212](https://img-blog.csdnimg.cn/20200929195134579.png#pic_center)\n\n- 上面一段代码可简化为\n```c\nassume cs:code\ndata segment\n	db \'welcome to masm!\'\n	db 16 dup(0)\ndata ends\n\ncode segment\nstart:\n	;初始化寄存器\n	mov ax,data\n	mov ds,ax\n	mov si,0\n	mov es,ax\n	mov di,16\n	cld\n	\n	;循环传送\n	mov cx,8\n	rep movsw\n	\n	mov ax,4c00h\n	int 21h\ncode ends\nend start\n```\n\n\n\n## 中断及外部设备的操作\n### 1. 移位指令\n\n- 逻辑左移：SHL OPR，CNT：把最高位移动到CF中，其他左移一位，低位补0\n- 循环左移：ROL OPR，CNT：最高位移动到最低位，其他位顺序左移\n- 逻辑右移：SHR OPR，CNT：把最低位移动到CF中，其他右移一位，高位补1\n- 算术左移：SAL OPR，CNT：和逻辑左移一样\n- 算术右移：SAR OPR，CNT：把最低位移到CF，其他右移，高位复制一份\n- 带进位循环左移：RCL OPR，CNT：最高位放到CF中，原CF中的放到最低位，其他左移一位\n- 带进位循环右移：RCR OPR，CNT：最高位补原CF的数\n\n![1231231231](https://img-blog.csdnimg.cn/20201002083646718.png#pic_center)\n\n\n### 2. 操作显示原理\n==屏幕上的内容=显存中的数据==\n\n![1212312312](https://img-blog.csdnimg.cn/20201002084242791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n![1231212](https://img-blog.csdnimg.cn/20201002084338469.png#pic_center)\n\n- 显存中的结构，每个字符有两个位表示\n\n![32qwr](https://img-blog.csdnimg.cn/2020100208485385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n- 显示例子：在屏幕中间显示：welcome to masm!\n\n\n~~~c\nassume cs:code\ndata segment\n	db \'welcome to masm!\'\ndata ends\n\ncode segment\nstart:\n	;初始化寄存器\n	mov ax,data\n	mov ds,ax\n	mov ax,0B800H\n	mov si,0\n	mov es,ax\n	mov di,160*12+80-16\n	\n	;显示字符串\n	mov cx,16\n	w:mov al,[si]\n	mov es:[di],al\n	inc di\n	mov al,71H\n	mov es:[di],al\n	inc si\n	inc di\n	loop w\n	\n	mov ax,4c00h\n	int 21h\ncode ends\nend start\n~~~\n\n### 3. 描述内存单元的标号\n\n- 数据标号同时描述内存地址和内存单元长度\n- 扩展用法：将标号当作数据来定义\n\n\n\n### 4. 直接定址表\n==数据的直接定址表==\n\n- 利用表，在两个数据集合之间建立一种映射关系，用查表的方法根据给出的数据得到其在另一集合中的对应数据\n\n## 高级汇编语言技术（宏汇编）\n\n\n### 1. 子程序的另一种写法\n~~~c\n名称 proc\n...\n名称 endp\n~~~\n![345634633](https://img-blog.csdnimg.cn/20201002110254727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n### 2. 程序的多文件组织\n\n- 文件中引用另一个文件：==extern 名称:far==\n- 被引用的文件头部申明可以被引用：==public 名称==\n- 编译时分别编译：\n  - ==masm p1==\n  - ==masm p2==\n  - ==link p1.OBJ+p2.OBJ==\n- 默认生成：p1.exe\n\n\n### 3. 汇编指令汇总\n\n- 数据传送指令\n  - 通用数据传送指令：mov，push，pop，xchg（交换指令：xchg 操作数1 操作数2）\n  - 累加器专用传送指令：in，out，xlat（换码指令：xlat或xlat opr）\n  - 地址传送指令：LEA（有效地址送寄存器指令），LDS（指针送寄存器和DS指令），LES（指针送寄存器和ES指令）\n  - 标志寄存器传送指令：LAHF（标志送AH指令），SAHF（AH送标志寄存器指令），PUSHF（标志进栈指令），POPF（标志出栈指令）\n  - 类型转换指令：CBW（字节转字指令），CWD（字转字节指令）\n\n\n- 算术指令\n  - 加法指令：ADD，ADC（带进位的加法），INC（加1）\n  - 减法指令：SUB，SBB（带借位的减法），DEC（减1），NEG（取负），CMP（减法，不影响操作数，只影响标志位）\n  - 乘法：MUL，IMUL（有符号数的乘法）\n  - 除法：DIV，IDIV（有符号数除法）\n  - 十进制指令：DAA（压缩BCD码加法十进制调整指令），DAS（压缩BCD码减法法十进制调整指令），AAA（非压缩BCD码加法十进制调整指令），AAS（非压缩BCD码减法十进制调整指令），AAM（非压缩BCD码乘法十进制调整指令），AAD（非压缩BCD码除法十进制调整指令）\n\n\n- 逻辑指令\n  - 逻辑运算指令：AND，OR，NOT，XOP，TEST\n  - 移位指令：SHL，SHR，SAL，SAR，ROL，ROR，RCL，RCR\n\n- 串处理指令\n  - 设置方向标志指令：CLD，STD\n  - 串处理指令：MOVSB/MOVSW，STOSB/STOSW，LODSB／LODSW，CMPSB／CMPSW，SCASB／SCASW\n\n\n- 控制转移指令\n  - 无条件转移指令：JMP\n  - 条件转移指令\n  - 循环指令：LOOP，LOOPZ/LOOPE，LOOPNZ/LOOPNE\n  - 子程序调用和返回指令：CALL，RET\n  - 中断与中断返回指令：INT，INTO，IRET \n\n- 处理机控制与杂项操作指令\n  - 标志处理指令：CLC，STC，CMC，CLD，STD，CLI，STI\n  - 其他处理机控制与杂项操作指令：\n    - NOP：无操作（机器码占一个字节）\n    - HTL：暂停机（等待一次外中断，之后继续执行程序）\n    - WAIT：等待（等待中断，之后仍继续等待）\n    - ESC：换码\n    - LOCK：封锁（维持总线的锁存信号，直到其后的指令执行完）\n\n\n### 4. 汇编伪操作汇总\n**伪操作**：在汇编程序对源程序汇编期间，由汇编程序处理的操作，可以完成如数据定义、分配存储区、指示程序结束等指令\n\n- 处理器选择伪操作\n![222222](https://img-blog.csdnimg.cn/20201002150624379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n- 段定义伪操作\n  - data segment     data ends：定义数据段\n  - extra segment     extra segment：定义附加段\n  - code segment    code segment：定义代码段\n![231312](https://img-blog.csdnimg.cn/20201002150957588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n- 程序开始和结束伪操作\n\n- ![1212](https://img-blog.csdnimg.cn/2020100215350427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n\n\n- 数据定义及存储器分配伪操作\n  - 助记符：DB，DW，DD，DF，DQ，DT\n- 表达式赋值伪操作\n  - 表达式名 EQU 表达式\n  - = 伪操作（允许重定义）\n- 地址计数器与对准伪操作\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201002155109224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n- 基数控制器伪操作\n\n\n\n\n### 5. 汇编操作符汇总\n\n- 算术操作符：+，-，*，/，MOD\n- 逻辑和移位操作符号：and，or，xor，not，shl，shr\n- 关系操作符：EQ（等于），NE（不等于），LT（小于），LE（小于等于），GT（大于），GE（大于等于）\n- 数值回送操作符：OFFSET（回送变量或标号的偏址/段址）、SEG、TYPE、LENGTH（回送由DUP定义的变量的单元数，其他情况返回1）、SIZE\n- 属性操作符：\n![12312312](https://img-blog.csdnimg.cn/20201002163139359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n### 6. 汇编过程\n\n![123123](https://img-blog.csdnimg.cn/20201002163940977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n- 伪指令不产生机器码\n- 汇编指令和机器码是一一对应的\n\n- Binary Viewer：一个文件查看器\n',2,'123456',2),(23,6,'2020-10-15 19:04:17','考研数学一','  数学是科学的皇后。','http://108lan.com:8001/images/2020/10/15/2f1f254a936c4cf0b0787cbf72bdffcf.jpg','<h1><a id=\"_0\"></a>考研数学一</h1>\n<h2><a id=\"_1\"></a><em>简介</em></h2>\n<p>  本文将记录2022届考研数学一的复习之旅。希望对学弟学妹们有所帮助，也希望对数学有兴趣的朋友可以积极加入我们，一同探讨数学之美。</p>\n<blockquote>\n<p>  <em>数学是科学的皇后。</em><br />\n                         ----<em>高斯</em></p>\n</blockquote>\n<p>  整个备考过程将持续12~13个月，大致分为三个阶段：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">阶段</th>\n<th style=\"text-align:center\">持续时间</th>\n<th style=\"text-align:center\">内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">基础阶段</td>\n<td style=\"text-align:center\">6~7月</td>\n<td style=\"text-align:center\">巩固基础</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">强化阶段</td>\n<td style=\"text-align:center\">4~5月</td>\n<td style=\"text-align:center\">强化训练</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">冲刺阶段</td>\n<td style=\"text-align:center\">1~2月</td>\n<td style=\"text-align:center\">实战模拟</td>\n</tr>\n</tbody>\n</table>\n<h2><a id=\"2021_12\"></a><em>2021届考研数学大纲</em></h2>\n<p>  【中国研究生招生信息网中的链接没找到】</p>\n<blockquote>\n<p><a href=\"https://kaoyan.wendu.com/2019/0708/138132.shtml\" target=\"_blank\">https://kaoyan.wendu.com/2019/0708/138132.shtml</a></p>\n</blockquote>\n<h2><a id=\"_15\"></a><em>传送门</em></h2>\n<p>  我将持续更新本专栏内容，并将链接集合到这里。</p>\n<h2><a id=\"_17\"></a><em>致读者</em></h2>\n<p>  本专栏目的是汇集对数学感兴趣的同仁一同在数学之海中遨游，欢迎大家积极投稿，我将定期将其中有意思的部分更新到栏目中。</p>\n<blockquote>\n<p>联系方式：<br />\nQQ:1367786538<br />\n邮箱：1367786538@qq.com</p>\n</blockquote>\n','# 考研数学一\n## *简介*\n&ensp;&ensp;本文将记录2022届考研数学一的复习之旅。希望对学弟学妹们有所帮助，也希望对数学有兴趣的朋友可以积极加入我们，一同探讨数学之美。\n> &ensp;&ensp;*数学是科学的皇后。*\n> &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;----*高斯*\n\n&ensp;&ensp;整个备考过程将持续12~13个月，大致分为三个阶段：\n|阶段|持续时间|内容|\n|:-----:|:-----:|:----------:|\n|基础阶段|6~7月|巩固基础|\n|强化阶段|4~5月|强化训练|\n|冲刺阶段|1~2月|实战模拟|\n## *2021届考研数学大纲*\n&ensp;&ensp;【中国研究生招生信息网中的链接没找到】\n> <https://kaoyan.wendu.com/2019/0708/138132.shtml>\n## *传送门*\n&ensp;&ensp;我将持续更新本专栏内容，并将链接集合到这里。\n## *致读者*\n&ensp;&ensp;本专栏目的是汇集对数学感兴趣的同仁一同在数学之海中遨游，欢迎大家积极投稿，我将定期将其中有意思的部分更新到栏目中。\n> 联系方式：\n> QQ:1367786538\n> 邮箱：1367786538@qq.com\n\n\n\n',3,'123456',0),(24,5,'2020-10-15 19:06:33','python爬虫-分析猎聘网求职信息','使用python爬取猎聘网的职位数据，关键词“数据挖掘”，爬取热门数据4000多条数据，使用可视化工具绘制图表显示数据。','https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3457606070,4283347864&fm=26&gp=0.jpg','<p><h3>目录</h3><ul><li><a href=\"#_2\">猎聘网信息爬取</a></li><ul><li><a href=\"#_15\">爬取职位链接</a></li><ul><li><a href=\"#1_URL_16\">1. 构建URL：</a></li><li><a href=\"#2__54\">2. 获取网页</a></li><li><a href=\"#3__83\">3. 解析网页</a></li><li><a href=\"#4__125\">4. 保存数据到表格</a></li></ul><li><a href=\"#_141\">爬取职位详情信息</a></li><ul><li><a href=\"#1__147\">1. 基本步骤</a></li><li><a href=\"#2__177\">2. 获取表格链接</a></li><li><a href=\"#3__194\">3. 获取职位详情信息网页</a></li><li><a href=\"#4__198\">4. 解析详情网页得到数据</a></li><li><a href=\"#5__270\">5. 保存数据到数据库</a></li></ul><li><a href=\"#_311\">可视化职位信息</a></li><ul><li><a href=\"#1__315\">1. 首页</a></li><li><a href=\"#2__322\">2. 职位列表</a></li><li><a href=\"#3__355\">3. 薪水分析</a></li><li><a href=\"#4__405\">4. 职位描述词云</a></li><li><a href=\"#5_apppy_414\">5. app.py文件代码</a></li></ul></ul></ul></p>\n<h1><a id=\"_2\"></a>猎聘网信息爬取</h1>\n<p><img src=\"https://img-blog.csdnimg.cn/20201015191425645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"121212121\" /></p>\n<ul>\n<li>爬取猎聘网信息是为了完成需求分析这门课的作业</li>\n<li>哎，为了完成作业，五天入门python爬虫，找了个视频就开始了，学习笔记如下<a href=\"https://blog.csdn.net/qq_43309907/article/details/108919658\" target=\"_blank\">爬取豆瓣笔记</a></li>\n<li>这篇博客用来记录，爬取猎聘网的整个过程</li>\n<li>爬取过程整体分为三个过程：\n<ul>\n<li>爬取职位链接</li>\n<li>爬取职位详情信息</li>\n<li>可视化信息统计</li>\n</ul>\n</li>\n</ul>\n<h2><a id=\"_15\"></a>爬取职位链接</h2>\n<h3><a id=\"1_URL_16\"></a>1. 构建URL：</h3>\n<pre><div class=\"hljs\"><code class=\"lang-python\">https://www.liepin.com/zhaopin/?compkind=&amp;dqs=<span class=\"hljs-number\">010</span>&amp;pubTime=&amp;pageSize=<span class=\"hljs-number\">40</span>&amp;salary=&amp;compTag=&amp;sortFlag=&amp;compIds=&amp;subIndustry=&amp;jobKind=&amp;industries=&amp;compscale=&amp;key=%E6%<span class=\"hljs-number\">95</span>%B0%E6%<span class=\"hljs-number\">8</span>D%AE%E6%<span class=\"hljs-number\">8</span>C%<span class=\"hljs-number\">96</span>%E6%<span class=\"hljs-number\">8</span>E%<span class=\"hljs-number\">98</span>&amp;siTag=LiAE77uh7ygbLjiB5afMYg%<span class=\"hljs-number\">7</span>EfA9rXquZc5IkJpXC-Ycixw&amp;d_sfrom=search_fp&amp;d_ckId=cd34a20d8742a36fa58243aee1ca77fe&amp;d_curPage=<span class=\"hljs-number\">0</span>&amp;d_pageSize=<span class=\"hljs-number\">40</span>&amp;d_headId=cd34a20d8742a36fa58243aee1ca77fe\n</code></div></pre>\n<ul>\n<li>https://www.liepin.com：域名</li>\n<li>/zhaopin/：网站前缀</li>\n<li>?：问号后面接参数</li>\n<li>这里我们要爬取关键词为“数据挖掘”各个地区的职位信息来分析，所以要分析的关键词为（key），和地区参数（dqs）以&amp;相连</li>\n<li>参考上述URL：（key=%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98），后面一串乱码是因为汉字在作为关键词时要序列化</li>\n<li>因为这里用urllib这个包来获取网页，所以要把汉字序列化，如果使用requests包来获取就不用</li>\n<li>调用（urllib.parse.quote(“数据挖掘”, ‘utf-8’)）这个函数来序列化汉字</li>\n</ul>\n<p>参考代码如下</p>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    job_list = []\n    key = <span class=\"hljs-string\">\"数据挖掘\"</span>\n    dqs = [<span class=\"hljs-string\">\"010\"</span>, <span class=\"hljs-string\">\"020\"</span>, <span class=\"hljs-string\">\"050020\"</span>, <span class=\"hljs-string\">\"050090\"</span>, <span class=\"hljs-string\">\"030\"</span>, <span class=\"hljs-string\">\"060080\"</span>, <span class=\"hljs-string\">\"040\"</span>, <span class=\"hljs-string\">\"060020\"</span>, <span class=\"hljs-string\">\"070020\"</span>, <span class=\"hljs-string\">\"210040\"</span>, <span class=\"hljs-string\">\"280020\"</span>, <span class=\"hljs-string\">\"170020\"</span>]\n    new_key = urllib.parse.quote(key, <span class=\"hljs-string\">\'utf-8\'</span>)\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> dqs:\n        url = <span class=\"hljs-string\">\"https://www.liepin.com/zhaopin/?key=\"</span>+new_key+<span class=\"hljs-string\">\"&amp;dqs=\"</span>+item\n        print(url)\n        <span class=\"hljs-comment\"># 获取职位列表链接</span>\n        job_html = get_job_html(url)\n        <span class=\"hljs-comment\"># 解析网页分析网页得到链接</span>\n        link_list = get_job_link(job_html)\n        <span class=\"hljs-comment\"># 把链接储存到数组中</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> link_list:\n            job_list.append(i)\n    <span class=\"hljs-comment\"># 保存职位链接到表格中</span>\n    save_link(job_list)\n</code></div></pre>\n<h3><a id=\"2__54\"></a>2. 获取网页</h3>\n<ul>\n<li>这里获取网页调用一个包：（from fake_useragent import UserAgent）</li>\n<li>需要在pip中安装：<mark>pip install fake_useragent</mark></li>\n<li>首先要构造一个请求头：猎聘网的反爬虫不是很强大，不用登录就可以访问，调用<mark>UserAgent().random</mark> 可以随机生成浏览器标识，这样就不会被阻止</li>\n<li>如果网站的反扒做的很好就要在网页的请求头上添加相应的参数，参考如下图</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20201015193453131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"1212121\" /><br />\n参考代码：</p>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_job_html</span><span class=\"hljs-params\">(url)</span>:</span>\n    print(<span class=\"hljs-string\">\"-------爬取job网页-------\"</span>)\n    html = <span class=\"hljs-string\">\"\"</span>\n    head = {\n        <span class=\"hljs-string\">\"User-Agent\"</span>: UserAgent().random\n    }\n    <span class=\"hljs-string\">\"\"\"\n    head:模拟浏览器头部信息\n    \"User-Agent\":浏览器标识\n    \"\"\"</span>\n    request = urllib.request.Request(url=url, headers=head)\n    <span class=\"hljs-keyword\">try</span>:\n        response = urllib.request.urlopen(request)\n        html = response.read().decode(<span class=\"hljs-string\">\"utf-8\"</span>)\n    <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">None</span>\n    <span class=\"hljs-keyword\">return</span> html\n</code></div></pre>\n<h3><a id=\"3__83\"></a>3. 解析网页</h3>\n<ul>\n<li>\n<p>分析网页元素获取数据<br />\n<img src=\"https://img-blog.csdnimg.cn/2020101519420828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121212\" /></p>\n</li>\n<li>\n<p>由于每一个页面只有40条数据，所以要实现自动获取获取下一页链接，来实现自动爬取，找到网页种的元素（下一页）获取下一页的链接，实现递归爬取</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20201015194850191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"121212\" /></p>\n<p>参考代码如下</p>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_job_link</span><span class=\"hljs-params\">(html)</span>:</span>\n    job_link = []\n    <span class=\"hljs-comment\"># 解析网页得到链接</span>\n    soup = BeautifulSoup(html, <span class=\"hljs-string\">\"html.parser\"</span>)\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> soup.find_all(<span class=\"hljs-string\">\'h3\'</span>):\n        <span class=\"hljs-keyword\">if</span> item.has_attr(<span class=\"hljs-string\">\"title\"</span>):\n            <span class=\"hljs-comment\"># 抽取链接内容</span>\n            link = item.find_all(<span class=\"hljs-string\">\"a\"</span>)[<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">\"href\"</span>]\n        job_link.append(link)\n        print(link)\n\n    <span class=\"hljs-keyword\">try</span>:\n        find_next_link = soup.select(<span class=\"hljs-string\">\".pager &gt; div.pagerbar &gt; a\"</span>)[<span class=\"hljs-number\">7</span>][<span class=\"hljs-string\">\'href\'</span>]\n        <span class=\"hljs-keyword\">if</span> find_next_link == <span class=\"hljs-string\">\"javascript:\"</span>:\n            <span class=\"hljs-keyword\">return</span> job_link\n        <span class=\"hljs-comment\"># 拼接上域名</span>\n        find_next_link = <span class=\"hljs-string\">\"https://www.liepin.com\"</span> + str(find_next_link).replace(<span class=\"hljs-string\">\'°\'</span>, <span class=\"hljs-string\">\'0\'</span>)\n        print(find_next_link)\n        <span class=\"hljs-comment\"># 获取到下一个网页的数据</span>\n        next_html = get_job_html(find_next_link)\n        <span class=\"hljs-comment\"># 解析网页</span>\n        <span class=\"hljs-keyword\">if</span> next_html <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">None</span>:\n            next_link = get_job_link(next_html)\n            <span class=\"hljs-keyword\">for</span> link <span class=\"hljs-keyword\">in</span> next_link:\n                job_link.append(link)\n    <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n        print(e)\n    <span class=\"hljs-keyword\">finally</span>:\n        <span class=\"hljs-keyword\">return</span> job_link\n</code></div></pre>\n<h3><a id=\"4__125\"></a>4. 保存数据到表格</h3>\n<ul>\n<li>表格操作很简单，就不赘述</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">save_link</span><span class=\"hljs-params\">(link_list)</span>:</span>\n    work_book = xlwt.Workbook(encoding=<span class=\"hljs-string\">\"utf-8\"</span>, style_compression=<span class=\"hljs-number\">0</span>)\n    work_sheet = work_book.add_sheet(<span class=\"hljs-string\">\"job_link\"</span>, cell_overwrite_ok=<span class=\"hljs-keyword\">True</span>)\n    col = <span class=\"hljs-string\">\"Link\"</span>\n    work_sheet.write(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, col)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, len(link_list)):\n        print(<span class=\"hljs-string\">\"第%d条\"</span> % i)\n        data = link_list[i]\n        work_sheet.write(i+<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, str(data))\n    work_book.save(<span class=\"hljs-string\">\"job_link.xls\"</span>)    <span class=\"hljs-comment\"># 保存数据</span>\n</code></div></pre>\n<h2><a id=\"_141\"></a>爬取职位详情信息</h2>\n<ul>\n<li>\n<p>获取到职位链接后保存在表格中，下一步就是访问这个些链接，爬取到详细信息，并保存到数据库中</p>\n</li>\n<li>\n<p>爬取开始就发现有链接的规律，有两种链接，第一种是正常的可以直接访问的，还有一种没有添加域名的，所以我们有加上域名<br />\n<img src=\"https://img-blog.csdnimg.cn/20201015194535556.png#pic_center\" alt=\"1212\" /></p>\n</li>\n</ul>\n<h3><a id=\"1__147\"></a>1. 基本步骤</h3>\n<ul>\n<li>获取表格中的链接</li>\n<li>获取网页</li>\n<li>解析网页</li>\n<li>保存数据</li>\n</ul>\n<p><strong>基本框架的搭建：</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\"># 读取表格链接</span>\n    links = read_excel_get_link()\n    <span class=\"hljs-comment\"># 获取链接网页</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, len(links)):\n        <span class=\"hljs-keyword\">if</span> links[i][<span class=\"hljs-number\">0</span>] != <span class=\"hljs-string\">\'h\'</span>:\n            links[i] = <span class=\"hljs-string\">\"https://www.liepin.com\"</span> + links[i]\n        print(links[i])\n        <span class=\"hljs-comment\"># 获取网页</span>\n        message_html = getLink.get_job_html(links[i])\n        <span class=\"hljs-keyword\">if</span> message_html <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">None</span>:\n            <span class=\"hljs-comment\"># 解析数据</span>\n            message_data = get_message_data(message_html)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-comment\"># 保存一条数据</span>\n        <span class=\"hljs-keyword\">try</span>:\n            save_datas_sql(message_data)\n        <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n            <span class=\"hljs-keyword\">continue</span>\n</code></div></pre>\n<h3><a id=\"2__177\"></a>2. 获取表格链接</h3>\n<ul>\n<li>表格操作不在赘述</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">read_excel_get_link</span><span class=\"hljs-params\">()</span>:</span>\n    links = []\n    <span class=\"hljs-comment\"># 读取表格链接数据</span>\n    <span class=\"hljs-comment\"># 打开表格</span>\n    work_book = xlrd.open_workbook(<span class=\"hljs-string\">\"job_link.xls\"</span>)\n    <span class=\"hljs-comment\"># 获取sheet</span>\n    sheet = work_book.sheet_by_index(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, sheet.nrows):\n        link = sheet.cell(i, <span class=\"hljs-number\">0</span>).value\n        links.append(link)\n    <span class=\"hljs-keyword\">return</span> links\n</code></div></pre>\n<h3><a id=\"3__194\"></a>3. 获取职位详情信息网页</h3>\n<p><mark>message_html = getLink.get_job_html(links[i])</mark></p>\n<ul>\n<li>调用上面获取职位链接时的函数：get_job_html</li>\n</ul>\n<h3><a id=\"4__198\"></a>4. 解析详情网页得到数据</h3>\n<ul>\n<li>解析网页，获取到页面的元素：\n<ul>\n<li>职位名称</li>\n<li>公司</li>\n<li>薪水</li>\n<li>职位描述<br />\n<img src=\"https://img-blog.csdnimg.cn/20201015200232184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"21321312\" /></li>\n</ul>\n</li>\n</ul>\n<p>参看网页的元素：<br />\n<img src=\"https://img-blog.csdnimg.cn/20201015200731364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></p>\n<ul>\n<li>使用标签选择器来定位元素</li>\n<li>在爬取过程中有时会遇到一些转义字符的问题需要注意</li>\n</ul>\n<p>参考代码</p>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_message_data</span><span class=\"hljs-params\">(html)</span>:</span>\n    data = []\n    soup = BeautifulSoup(html, <span class=\"hljs-string\">\"html.parser\"</span>)\n    <span class=\"hljs-keyword\">try</span>:\n        <span class=\"hljs-comment\"># 岗位名称</span>\n        title = soup.select(<span class=\"hljs-string\">\".title-info &gt; h1\"</span>)[<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">\'title\'</span>]\n        data.append(title)\n\n        <span class=\"hljs-comment\"># 公司</span>\n        company = soup.select(<span class=\"hljs-string\">\".title-info &gt; h3 &gt; a\"</span>)\n        <span class=\"hljs-keyword\">if</span> len(company) != <span class=\"hljs-number\">0</span>:\n            company = company[<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">\'title\'</span>]\n        <span class=\"hljs-keyword\">else</span>:\n            company = <span class=\"hljs-string\">\" \"</span>\n        data.append(company)\n\n        <span class=\"hljs-comment\"># 薪水</span>\n        salary = soup.select(<span class=\"hljs-string\">\".job-title-left &gt; p\"</span>)\n        <span class=\"hljs-keyword\">if</span> len(salary) != <span class=\"hljs-number\">0</span>:\n            salary = salary[<span class=\"hljs-number\">0</span>].contents[<span class=\"hljs-number\">0</span>]\n        <span class=\"hljs-keyword\">else</span>:\n            salary = <span class=\"hljs-string\">\" \"</span>\n        salary = salary \\\n            .replace(<span class=\"hljs-string\">\'\\n\'</span>, <span class=\"hljs-string\">\'\'</span>) \\\n            .replace(<span class=\"hljs-string\">\'\\t\'</span>, <span class=\"hljs-string\">\'\'</span>) \\\n            .replace(<span class=\"hljs-string\">\'\\r\'</span>, <span class=\"hljs-string\">\'\'</span>) \\\n            .replace(<span class=\"hljs-string\">\' \'</span>, <span class=\"hljs-string\">\'\'</span>) \\\n            .replace(<span class=\"hljs-string\">\'\"\'</span>, <span class=\"hljs-string\">\'\'</span>)\n        data.append(salary)\n\n        <span class=\"hljs-comment\"># 描述</span>\n        description = soup.select(<span class=\"hljs-string\">\".content.content-word\"</span>)\n        <span class=\"hljs-keyword\">if</span> len(description) != <span class=\"hljs-number\">0</span>:\n            all_des = description[<span class=\"hljs-number\">0</span>].contents\n            description = <span class=\"hljs-string\">\" \"</span>\n            <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> all_des:\n                <span class=\"hljs-keyword\">if</span> type(item) == bs4.element.NavigableString:\n                    <span class=\"hljs-comment\"># print(item)</span>\n                    description = description + item\n            <span class=\"hljs-comment\"># print(description)</span>\n        <span class=\"hljs-keyword\">else</span>:\n            description = <span class=\"hljs-string\">\" \"</span>\n        description = description \\\n            .replace(<span class=\"hljs-string\">\'\\n\'</span>, <span class=\"hljs-string\">\'\'</span>) \\\n            .replace(<span class=\"hljs-string\">\'\\t\'</span>, <span class=\"hljs-string\">\'\'</span>) \\\n            .replace(<span class=\"hljs-string\">\'\\r\'</span>, <span class=\"hljs-string\">\'\'</span>) \\\n            .replace(<span class=\"hljs-string\">\' \'</span>, <span class=\"hljs-string\">\'\'</span>) \\\n            .replace(<span class=\"hljs-string\">\'\"\'</span>, <span class=\"hljs-string\">\'\'</span>)\n        data.append(description)\n    <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n        print(e)\n    <span class=\"hljs-keyword\">finally</span>:\n        print(data)\n        <span class=\"hljs-keyword\">return</span> data\n</code></div></pre>\n<h3><a id=\"5__270\"></a>5. 保存数据到数据库</h3>\n<ul>\n<li>使用sqlite3数据库可以很好的储存数据 ，也方便查询数据</li>\n</ul>\n<p><strong>创建数据库代码</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-comment\"># 建表语句</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">init_job_sqlite</span><span class=\"hljs-params\">()</span>:</span>\n    connet = sqlite3.connect(<span class=\"hljs-string\">\"job_message.db\"</span>)  <span class=\"hljs-comment\"># 打开或创建文件</span>\n    <span class=\"hljs-comment\"># 建表</span>\n    c = connet.cursor()  <span class=\"hljs-comment\"># 获取游标</span>\n    sql = <span class=\"hljs-string\">\'\'\'\n        create table if not exists job_message(\n            id integer not null primary key autoincrement,\n            title text not null,\n            company text,\n            salary text,\n            description  text\n        )\n    \'\'\'</span>\n    c.execute(sql)  <span class=\"hljs-comment\"># 执行sql语句</span>\n    connet.commit()  <span class=\"hljs-comment\"># 提交</span>\n    connet.close()  <span class=\"hljs-comment\"># 关闭数据库</span>\n</code></div></pre>\n<p><strong>插入数据到数据库中实现数据的储存</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">save_datas_sql</span><span class=\"hljs-params\">(data)</span>:</span>\n    init_job_sqlite()  <span class=\"hljs-comment\"># 初始化数控库</span>\n    <span class=\"hljs-comment\"># 插入数据</span>\n    connet = sqlite3.connect(<span class=\"hljs-string\">\"job_message.db\"</span>)  <span class=\"hljs-comment\"># 打开或创建文件</span>\n    c = connet.cursor()  <span class=\"hljs-comment\"># 获取游标</span>\n    <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>):\n        data[index] = <span class=\"hljs-string\">\'\"\'</span> + data[index] + <span class=\"hljs-string\">\'\"\'</span>\n    sql = <span class=\"hljs-string\">\'\'\'\n        insert into job_message(title,company,salary,description)\n        values(%s)\'\'\'</span> % <span class=\"hljs-string\">\",\"</span>.join(data)\n    c.execute(sql)\n    connet.commit()\n</code></div></pre>\n<h2><a id=\"_311\"></a>可视化职位信息</h2>\n<ul>\n<li>这里使用flask框架搭建一个简单网站实现数据的可视化</li>\n<li>首先在网上随便找一个网页模板下载下来：<a href=\"http://sc.chinaz.com/moban/\" target=\"_blank\">参考下载网站</a></li>\n</ul>\n<h3><a id=\"1__315\"></a>1. 首页</h3>\n<ul>\n<li>一些前端展示，这里不在赘述</li>\n<li>在这里贴上我的文件结构<br />\n<img src=\"https://img-blog.csdnimg.cn/20201015202904706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"123456\" /></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20201015202222983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></p>\n<h3><a id=\"2__322\"></a>2. 职位列表</h3>\n<ul>\n<li>这里就是一个查询数据库的过程</li>\n<li>把数据库中的数据展示在网页上</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20201015202356970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"12121\" /></p>\n<ul>\n<li>\n<p>关于数据库中的数据如何展现在静态网页上，我这上一篇学习的博客中有记录<a href=\"https://blog.csdn.net/qq_43309907/article/details/108919658\" target=\"_blank\">爬取豆瓣笔记</a></p>\n</li>\n<li>\n<p>由于数据太多，这里选取前100条数据显示出来</p>\n</li>\n<li>\n<p>python代码参考下面的app.py中的代码</p>\n</li>\n<li>\n<p>关键前端代码如下</p>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"table table-hover table-light\"</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>id<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>职位<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>公司<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>工资<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>职位描述<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n			{%for job in jobs%}\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{job[0]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{job[1]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{job[2]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{job[3]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{job[4]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n			{%endfor%}\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n</code></div></pre>\n<h3><a id=\"3__355\"></a>3. 薪水分析</h3>\n<ul>\n<li>关于薪水的分布，我们可以用把数据库中的数据读取出来，做个计算，统计薪水的分布图\n<ul>\n<li>薪水的格式都是：a-bk·c薪，统计公式：ave = (x + y) / 2 * z/10得到统计结果，并排序一下</li>\n<li>这里使用百度的echarts来实现，<a href=\"https://echarts.apache.org/examples/zh/index.html\" target=\"_blank\">百度echarts跳转链接</a></li>\n<li>这里要引入一个js文件：<a href=\"https://echarts.apache.org/zh/tutorial.html#5%20%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%20ECharts\" target=\"_blank\">上手链接</a></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20201015203114601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"121212\" /><br />\n关键前端代码：</p>\n<pre><div class=\"hljs\"><code class=\"lang-html\">		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"main\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width: 100%;height:450px;margin: 0 auto;\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">\n	<span class=\"hljs-comment\">// 基于准备好的dom，初始化echarts实例</span>\n	<span class=\"hljs-keyword\">var</span> myChart = echarts.init( <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\'main\'</span>));\n	<span class=\"hljs-keyword\">var</span> data = {{ data }};\n	option = {\n		<span class=\"hljs-attr\">xAxis</span>: {\n			<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'value\'</span>,\n			<span class=\"hljs-attr\">splitLine</span>: {\n				<span class=\"hljs-attr\">lineStyle</span>: {\n					<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'dashed\'</span>\n				}\n			},\n			<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"年薪/万\"</span>,\n			<span class=\"hljs-attr\">splitNumber</span>: <span class=\"hljs-number\">10</span>\n		},\n		<span class=\"hljs-attr\">yAxis</span>: {\n			<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'value\'</span>,\n			<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"统计/个\"</span>,\n			<span class=\"hljs-attr\">splitLine</span>: {\n				<span class=\"hljs-attr\">lineStyle</span>: {\n					<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'dashed\'</span>\n				}\n			}\n		},\n		<span class=\"hljs-attr\">series</span>: [{\n			<span class=\"hljs-attr\">symbolSize</span>: <span class=\"hljs-number\">10</span>,\n			<span class=\"hljs-attr\">data</span>: data,\n			<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'scatter\'</span>\n		}]\n	};\n\n\n	<span class=\"hljs-comment\">// 使用刚指定的配置项和数据显示图表。</span>\n	myChart.setOption(option);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></div></pre>\n<h3><a id=\"4__405\"></a>4. 职位描述词云</h3>\n<ul>\n<li>词云的生成使用jieba分词器来实现</li>\n<li>使用wordcloud来绘图：<a href=\"http://amueller.github.io/word_cloud/generated/wordcloud.WordCloud.html\" target=\"_blank\">参考文档链接</a></li>\n<li>具体实现参考下方app.py代码</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20201015203600789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"23131312\" /></p>\n<h3><a id=\"5_apppy_414\"></a>5. app.py文件代码</h3>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask, render_template\n<span class=\"hljs-keyword\">import</span> sqlite3\n<span class=\"hljs-keyword\">import</span> jieba  <span class=\"hljs-comment\"># 分词</span>\n<span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot <span class=\"hljs-keyword\">as</span> plt  <span class=\"hljs-comment\"># 绘图，数据可视化</span>\n<span class=\"hljs-keyword\">from</span> wordcloud <span class=\"hljs-keyword\">import</span> WordCloud  <span class=\"hljs-comment\"># 词云</span>\n<span class=\"hljs-keyword\">from</span> PIL <span class=\"hljs-keyword\">import</span> Image  <span class=\"hljs-comment\"># 图片处理</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np  <span class=\"hljs-comment\"># 矩阵运算</span>\n<span class=\"hljs-keyword\">import</span> re\n\napp = Flask(__name__)\n\n\n<span class=\"hljs-meta\">@app.route(\'/\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">home</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"home.html\"</span>)\n\n\n<span class=\"hljs-meta\">@app.route(\'/job\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">movie</span><span class=\"hljs-params\">()</span>:</span>\n    list = []\n    connet = sqlite3.connect(<span class=\"hljs-string\">\"./liepin/job_message.db\"</span>)  <span class=\"hljs-comment\"># 打开或创建文件</span>\n    c = connet.cursor()  <span class=\"hljs-comment\"># 获取游标</span>\n    sql = <span class=\"hljs-string\">\'\'\'select * from job_message LIMIT ((0-1)*100),100\'\'\'</span>\n    datas = c.execute(sql)\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> datas:\n        list.append(item)\n    c.close()\n    connet.close()\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"job.html\"</span>, jobs=list)\n\n\n<span class=\"hljs-meta\">@app.route(\'/salary\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">score</span><span class=\"hljs-params\">()</span>:</span>\n    data = []\n    con = sqlite3.connect(<span class=\"hljs-string\">\"./liepin/job_message.db\"</span>)\n    cur = con.cursor()\n    sql = <span class=\"hljs-string\">\"select salary,count(salary) from job_message group by salary\"</span>\n    datas = cur.execute(sql)\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> datas:\n        point = []\n        s = re.search(<span class=\"hljs-string\">r\"(\\d*)-(\\d*)k·(\\d*)薪\"</span>, item[<span class=\"hljs-number\">0</span>])\n        <span class=\"hljs-keyword\">if</span> s <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">None</span>:\n            <span class=\"hljs-keyword\">continue</span>\n        x = int(s.group(<span class=\"hljs-number\">1</span>))\n        y = int(s.group(<span class=\"hljs-number\">2</span>))\n        z = int(s.group(<span class=\"hljs-number\">3</span>))\n        ave = (x + y) / <span class=\"hljs-number\">2</span> * z/<span class=\"hljs-number\">10</span>\n        point.append(ave)\n        point.append(int(item[<span class=\"hljs-number\">1</span>]))\n        data.append(point)\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, len(data)):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, len(data) - <span class=\"hljs-number\">1</span>):\n            <span class=\"hljs-keyword\">if</span> data[j][<span class=\"hljs-number\">0</span>] &gt; data[j + <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]:\n                a = data[j][<span class=\"hljs-number\">0</span>]\n                data[j][<span class=\"hljs-number\">0</span>] = data[j + <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]\n                data[j + <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] = a\n                b = data[j][<span class=\"hljs-number\">1</span>]\n                data[j][<span class=\"hljs-number\">1</span>] = data[j + <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]\n                data[j + <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] = b\n    print(data)\n    cur.close()\n    con.close()\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"salary.html\"</span>, data=data)\n\n\n<span class=\"hljs-meta\">@app.route(\'/word\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">word</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\"># 获取数据</span>\n    con = sqlite3.connect(<span class=\"hljs-string\">\"./liepin/job_message.db\"</span>)\n    cur = con.cursor()\n    sql = <span class=\"hljs-string\">\"select description from job_message\"</span>\n    data = con.execute(sql)\n    <span class=\"hljs-comment\"># 拼接</span>\n    text = <span class=\"hljs-string\">\"\"</span>\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> data:\n        text = text + item[<span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-comment\"># 停用词列表</span>\n    stopwords = [<span class=\"hljs-string\">\'任职\'</span>, <span class=\"hljs-string\">\'要求\'</span>, <span class=\"hljs-string\">\'职位\'</span>,\n                 <span class=\"hljs-string\">\'描述\'</span>, <span class=\"hljs-string\">\'优先\'</span>, <span class=\"hljs-string\">\'，\'</span>,\n                 <span class=\"hljs-string\">\'相关\'</span>, <span class=\"hljs-string\">\'专业\'</span>, <span class=\"hljs-string\">\'熟练\'</span>,\n                 <span class=\"hljs-string\">\'使用\'</span>, <span class=\"hljs-string\">\'工作\'</span>, <span class=\"hljs-string\">\'职责\'</span>]\n    cut = jieba.cut(text, cut_all=<span class=\"hljs-keyword\">False</span>)\n    print(type(cut))\n    final = []\n    <span class=\"hljs-keyword\">for</span> seg <span class=\"hljs-keyword\">in</span> cut:\n        <span class=\"hljs-keyword\">if</span> seg <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> stopwords:\n            print(seg)\n            final.append(seg)\n\n    string = <span class=\"hljs-string\">\" \"</span>.join(final)\n    cur.close()\n    con.close()\n    <span class=\"hljs-comment\"># 找到一张图片</span>\n    img = Image.open(<span class=\"hljs-string\">\"./static/timg.jpg\"</span>)  <span class=\"hljs-comment\"># 打开遮罩图片</span>\n    img_array = np.array(img)  <span class=\"hljs-comment\"># 将图片转换为数组</span>\n    wold_cloud = WordCloud(\n        background_color=<span class=\"hljs-string\">\"#FFFFFF\"</span>,\n        mask=img_array,\n        font_path=<span class=\"hljs-string\">\"STKAITI.TTF\"</span>,  <span class=\"hljs-comment\"># 字体所在位置</span>\n    ).generate_from_text(string)  <span class=\"hljs-comment\"># 放入词</span>\n    <span class=\"hljs-comment\"># 绘制图片</span>\n    fig = plt.figure(<span class=\"hljs-number\">1</span>)\n    plt.imshow(wold_cloud)\n    plt.axis(<span class=\"hljs-string\">\'off\'</span>)  <span class=\"hljs-comment\"># 不显示坐标轴</span>\n    <span class=\"hljs-comment\"># plt.show()  # 显示生成的词云图片</span>\n    plt.savefig(<span class=\"hljs-string\">\"./static/word.jpg\"</span>, dpi=<span class=\"hljs-number\">300</span>)\n\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"word.html\"</span>)\n\n\n<span class=\"hljs-meta\">@app.route(\'/author\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">author</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"author.html\"</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\'__main__\'</span>:\n    app.run(debug=<span class=\"hljs-keyword\">True</span>)\n\n</code></div></pre>\n','@[toc](目录)\n\n# 猎聘网信息爬取\n\n![121212121](https://img-blog.csdnimg.cn/20201015191425645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n- 爬取猎聘网信息是为了完成需求分析这门课的作业\n- 哎，为了完成作业，五天入门python爬虫，找了个视频就开始了，学习笔记如下[爬取豆瓣笔记](https://blog.csdn.net/qq_43309907/article/details/108919658)\n- 这篇博客用来记录，爬取猎聘网的整个过程\n- 爬取过程整体分为三个过程：\n  - 爬取职位链接\n  - 爬取职位详情信息\n  - 可视化信息统计\n\n## 爬取职位链接\n### 1. 构建URL：\n\n```python\nhttps://www.liepin.com/zhaopin/?compkind=&dqs=010&pubTime=&pageSize=40&salary=&compTag=&sortFlag=&compIds=&subIndustry=&jobKind=&industries=&compscale=&key=%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98&siTag=LiAE77uh7ygbLjiB5afMYg%7EfA9rXquZc5IkJpXC-Ycixw&d_sfrom=search_fp&d_ckId=cd34a20d8742a36fa58243aee1ca77fe&d_curPage=0&d_pageSize=40&d_headId=cd34a20d8742a36fa58243aee1ca77fe\n```\n- https://www.liepin.com：域名\n- /zhaopin/：网站前缀\n- ?：问号后面接参数\n- 这里我们要爬取关键词为“数据挖掘”各个地区的职位信息来分析，所以要分析的关键词为（key），和地区参数（dqs）以&相连\n- 参考上述URL：（key=%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98），后面一串乱码是因为汉字在作为关键词时要序列化\n- 因为这里用urllib这个包来获取网页，所以要把汉字序列化，如果使用requests包来获取就不用\n- 调用（urllib.parse.quote(“数据挖掘”, \'utf-8\')）这个函数来序列化汉字\n\n参考代码如下\n\n~~~python\ndef main():\n    job_list = []\n    key = \"数据挖掘\"\n    dqs = [\"010\", \"020\", \"050020\", \"050090\", \"030\", \"060080\", \"040\", \"060020\", \"070020\", \"210040\", \"280020\", \"170020\"]\n    new_key = urllib.parse.quote(key, \'utf-8\')\n    for item in dqs:\n        url = \"https://www.liepin.com/zhaopin/?key=\"+new_key+\"&dqs=\"+item\n        print(url)\n        # 获取职位列表链接\n        job_html = get_job_html(url)\n        # 解析网页分析网页得到链接\n        link_list = get_job_link(job_html)\n        # 把链接储存到数组中\n        for i in link_list:\n            job_list.append(i)\n    # 保存职位链接到表格中\n    save_link(job_list)\n~~~\n\n\n\n\n### 2. 获取网页\n- 这里获取网页调用一个包：（from fake_useragent import UserAgent）\n- 需要在pip中安装：==pip install fake_useragent==\n- 首先要构造一个请求头：猎聘网的反爬虫不是很强大，不用登录就可以访问，调用==UserAgent().random== 可以随机生成浏览器标识，这样就不会被阻止\n- 如果网站的反扒做的很好就要在网页的请求头上添加相应的参数，参考如下图\n\n![1212121](https://img-blog.csdnimg.cn/20201015193453131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n参考代码：\n\n~~~python\ndef get_job_html(url):\n    print(\"-------爬取job网页-------\")\n    html = \"\"\n    head = {\n        \"User-Agent\": UserAgent().random\n    }\n    \"\"\"\n    head:模拟浏览器头部信息\n    \"User-Agent\":浏览器标识\n    \"\"\"\n    request = urllib.request.Request(url=url, headers=head)\n    try:\n        response = urllib.request.urlopen(request)\n        html = response.read().decode(\"utf-8\")\n    except Exception as e:\n        return None\n    return html\n~~~\n\n### 3. 解析网页\n- 分析网页元素获取数据\n![12121212](https://img-blog.csdnimg.cn/2020101519420828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n- 由于每一个页面只有40条数据，所以要实现自动获取获取下一页链接，来实现自动爬取，找到网页种的元素（下一页）获取下一页的链接，实现递归爬取\n\n![121212](https://img-blog.csdnimg.cn/20201015194850191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n参考代码如下\n\n~~~python\ndef get_job_link(html):\n    job_link = []\n    # 解析网页得到链接\n    soup = BeautifulSoup(html, \"html.parser\")\n    for item in soup.find_all(\'h3\'):\n        if item.has_attr(\"title\"):\n            # 抽取链接内容\n            link = item.find_all(\"a\")[0][\"href\"]\n        job_link.append(link)\n        print(link)\n\n    try:\n        find_next_link = soup.select(\".pager > div.pagerbar > a\")[7][\'href\']\n        if find_next_link == \"javascript:\":\n            return job_link\n        # 拼接上域名\n        find_next_link = \"https://www.liepin.com\" + str(find_next_link).replace(\'°\', \'0\')\n        print(find_next_link)\n        # 获取到下一个网页的数据\n        next_html = get_job_html(find_next_link)\n        # 解析网页\n        if next_html is not None:\n            next_link = get_job_link(next_html)\n            for link in next_link:\n                job_link.append(link)\n    except Exception as e:\n        print(e)\n    finally:\n        return job_link\n~~~\n\n### 4. 保存数据到表格\n- 表格操作很简单，就不赘述\n\n~~~python\ndef save_link(link_list):\n    work_book = xlwt.Workbook(encoding=\"utf-8\", style_compression=0)\n    work_sheet = work_book.add_sheet(\"job_link\", cell_overwrite_ok=True)\n    col = \"Link\"\n    work_sheet.write(0, 0, col)\n    for i in range(0, len(link_list)):\n        print(\"第%d条\" % i)\n        data = link_list[i]\n        work_sheet.write(i+1, 0, str(data))\n    work_book.save(\"job_link.xls\")    # 保存数据\n~~~\n\n## 爬取职位详情信息\n- 获取到职位链接后保存在表格中，下一步就是访问这个些链接，爬取到详细信息，并保存到数据库中\n\n- 爬取开始就发现有链接的规律，有两种链接，第一种是正常的可以直接访问的，还有一种没有添加域名的，所以我们有加上域名\n![1212](https://img-blog.csdnimg.cn/20201015194535556.png#pic_center)\n\n### 1. 基本步骤\n- 获取表格中的链接\n- 获取网页\n- 解析网页\n- 保存数据\n\n**基本框架的搭建：**\n~~~python\ndef main():\n    # 读取表格链接\n    links = read_excel_get_link()\n    # 获取链接网页\n    for i in range(0, len(links)):\n        if links[i][0] != \'h\':\n            links[i] = \"https://www.liepin.com\" + links[i]\n        print(links[i])\n        # 获取网页\n        message_html = getLink.get_job_html(links[i])\n        if message_html is not None:\n            # 解析数据\n            message_data = get_message_data(message_html)\n        else:\n            continue\n        # 保存一条数据\n        try:\n            save_datas_sql(message_data)\n        except Exception as e:\n            continue\n~~~\n\n### 2. 获取表格链接\n- 表格操作不在赘述\n\n```python\ndef read_excel_get_link():\n    links = []\n    # 读取表格链接数据\n    # 打开表格\n    work_book = xlrd.open_workbook(\"job_link.xls\")\n    # 获取sheet\n    sheet = work_book.sheet_by_index(0)\n    for i in range(1, sheet.nrows):\n        link = sheet.cell(i, 0).value\n        links.append(link)\n    return links\n```\n\n### 3. 获取职位详情信息网页\n==message_html = getLink.get_job_html(links[i])==\n- 调用上面获取职位链接时的函数：get_job_html\n\n### 4. 解析详情网页得到数据\n- 解析网页，获取到页面的元素：\n  - 职位名称\n  - 公司\n  - 薪水\n  - 职位描述\n![21321312](https://img-blog.csdnimg.cn/20201015200232184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n参看网页的元素：\n![12121](https://img-blog.csdnimg.cn/20201015200731364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n- 使用标签选择器来定位元素\n- 在爬取过程中有时会遇到一些转义字符的问题需要注意\n\n参考代码\n\n~~~python\ndef get_message_data(html):\n    data = []\n    soup = BeautifulSoup(html, \"html.parser\")\n    try:\n        # 岗位名称\n        title = soup.select(\".title-info > h1\")[0][\'title\']\n        data.append(title)\n\n        # 公司\n        company = soup.select(\".title-info > h3 > a\")\n        if len(company) != 0:\n            company = company[0][\'title\']\n        else:\n            company = \" \"\n        data.append(company)\n\n        # 薪水\n        salary = soup.select(\".job-title-left > p\")\n        if len(salary) != 0:\n            salary = salary[0].contents[0]\n        else:\n            salary = \" \"\n        salary = salary \\\n            .replace(\'\\n\', \'\') \\\n            .replace(\'\\t\', \'\') \\\n            .replace(\'\\r\', \'\') \\\n            .replace(\' \', \'\') \\\n            .replace(\'\"\', \'\')\n        data.append(salary)\n\n        # 描述\n        description = soup.select(\".content.content-word\")\n        if len(description) != 0:\n            all_des = description[0].contents\n            description = \" \"\n            for item in all_des:\n                if type(item) == bs4.element.NavigableString:\n                    # print(item)\n                    description = description + item\n            # print(description)\n        else:\n            description = \" \"\n        description = description \\\n            .replace(\'\\n\', \'\') \\\n            .replace(\'\\t\', \'\') \\\n            .replace(\'\\r\', \'\') \\\n            .replace(\' \', \'\') \\\n            .replace(\'\"\', \'\')\n        data.append(description)\n    except Exception as e:\n        print(e)\n    finally:\n        print(data)\n        return data\n~~~\n\n### 5. 保存数据到数据库\n- 使用sqlite3数据库可以很好的储存数据 ，也方便查询数据\n\n**创建数据库代码**\n\n~~~python\n# 建表语句\ndef init_job_sqlite():\n    connet = sqlite3.connect(\"job_message.db\")  # 打开或创建文件\n    # 建表\n    c = connet.cursor()  # 获取游标\n    sql = \'\'\'\n        create table if not exists job_message(\n            id integer not null primary key autoincrement,\n            title text not null,\n            company text,\n            salary text,\n            description  text\n        )\n    \'\'\'\n    c.execute(sql)  # 执行sql语句\n    connet.commit()  # 提交\n    connet.close()  # 关闭数据库\n~~~\n**插入数据到数据库中实现数据的储存**\n\n~~~python\ndef save_datas_sql(data):\n    init_job_sqlite()  # 初始化数控库\n    # 插入数据\n    connet = sqlite3.connect(\"job_message.db\")  # 打开或创建文件\n    c = connet.cursor()  # 获取游标\n    for index in range(0, 4):\n        data[index] = \'\"\' + data[index] + \'\"\'\n    sql = \'\'\'\n        insert into job_message(title,company,salary,description)\n        values(%s)\'\'\' % \",\".join(data)\n    c.execute(sql)\n    connet.commit()\n~~~\n\n## 可视化职位信息\n- 这里使用flask框架搭建一个简单网站实现数据的可视化\n- 首先在网上随便找一个网页模板下载下来：[参考下载网站](http://sc.chinaz.com/moban/)\n\n### 1. 首页\n- 一些前端展示，这里不在赘述\n- 在这里贴上我的文件结构\n![123456](https://img-blog.csdnimg.cn/20201015202904706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n![12121](https://img-blog.csdnimg.cn/20201015202222983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n### 2. 职位列表\n- 这里就是一个查询数据库的过程\n- 把数据库中的数据展示在网页上\n\n![12121](https://img-blog.csdnimg.cn/20201015202356970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n- 关于数据库中的数据如何展现在静态网页上，我这上一篇学习的博客中有记录[爬取豆瓣笔记](https://blog.csdn.net/qq_43309907/article/details/108919658)\n- 由于数据太多，这里选取前100条数据显示出来\n\n- python代码参考下面的app.py中的代码\n- 关键前端代码如下\n~~~html\n<table class=\"table table-hover table-light\">\n			<tr>\n				<td>id</td>\n				<td>职位</td>\n				<td>公司</td>\n				<td>工资</td>\n				<td>职位描述</td>\n			</tr>\n			{%for job in jobs%}\n			<tr>\n				<td>{{job[0]}}</td>\n				<td>{{job[1]}}</td>\n				<td>{{job[2]}}</td>\n				<td>{{job[3]}}</td>\n				<td>{{job[4]}}</td>\n			</tr>\n			{%endfor%}\n		</table>\n~~~\n\n\n### 3. 薪水分析\n\n- 关于薪水的分布，我们可以用把数据库中的数据读取出来，做个计算，统计薪水的分布图\n  - 薪水的格式都是：a-bk·c薪，统计公式：ave = (x + y) / 2 * z/10得到统计结果，并排序一下\n  - 这里使用百度的echarts来实现，[百度echarts跳转链接](https://echarts.apache.org/examples/zh/index.html)\n  - 这里要引入一个js文件：[上手链接](https://echarts.apache.org/zh/tutorial.html#5%20%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%20ECharts)\n\n![121212](https://img-blog.csdnimg.cn/20201015203114601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n关键前端代码：\n\n~~~html\n		<div id=\"main\" style=\"width: 100%;height:450px;margin: 0 auto;\"></div>\n<script type=\"text/javascript\">\n	// 基于准备好的dom，初始化echarts实例\n	var myChart = echarts.init( document.getElementById(\'main\'));\n	var data = {{ data }};\n	option = {\n		xAxis: {\n			type: \'value\',\n			splitLine: {\n				lineStyle: {\n					type: \'dashed\'\n				}\n			},\n			name: \"年薪/万\",\n			splitNumber: 10\n		},\n		yAxis: {\n			type: \'value\',\n			name: \"统计/个\",\n			splitLine: {\n				lineStyle: {\n					type: \'dashed\'\n				}\n			}\n		},\n		series: [{\n			symbolSize: 10,\n			data: data,\n			type: \'scatter\'\n		}]\n	};\n\n\n	// 使用刚指定的配置项和数据显示图表。\n	myChart.setOption(option);\n</script>\n~~~\n\n\n### 4. 职位描述词云\n\n- 词云的生成使用jieba分词器来实现\n- 使用wordcloud来绘图：[参考文档链接](http://amueller.github.io/word_cloud/generated/wordcloud.WordCloud.html)\n- 具体实现参考下方app.py代码\n\n![23131312](https://img-blog.csdnimg.cn/20201015203600789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n \n### 5. app.py文件代码\n\n```python\nfrom flask import Flask, render_template\nimport sqlite3\nimport jieba  # 分词\nfrom matplotlib import pyplot as plt  # 绘图，数据可视化\nfrom wordcloud import WordCloud  # 词云\nfrom PIL import Image  # 图片处理\nimport numpy as np  # 矩阵运算\nimport re\n\napp = Flask(__name__)\n\n\n@app.route(\'/\')\ndef home():\n    return render_template(\"home.html\")\n\n\n@app.route(\'/job\')\ndef movie():\n    list = []\n    connet = sqlite3.connect(\"./liepin/job_message.db\")  # 打开或创建文件\n    c = connet.cursor()  # 获取游标\n    sql = \'\'\'select * from job_message LIMIT ((0-1)*100),100\'\'\'\n    datas = c.execute(sql)\n    for item in datas:\n        list.append(item)\n    c.close()\n    connet.close()\n    return render_template(\"job.html\", jobs=list)\n\n\n@app.route(\'/salary\')\ndef score():\n    data = []\n    con = sqlite3.connect(\"./liepin/job_message.db\")\n    cur = con.cursor()\n    sql = \"select salary,count(salary) from job_message group by salary\"\n    datas = cur.execute(sql)\n    for item in datas:\n        point = []\n        s = re.search(r\"(\\d*)-(\\d*)k·(\\d*)薪\", item[0])\n        if s is None:\n            continue\n        x = int(s.group(1))\n        y = int(s.group(2))\n        z = int(s.group(3))\n        ave = (x + y) / 2 * z/10\n        point.append(ave)\n        point.append(int(item[1]))\n        data.append(point)\n\n    for i in range(0, len(data)):\n        for j in range(0, len(data) - 1):\n            if data[j][0] > data[j + 1][0]:\n                a = data[j][0]\n                data[j][0] = data[j + 1][0]\n                data[j + 1][0] = a\n                b = data[j][1]\n                data[j][1] = data[j + 1][1]\n                data[j + 1][1] = b\n    print(data)\n    cur.close()\n    con.close()\n    return render_template(\"salary.html\", data=data)\n\n\n@app.route(\'/word\')\ndef word():\n    # 获取数据\n    con = sqlite3.connect(\"./liepin/job_message.db\")\n    cur = con.cursor()\n    sql = \"select description from job_message\"\n    data = con.execute(sql)\n    # 拼接\n    text = \"\"\n    for item in data:\n        text = text + item[0]\n    # 停用词列表\n    stopwords = [\'任职\', \'要求\', \'职位\',\n                 \'描述\', \'优先\', \'，\',\n                 \'相关\', \'专业\', \'熟练\',\n                 \'使用\', \'工作\', \'职责\']\n    cut = jieba.cut(text, cut_all=False)\n    print(type(cut))\n    final = []\n    for seg in cut:\n        if seg not in stopwords:\n            print(seg)\n            final.append(seg)\n\n    string = \" \".join(final)\n    cur.close()\n    con.close()\n    # 找到一张图片\n    img = Image.open(\"./static/timg.jpg\")  # 打开遮罩图片\n    img_array = np.array(img)  # 将图片转换为数组\n    wold_cloud = WordCloud(\n        background_color=\"#FFFFFF\",\n        mask=img_array,\n        font_path=\"STKAITI.TTF\",  # 字体所在位置\n    ).generate_from_text(string)  # 放入词\n    # 绘制图片\n    fig = plt.figure(1)\n    plt.imshow(wold_cloud)\n    plt.axis(\'off\')  # 不显示坐标轴\n    # plt.show()  # 显示生成的词云图片\n    plt.savefig(\"./static/word.jpg\", dpi=300)\n\n    return render_template(\"word.html\")\n\n\n@app.route(\'/author\')\ndef author():\n    return render_template(\"author.html\")\n\n\nif __name__ == \'__main__\':\n    app.run(debug=True)\n\n```\n',2,'123456',2),(25,5,'2020-10-18 15:10:01','python爬取豆瓣Top250排行','python爬取豆瓣信息','https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2858981854,1700048767&fm=26&gp=0.jpg','<p><h3>目录</h3><ul><li><a href=\"#python_2\">python爬虫</a></li><ul><li><a href=\"#_7\">环境准备</a></li><li><a href=\"#_50\">预备知识</a></li><ul><li><a href=\"#Urllib_51\">Urllib</a></li><li><a href=\"#BeautifulSoup_86\">BeautifulSoup</a></li><li><a href=\"#_170\">正则表达式</a></li><li><a href=\"#xlwt_196\">xlwt表格操作</a></li></ul><li><a href=\"#sqlite3_207\">sqlite3数据库操作</a></li><li><a href=\"#_269\">获取数据</a></li><li><a href=\"#_296\">解析数据</a></li><li><a href=\"#_372\">保存数据到表格中</a></li><li><a href=\"#_391\">保存数据到数据库中</a></li><li><a href=\"#_442\">数据可视化</a></li><ul><li><a href=\"#Flask_444\">Flask框架</a></li><li><a href=\"#Echarts_540\">Echarts应用</a></li><li><a href=\"#WorldCloud_545\">WorldCloud应用</a></li></ul><li><a href=\"#_549\">完整代码</a></li></ul></ul></p>\n<h1><a id=\"python_2\"></a>python爬虫</h1>\n<ul>\n<li>网络爬虫：按照一定规则，自动抓取互联网信息的程序或者脚本<br />\n<a href=\"https://www.bilibili.com/video/BV12E411A7ZQ/?p=28\" target=\"_blank\">学习视频地址：https://www.bilibili.com/video/BV12E411A7ZQ/?p=28</a></li>\n</ul>\n<h2><a id=\"_7\"></a>环境准备</h2>\n<ul>\n<li>导入包配置</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> sys\n<span class=\"hljs-keyword\">from</span> bs4 <span class=\"hljs-keyword\">import</span> BeautifulSoup  <span class=\"hljs-comment\"># 网页解析，获取数据</span>\n<span class=\"hljs-keyword\">import</span> re  <span class=\"hljs-comment\"># 正则表达式，进行文字匹配</span>\n<span class=\"hljs-keyword\">import</span> urllib.request, urllib.error  <span class=\"hljs-comment\"># 制定URl，获取网页数据</span>\n<span class=\"hljs-keyword\">import</span> xlwt  <span class=\"hljs-comment\"># 进行excel操作</span>\n<span class=\"hljs-keyword\">import</span> sqlite3  <span class=\"hljs-comment\"># 进行sqlLite数据库操作</span>\n</code></div></pre>\n<ul>\n<li>基础文件结构</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-string\">\"\"\"\n爬取豆瓣电影排名250电影\n\"\"\"</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span>\n    url = <span class=\"hljs-string\">\'https://movie.douban.com/top250?start=0\'</span>\n    savepath=<span class=\"hljs-string\">\'.\\\\doubanTop250.xls\'</span>\n    <span class=\"hljs-comment\"># 1.爬取网页</span>\n    datalist = get_data(url)\n\n    <span class=\"hljs-comment\"># 3.保存数据</span>\n    sava_data()\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_data</span><span class=\"hljs-params\">(url)</span>:</span>\n    datalist = []\n    <span class=\"hljs-comment\"># 2.逐一解析数据</span>\n    <span class=\"hljs-keyword\">return</span> datalist\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sava_data</span><span class=\"hljs-params\">(savepath)</span>:</span>\n    print(<span class=\"hljs-string\">\"save\"</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\'__main__\'</span>:\n    main()\n\n</code></div></pre>\n<h2><a id=\"_50\"></a>预备知识</h2>\n<h3><a id=\"Urllib_51\"></a>Urllib</h3>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> urllib.request\n<span class=\"hljs-keyword\">import</span> urllib.parse\n\n<span class=\"hljs-comment\"># 通过get请求访问</span>\nresponse = urllib.request.urlopen(<span class=\"hljs-string\">\"http://www.baidu.com\"</span>)\nprint(response.read().decode(<span class=\"hljs-string\">\'utf-8\'</span>))  <span class=\"hljs-comment\"># 对获取到的源码进行utf-8解码</span>\n\n\n<span class=\"hljs-comment\"># 通过post请求访问:http://httpbin.org</span>\ndata = bytes(urllib.parse.urlencode({<span class=\"hljs-string\">\"hello\"</span>: <span class=\"hljs-string\">\"word\"</span>}), encoding=<span class=\"hljs-string\">\"utf-8\"</span>)\nresponse = urllib.request.urlopen(<span class=\"hljs-string\">\"http://httpbin.org/post\"</span>,data=data)\nprint(response.read().decode(<span class=\"hljs-string\">\'utf-8\'</span>))\n\n\n<span class=\"hljs-comment\"># 超时处理</span>\n<span class=\"hljs-keyword\">try</span>:\n    response = urllib.request.urlopen(<span class=\"hljs-string\">\"http://httpbin.org/get\"</span>,timeout=<span class=\"hljs-number\">1</span>)\n    print(response.read().decode(<span class=\"hljs-string\">\'utf-8\'</span>))\n<span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> error:\n    print(error)\n\n<span class=\"hljs-comment\"># 响应头</span>\nurl = <span class=\"hljs-string\">\"http://douban.com\"</span>\nheaders = {\n    <span class=\"hljs-string\">\"User-Agent\"</span>: <span class=\"hljs-string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36 Edg/85.0.564.68\"</span>\n}\nreq = urllib.request.Request(url=url, headers=headers, method=<span class=\"hljs-string\">\"POST\"</span>)\nresponse = urllib.request.urlopen(req, timeout=<span class=\"hljs-number\">3</span>)\nprint(response.status)\nprint(response.read().decode(<span class=\"hljs-string\">\'utf-8\'</span>))\n</code></div></pre>\n<h3><a id=\"BeautifulSoup_86\"></a>BeautifulSoup</h3>\n<ul>\n<li>将复杂的html转换成一个复杂的树形结构，每个节点都是python对象</li>\n<li>所有对象可以分文四种：\n<ul>\n<li>Tag:标签及其内容:(但是只是第一个标签)</li>\n<li>NavigableString:标签里的内容</li>\n<li>BeautifulSoup:自身，整个文档</li>\n<li>Comment:注释:是一个特殊的NavigableString输出的内容不包含注释符号</li>\n</ul>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">from</span> bs4 <span class=\"hljs-keyword\">import</span> BeautifulSoup\nfile = open(<span class=\"hljs-string\">\"./../baidu.html\"</span>, <span class=\"hljs-string\">\"rb\"</span>)\nhtml = file.read()\nbs = BeautifulSoup(html, <span class=\"hljs-string\">\"html.parser\"</span>)\n\n<span class=\"hljs-comment\"># 1. tag:标签及其内容:(但是只是第一个标签)</span>\nprint(bs.title)\nprint(bs.a)\nprint(bs.a.attrs)   <span class=\"hljs-comment\"># 得到标签的属性以字典的格式储存</span>\nprint(type(bs.a))\n\n\n<span class=\"hljs-comment\"># 2.NavigableString:标签里的内容</span>\nprint(bs.title.string)\nprint(type(bs.title.string))\n\n<span class=\"hljs-comment\"># 3.BeautifulSoup:自身，整个文档</span>\nprint(bs.name)\nprint(type(bs))\n\n<span class=\"hljs-comment\"># 4.Comment:注释:是一个特殊的NavigableString输出的内容不包含注释符号</span>\nprint(bs.a.string)\n</code></div></pre>\n<ul>\n<li>文档的遍历和查找</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-comment\"># 文档的遍历:contents</span>\nprint(bs.head.contents[<span class=\"hljs-number\">1</span>])\n\nprint(<span class=\"hljs-string\">\"---------------------------------\"</span>)\n<span class=\"hljs-comment\"># 文档的搜索</span>\n<span class=\"hljs-comment\"># 字符串过滤:查找与字符串完全匹配的内容</span>\na_list = bs.find_all(<span class=\"hljs-string\">\"a\"</span>)  <span class=\"hljs-comment\"># 查找所有的a标签</span>\nprint(a_list)\n\n\nprint(<span class=\"hljs-string\">\"---------------------------------\"</span>)\n\n<span class=\"hljs-comment\"># 正则表达式搜索:使用search()方法来匹配</span>\n<span class=\"hljs-keyword\">import</span> re\n\na_list1 = bs.find_all(re.compile(<span class=\"hljs-string\">\"a\"</span>))\nprint(a_list1)\n\nprint(<span class=\"hljs-string\">\"---------------------------------\"</span>)\n\n<span class=\"hljs-comment\"># 使用方法来搜索:传入一个函数，根据函数的要求来搜索</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">name_is_exists</span><span class=\"hljs-params\">(tag)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> tag.has_attr(<span class=\"hljs-string\">\"name\"</span>)\n\n\na_list2 = bs.find_all(name_is_exists)\nprint(a_list2)\n\nprint(<span class=\"hljs-string\">\"---------------------------------\"</span>)\n\n<span class=\"hljs-comment\"># keywords:参数搜索</span>\n<span class=\"hljs-comment\"># a_list3 = bs.find_all(class_=True)</span>\na_list3 = bs.find_all(text=<span class=\"hljs-string\">\"新闻\"</span>)\na_list3 = bs.find_all(text=re.compile(<span class=\"hljs-string\">\"\\d\"</span>),limit=<span class=\"hljs-number\">2</span>)    <span class=\"hljs-comment\"># 根据正则表达式匹配内容，limit限制查找个数</span>\n<span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> a_list3:\n    print(item)\n\n\nprint(<span class=\"hljs-string\">\"---------------------------------\"</span>)\n<span class=\"hljs-comment\"># 选择器类似css中的选择器</span>\nprint(bs.select(<span class=\"hljs-string\">\"title\"</span>))        <span class=\"hljs-comment\"># 通过标签</span>\nprint(bs.select(<span class=\"hljs-string\">\".classname\"</span>))   <span class=\"hljs-comment\"># 通过类名</span>\nprint(bs.select(<span class=\"hljs-string\">\"#idname\"</span>))      <span class=\"hljs-comment\"># 通过id查找</span>\nprint(bs.select(<span class=\"hljs-string\">\"a[class=\'classname\']\"</span>))      <span class=\"hljs-comment\"># 通过属性查找</span>\nprint(bs.select(<span class=\"hljs-string\">\"head&gt;title\"</span>))      <span class=\"hljs-comment\"># 通过子标签</span>\n</code></div></pre>\n<h3><a id=\"_170\"></a>正则表达式</h3>\n<p>参考文档链接：<a href=\"https://www.runoob.com/regexp/regexp-syntax.html\" target=\"_blank\">https://www.runoob.com/regexp/regexp-syntax.html</a></p>\n<ul>\n<li>python中的re库<br />\n<img src=\"https://img-blog.csdnimg.cn/20201004203732333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"123\" /></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-comment\"># 正则表达式：字符串匹配（判断字符串是否符合一定的标准）</span>\n<span class=\"hljs-keyword\">import</span> re\n<span class=\"hljs-comment\"># 创建模式对象</span>\npat = re.compile(<span class=\"hljs-string\">\"AA\"</span>)  <span class=\"hljs-comment\"># 此处的AA是正则表达式</span>\na = pat.search(<span class=\"hljs-string\">\"AAA\"</span>)            <span class=\"hljs-comment\"># search字符串被校验的内容</span>\nprint(a)\n\na = re.search(<span class=\"hljs-string\">\"abc\"</span>, <span class=\"hljs-string\">\"aabcc\"</span>)    <span class=\"hljs-comment\"># 前面的字符串是规则，后面的字符串是被匹配的对象</span>\nprint(a)\n\na = re.findall(<span class=\"hljs-string\">\"[a-z]+\"</span>, <span class=\"hljs-string\">\"aABCXabuhua\"</span>)  <span class=\"hljs-comment\"># 找到所有的匹配项</span>\nprint(a)\n\na = re.sub(<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"A\"</span>, <span class=\"hljs-string\">\"abcdefg\"</span>)   <span class=\"hljs-comment\">#找到a用A替换</span>\nprint(a)\n<span class=\"hljs-comment\"># 建议在正则表达式中，被比较的字符串前面加上r，不用担心转义字符的问题</span>\n</code></div></pre>\n<h3><a id=\"xlwt_196\"></a>xlwt表格操作</h3>\n<ul>\n<li>简单操作</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> xlwt\nwork_book = xlwt.Workbook(encoding=<span class=\"hljs-string\">\"utf-8\"</span>)\nwork_sheet = work_book.add_sheet(<span class=\"hljs-string\">\"sheet1\"</span>)\nwork_sheet.write(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\'hello\'</span>) <span class=\"hljs-comment\"># 参数：行、列、内容</span>\nwork_book.save(<span class=\"hljs-string\">\'student.xls\'</span>)\n</code></div></pre>\n<h2><a id=\"sqlite3_207\"></a>sqlite3数据库操作</h2>\n<ul>\n<li>建表语句</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> sqlite3\nconnet = sqlite3.connect(<span class=\"hljs-string\">\"test.db\"</span>) <span class=\"hljs-comment\"># 打开或创建文件</span>\n<span class=\"hljs-comment\"># 建表</span>\nc = connet.cursor()  <span class=\"hljs-comment\"># 获取游标</span>\nsql = <span class=\"hljs-string\">\'\'\'\n    create table if not exists doubanTop250 (\n        id integer not null primary key autoincrement,\n        find_link text not null,\n        find_image text,\n        find_ctitle char(100),\n        find_otitle  char(100),\n        find_score int(4),\n        find_judge_number int(10),\n        find_sign char(200),\n        find_description text\n    )\n\'\'\'</span>\nc.execute(sql)      <span class=\"hljs-comment\"># 执行sql语句</span>\nconnet.commit()     <span class=\"hljs-comment\"># 提交</span>\nconnet.close()      <span class=\"hljs-comment\"># 关闭数据库</span>\n\n</code></div></pre>\n<ul>\n<li>插入语句</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> sqlite3\nconnet = sqlite3.connect(<span class=\"hljs-string\">\"test.db\"</span>) <span class=\"hljs-comment\"># 打开或创建文件</span>\n<span class=\"hljs-comment\"># 建表</span>\nc = connet.cursor()  <span class=\"hljs-comment\"># 获取游标</span>\nsql = <span class=\"hljs-string\">\'\'\'\n    insert into doubanTop250 (find_link,find_image,find_ctitle,find_otitle,find_score,find_judge_number,find_sign,find_description)\n    values (\"1\",\"1\",\"1\",\"1\",1,1,\"1\",\"1\");\n\'\'\'</span>\nc.execute(sql)      <span class=\"hljs-comment\"># 执行sql语句</span>\nconnet.commit()     <span class=\"hljs-comment\"># 提交</span>\nconnet.close()      <span class=\"hljs-comment\"># 关闭数据库</span>\n</code></div></pre>\n<ul>\n<li>查询语句</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> sqlite3\nconnet = sqlite3.connect(<span class=\"hljs-string\">\"test.db\"</span>) <span class=\"hljs-comment\"># 打开或创建文件</span>\n<span class=\"hljs-comment\"># 建表</span>\nc = connet.cursor()  <span class=\"hljs-comment\"># 获取游标</span>\nsql = <span class=\"hljs-string\">\'\'\'\n    select * from doubanTop250;\n\'\'\'</span>\nresponse = c.execute(sql)      <span class=\"hljs-comment\"># 执行sql语句</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> response:\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span>  range(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>):\n        print(i[j])\n\nconnet.commit()     <span class=\"hljs-comment\"># 提交</span>\nconnet.close()      <span class=\"hljs-comment\"># 关闭数据库</span>\n</code></div></pre>\n<h2><a id=\"_269\"></a>获取数据</h2>\n<ul>\n<li>根据一个URL获取一个页面的html数据</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-comment\"># 得到一个指定页面的信息</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">ask_url</span><span class=\"hljs-params\">(url)</span>:</span>\n    head = {\n        <span class=\"hljs-string\">\"User-Agent\"</span>: <span class=\"hljs-string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0\"</span>\n    }\n    <span class=\"hljs-string\">\"\"\"\n    head:模拟浏览器头部信息\n    \"User-Agent\":用户代理\n    \"\"\"</span>\n    request = urllib.request.Request(url=url, headers=head)\n    html = <span class=\"hljs-string\">\"\"</span>\n    <span class=\"hljs-keyword\">try</span>:\n        response = urllib.request.urlopen(request)\n        html = response.read().decode(<span class=\"hljs-string\">\"utf-8\"</span>)\n    <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n        <span class=\"hljs-keyword\">if</span> hasattr(e,<span class=\"hljs-string\">\"code\"</span>):\n            print(e.code)\n        <span class=\"hljs-keyword\">if</span> hasattr(e,<span class=\"hljs-string\">\"reason\"</span>):\n            print(e.reason)\n    <span class=\"hljs-keyword\">return</span> html\n\n</code></div></pre>\n<h2><a id=\"_296\"></a>解析数据</h2>\n<ul>\n<li>豆瓣排名分析<br />\n<img src=\"https://img-blog.csdnimg.cn/20201004211017864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"123123\" /></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-comment\"># 定义一些全局变量</span>\n<span class=\"hljs-comment\"># 电影链接正则表达式</span>\nfind_link = re.compile(<span class=\"hljs-string\">r\'&lt;a href=\"(.*?)\"&gt;\'</span>)\n<span class=\"hljs-comment\"># 电影图片链接正则表达式,re.S忽略换行符</span>\n<span class=\"hljs-comment\"># find_image = re.compile(r\'&lt;img(.*)src=\"(.*?)\" class=\"\"&gt;\', re.S)</span>\nfind_image = re.compile(<span class=\"hljs-string\">r\'&lt;img.*src=\"(.*?)\"\'</span>, re.S)\n<span class=\"hljs-comment\"># 电影标题</span>\nfind_title = re.compile(<span class=\"hljs-string\">r\'&lt;span class=\"title\"&gt;(.*)&lt;/span&gt;\'</span>)\n<span class=\"hljs-comment\"># 影片评分</span>\nfind_score = re.compile(<span class=\"hljs-string\">r\'&lt;span class=\"rating_num\" property=\"v:average\"&gt;(.*)&lt;/span&gt;\'</span>)\n<span class=\"hljs-comment\"># 评价人数</span>\nfind_judge_number = re.compile(<span class=\"hljs-string\">r\'&lt;span&gt;(\\d*)人评价&lt;/span&gt;\'</span>)\n<span class=\"hljs-comment\"># 概况</span>\nfind_sign = re.compile(<span class=\"hljs-string\">r\'&lt;span class=\"inq\"&gt;(.*)&lt;/span&gt;\'</span>)\n<span class=\"hljs-comment\"># 影片相关内容</span>\nfind_description = re.compile(<span class=\"hljs-string\">r\'&lt;p class=\"\"&gt;(.*?)&lt;/p&gt;\'</span>, re.S)\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_data</span><span class=\"hljs-params\">(url)</span>:</span>\n    datalist = []\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>):      <span class=\"hljs-comment\"># 循环获取10个页面数据</span>\n        urls = url + str(i*<span class=\"hljs-number\">25</span>)\n        html = ask_url(urls)    <span class=\"hljs-comment\"># 保存网页信息</span>\n        <span class=\"hljs-comment\"># 2.逐一解析数据</span>\n        soup = BeautifulSoup(html, <span class=\"hljs-string\">\"html.parser\"</span>)\n        <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> soup.find_all(<span class=\"hljs-string\">\'div\'</span>, class_=<span class=\"hljs-string\">\"item\"</span>):  <span class=\"hljs-comment\"># 查找符合要求的字符串，形成列表</span>\n            data = []   <span class=\"hljs-comment\"># 保存一部电影的所有信息</span>\n            item = str(item)\n\n            <span class=\"hljs-comment\"># 获取影片详情链接</span>\n            link = re.findall(find_link, item)[<span class=\"hljs-number\">0</span>]  <span class=\"hljs-comment\"># re库通过正则表达式查找指定字符串</span>\n            data.append(link)\n\n            img = re.findall(find_image, item)[<span class=\"hljs-number\">0</span>]\n            data.append(img)\n\n            title = re.findall(find_title, item)\n            <span class=\"hljs-comment\"># 判断中文外文名</span>\n            <span class=\"hljs-keyword\">if</span> len(title) == <span class=\"hljs-number\">2</span>:\n                ctitle = title[<span class=\"hljs-number\">0</span>]\n                data.append(ctitle)\n                otitle = title[<span class=\"hljs-number\">1</span>].replace(<span class=\"hljs-string\">\"/\"</span>,<span class=\"hljs-string\">\"\"</span>)   <span class=\"hljs-comment\"># 去掉名称前的斜杠</span>\n                data.append(otitle)\n            <span class=\"hljs-keyword\">else</span>:\n                data.append(title)\n                data.append(<span class=\"hljs-string\">\" \"</span>)    <span class=\"hljs-comment\"># 留空</span>\n\n            score = re.findall(find_score, item)[<span class=\"hljs-number\">0</span>]\n            data.append(score)\n\n            judge_number = re.findall(find_judge_number, item)[<span class=\"hljs-number\">0</span>]\n            data.append(judge_number)\n\n            sign = re.findall(find_sign, item)\n            <span class=\"hljs-keyword\">if</span> len(sign) != <span class=\"hljs-number\">0</span>:\n                data.append(sign[<span class=\"hljs-number\">0</span>].replace(<span class=\"hljs-string\">\"。\"</span>, <span class=\"hljs-string\">\"\"</span>))\n            <span class=\"hljs-keyword\">else</span>:\n                data.append(<span class=\"hljs-string\">\" \"</span>)\n\n            description = re.findall(find_description, item)[<span class=\"hljs-number\">0</span>]\n            description = re.sub(<span class=\"hljs-string\">\'&lt;br(\\s+)?/&gt;(\\s+)?\'</span>,<span class=\"hljs-string\">\"\"</span>,description)    <span class=\"hljs-comment\"># 去掉&lt;br/&gt;</span>\n            description = re.sub(<span class=\"hljs-string\">\'/\'</span>,<span class=\"hljs-string\">\"\"</span>,description)\n            data.append(description.strip())    <span class=\"hljs-comment\"># 去掉前后的空格</span>\n            print(data)\n            datalist.append(data)   <span class=\"hljs-comment\"># 处理好的</span>\n\n    <span class=\"hljs-keyword\">return</span> datalist\n</code></div></pre>\n<h2><a id=\"_372\"></a>保存数据到表格中</h2>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-comment\"># 保存数据</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sava_data</span><span class=\"hljs-params\">(savepath, datalist)</span>:</span>\n    print(<span class=\"hljs-string\">\'------------save------------\'</span>)\n    work_book = xlwt.Workbook(encoding=<span class=\"hljs-string\">\"utf-8\"</span>, style_compression=<span class=\"hljs-number\">0</span>)\n    work_sheet = work_book.add_sheet(<span class=\"hljs-string\">\"doubanTop250\"</span>, cell_overwrite_ok=<span class=\"hljs-keyword\">True</span>)\n    col = (<span class=\"hljs-string\">\"电影详情链接\"</span>, <span class=\"hljs-string\">\"图片链接\"</span> , <span class=\"hljs-string\">\"影片中文名\"</span>, <span class=\"hljs-string\">\"影片外文名\"</span>, <span class=\"hljs-string\">\"评分\"</span>, <span class=\"hljs-string\">\"评价数\"</span>, <span class=\"hljs-string\">\"概况\"</span>, <span class=\"hljs-string\">\"详情\"</span>)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>):\n        work_sheet.write(<span class=\"hljs-number\">0</span>, i, col[i])\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">250</span>):\n        print(<span class=\"hljs-string\">\"第%d条\"</span> %i)\n        data = datalist[i]\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>):\n            work_sheet.write(i+<span class=\"hljs-number\">1</span>, j, data[j])\n    work_book.save(savepath)    <span class=\"hljs-comment\"># 保存数据</span>\n</code></div></pre>\n<h2><a id=\"_391\"></a>保存数据到数据库中</h2>\n<ul>\n<li>保存数据到数据库中</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\">\n<span class=\"hljs-comment\"># 保存数据到sqlite</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sava_data_sqlite</span><span class=\"hljs-params\">(datalist)</span>:</span>\n    print(<span class=\"hljs-string\">\"------------SQLite------------\"</span>)\n    init_sqlite()   <span class=\"hljs-comment\"># 初始化数控库</span>\n    <span class=\"hljs-comment\"># 插入数据</span>\n    connet = sqlite3.connect(<span class=\"hljs-string\">\"test.db\"</span>)  <span class=\"hljs-comment\"># 打开或创建文件</span>\n    c = connet.cursor()  <span class=\"hljs-comment\"># 获取游标</span>\n    <span class=\"hljs-keyword\">for</span> data <span class=\"hljs-keyword\">in</span> datalist:\n        <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>):\n            <span class=\"hljs-keyword\">if</span> index <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>):\n                data[index] = <span class=\"hljs-string\">\'\"\'</span>+data[index]+<span class=\"hljs-string\">\'\"\'</span>\n        sql = <span class=\"hljs-string\">\'\'\'\n            insert into doubanTop250(find_link,find_image,find_ctitle,find_otitle,find_score,find_judge_number,find_sign,find_description)\n            values(%s)\'\'\'</span>%<span class=\"hljs-string\">\",\"</span>.join(data)\n        print(sql)\n        c.execute(sql)\n        connet.commit()\n\n    c.close()\n    connet.close()\n\n\n<span class=\"hljs-comment\"># 建表语句</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">init_sqlite</span><span class=\"hljs-params\">()</span>:</span>\n    connet = sqlite3.connect(<span class=\"hljs-string\">\"test.db\"</span>)  <span class=\"hljs-comment\"># 打开或创建文件</span>\n    <span class=\"hljs-comment\"># 建表</span>\n    c = connet.cursor()  <span class=\"hljs-comment\"># 获取游标</span>\n    sql = <span class=\"hljs-string\">\'\'\'\n        create table if not exists doubanTop250 (\n            id integer not null primary key autoincrement,\n            find_link text not null,\n            find_image text,\n            find_ctitle char(100),\n            find_otitle  char(100),\n            find_score int(4),\n            find_judge_number int(10),\n            find_sign char(200),\n            find_description text\n        )\n    \'\'\'</span>\n    c.execute(sql)  <span class=\"hljs-comment\"># 执行sql语句</span>\n    connet.commit()  <span class=\"hljs-comment\"># 提交</span>\n    connet.close()  <span class=\"hljs-comment\"># 关闭数据库</span>\n</code></div></pre>\n<h2><a id=\"_442\"></a>数据可视化</h2>\n<h3><a id=\"Flask_444\"></a>Flask框架</h3>\n<ul>\n<li>web框架</li>\n</ul>\n<p>新建一个flask框架</p>\n<ul>\n<li>app.py的测试文件：</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask, render_template, request\n<span class=\"hljs-keyword\">import</span> datetime\n\napp = Flask(__name__)\n\n\n<span class=\"hljs-comment\"># 通过访问路径，获取用户的字符串参数</span>\n<span class=\"hljs-meta\">@app.route(\'/index/&lt;name&gt;\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hello_word</span><span class=\"hljs-params\">(name)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\'hello word %s\'</span>%name\n\n\n<span class=\"hljs-comment\"># 通过访问路径，获取用户的字符串参数</span>\n<span class=\"hljs-meta\">@app.route(\'/index/&lt;int:id&gt;\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hello_word2</span><span class=\"hljs-params\">(id)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\'hello %d\'</span>%id\n\n\n<span class=\"hljs-comment\"># 返回给用户渲染后的网页文件</span>\n<span class=\"hljs-meta\">@app.route(\'/\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span><span class=\"hljs-params\">()</span>:</span>\n    time = datetime.date.today()        <span class=\"hljs-comment\"># 向网页页面传递的参数</span>\n    name = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]                    <span class=\"hljs-comment\"># 列表类型</span>\n    dic = {<span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"黄耀辉\"</span>, <span class=\"hljs-string\">\"age\"</span>: <span class=\"hljs-string\">\"18\"</span>}  <span class=\"hljs-comment\"># 字典类型</span>\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"index.html\"</span>, time=time, name=name, dic=dic)\n\n\n<span class=\"hljs-meta\">@app.route(\'/register\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">register</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"register.html\"</span>)\n\n\n<span class=\"hljs-meta\">@app.route(\'/result\', methods=[\'POST\'])</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">register_result</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-keyword\">if</span> request.method == <span class=\"hljs-string\">\'POST\'</span>:\n        result = request.form\n        <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"result.html\"</span>, result=result)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"error.html\"</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\'__main__\'</span>:\n    app.run(debug=<span class=\"hljs-keyword\">True</span>)\n\n</code></div></pre>\n<ul>\n<li>html中的数据操作</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>豆瓣爬虫<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>时间:{{time}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    测试列表：\n    {%for i in name%}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n        {{i}}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    {% endfor %}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    测试字典：\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span>\n        {% for key,value in dic.items() %}\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{key}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{value}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n        {% endfor %}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n</code></div></pre>\n<ul>\n<li>表单提交</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"{{url_for(\'result\')}}\"</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"post\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>姓名: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>性别: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"sex\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>年龄: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"age\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>地址: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"address\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n</code></div></pre>\n<h3><a id=\"Echarts_540\"></a>Echarts应用</h3>\n<ul>\n<li>百度数据可视化应用<br />\n<a href=\"https://echarts.apache.org/examples/zh/index.html#chart-type-drag\" target=\"_blank\">官网地址链接</a></li>\n</ul>\n<h3><a id=\"WorldCloud_545\"></a>WorldCloud应用</h3>\n<ul>\n<li>词云<br />\n<a href=\"https://amueller.github.io/word_cloud/\" target=\"_blank\">官网地址地址</a></li>\n</ul>\n<h2><a id=\"_549\"></a>完整代码</h2>\n<ul>\n<li>app.py</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\"><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask, render_template, request\n<span class=\"hljs-keyword\">import</span> sqlite3\n<span class=\"hljs-keyword\">import</span> jieba    <span class=\"hljs-comment\"># 分词</span>\n<span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot <span class=\"hljs-keyword\">as</span> plt    <span class=\"hljs-comment\"># 绘图，数据可视化</span>\n<span class=\"hljs-keyword\">from</span> wordcloud <span class=\"hljs-keyword\">import</span> WordCloud         <span class=\"hljs-comment\"># 词云</span>\n<span class=\"hljs-keyword\">from</span> PIL <span class=\"hljs-keyword\">import</span> Image                   <span class=\"hljs-comment\"># 图片处理</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np                      <span class=\"hljs-comment\"># 矩阵运算</span>\n\n\napp = Flask(__name__)\n\n\n<span class=\"hljs-meta\">@app.route(\'/\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">home</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"home.html\"</span>)\n\n\n<span class=\"hljs-meta\">@app.route(\'/movie\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">movie</span><span class=\"hljs-params\">()</span>:</span>\n    movies = []\n    con = sqlite3.connect(<span class=\"hljs-string\">\"./douban/test.db\"</span>)\n    cur = con.cursor()\n    sql = <span class=\"hljs-string\">\"select * from doubanTop250\"</span>\n    data = cur.execute(sql)\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> data:\n        movies.append(item)\n\n    cur.close()\n    con.close()\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"movie.html\"</span>, movies=movies)\n\n\n<span class=\"hljs-meta\">@app.route(\'/score\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">score</span><span class=\"hljs-params\">()</span>:</span>\n    find_score = []\n    find_number = []\n    con = sqlite3.connect(<span class=\"hljs-string\">\"./douban/test.db\"</span>)\n    cur = con.cursor()\n    sql = <span class=\"hljs-string\">\"select find_score,count(find_score) from doubanTop250 group by find_score\"</span>\n    data = cur.execute(sql)\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> data:\n        find_score.append(item[<span class=\"hljs-number\">0</span>])\n        find_number.append(item[<span class=\"hljs-number\">1</span>])\n    cur.close()\n    con.close()\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"score.html\"</span>, score=find_score, number=find_number)\n\n\n<span class=\"hljs-meta\">@app.route(\'/word\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">word</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-comment\"># 获取数据</span>\n    con = sqlite3.connect(<span class=\"hljs-string\">\"./douban/test.db\"</span>)\n    cur = con.cursor()\n    sql=<span class=\"hljs-string\">\"select find_sign from doubanTop250\"</span>\n    data = con.execute(sql)\n    <span class=\"hljs-comment\"># 拼接</span>\n    text = <span class=\"hljs-string\">\"\"</span>\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> data:\n        text = text + item[<span class=\"hljs-number\">0</span>]\n    cut = jieba.cut(text)\n    string = <span class=\"hljs-string\">\" \"</span>.join(cut)\n    cur.close()\n    con.close()\n    <span class=\"hljs-comment\"># 找到一张图片</span>\n    img = Image.open(<span class=\"hljs-string\">\"./static/timg.jpg\"</span>)    <span class=\"hljs-comment\"># 打开遮罩图片</span>\n    img_array = np.array(img)                <span class=\"hljs-comment\"># 将图片转换为数组</span>\n    wold_cloud = WordCloud(\n        background_color=<span class=\"hljs-string\">\"#E4E7ED\"</span>,\n        mask=img_array,\n        font_path=<span class=\"hljs-string\">\"STKAITI.TTF\"</span>,    <span class=\"hljs-comment\"># 字体所在位置</span>\n    ).generate_from_text(string)    <span class=\"hljs-comment\"># 放入词</span>\n    <span class=\"hljs-comment\"># 绘制图片</span>\n    fig = plt.figure(<span class=\"hljs-number\">1</span>)\n    plt.imshow(wold_cloud)\n    plt.axis(<span class=\"hljs-string\">\'off\'</span>)     <span class=\"hljs-comment\"># 不显示坐标轴</span>\n    <span class=\"hljs-comment\"># plt.show()  # 显示生成的词云图片</span>\n    plt.savefig(<span class=\"hljs-string\">\"./static/word.jpg\"</span>, dpi=<span class=\"hljs-number\">500</span>)\n\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"word.html\"</span>)\n\n\n<span class=\"hljs-meta\">@app.route(\'/author\')</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">author</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">\"author.html\"</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\'__main__\'</span>:\n    app.run(debug=<span class=\"hljs-keyword\">True</span>)\n</code></div></pre>\n<ul>\n<li>前端页面</li>\n<li>home.html</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"utf-8\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>豆瓣top260<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"description\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"Premium Bootstrap 4 Landing Page Template\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"keywords\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"bootstrap 4, premium, marketing, multipurpose\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"Shreethemes\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"author\"</span> /&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- favicon --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"shortcut icon\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"images/favicon.ico\"</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Bootstrap css --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"static/css/bootstrap.min.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span> /&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- 图标库 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"static/css/materialdesignicons.min.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"static/css/unicons.css\"</span> /&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Pe7 Icon --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"static/css/pe-icon-7.css\"</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Icons --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"static/css/magnific-popup.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span> /&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Main css File --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"static/css/style.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"static/css/default.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"color-opt\"</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Navbar STart 导航栏--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"topnav\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"defaultscroll sticky\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background: #409EFF\"</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n		<span class=\"hljs-comment\">&lt;!-- Logo container--&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"logo\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">\"_blank\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"color: #0b0b0b\"</span>&gt;</span>\n				<span class=\"hljs-comment\">&lt;!-- Landkey --&gt;</span>\n				豆瓣Top250\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"navigation\"</span>&gt;</span>\n			<span class=\"hljs-comment\">&lt;!-- Navigation Menu--&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"navigation-menu\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"has-submenu\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span>&gt;</span>首页<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"has-submenu\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/movie\"</span>&gt;</span>电影<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"has-submenu\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/score\"</span>&gt;</span>评分<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"has-submenu\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/word\"</span>&gt;</span>词云<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"has-submenu\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/author\"</span>&gt;</span>作者<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end navigation menu--&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end navigation--&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end container--&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end header--&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Navbar End --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"section\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"price\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background: #E4E7ED;min-height: 600px\"</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row justify-content-center\"</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-12\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"section-title text-center mb-4 pb-2\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h4</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"title mb-4\"</span>&gt;</span>豆瓣电影Top250数据分析<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h4</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"text-muted para-desc mx-auto mb-0\"</span>&gt;</span>应用Python爬虫、Flask框架、Echarts、Word Cloud等技术实现<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end col--&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end row--&gt;</span>\n\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row\"</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-lg-3 col-md-6 col-12 mt-4 pt-2\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/movie\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card service-wrapper rounded border-0 shadow px-4 py-5\"</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"icon text-center text-primary h1 shadow rounded bg-white\"</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"uim uim-airplay\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content mt-4\"</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h5</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"title\"</span>&gt;</span>经典电影<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h5</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end col--&gt;</span>\n\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-lg-3 col-md-6 col-12 mt-4 pt-2\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card service-wrapper rounded border-0 shadow px-4 py-5\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/score\"</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"icon text-center text-primary h1 shadow rounded bg-white\"</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"uim uim-circle-layer\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content mt-4\"</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h5</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"title\"</span>&gt;</span>评分统计<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h5</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end col--&gt;</span>\n\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-lg-3 col-md-6 col-12 mt-4 pt-2\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card service-wrapper rounded border-0 shadow px-4 py-5\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/word\"</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"icon text-center text-primary h1 shadow rounded bg-white\"</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"uim uim-signal-alt-3\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content mt-4\"</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h5</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"title\"</span>&gt;</span>词汇统计<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h5</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end col--&gt;</span>\n\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-lg-3 col-md-6 col-12 mt-4 pt-2\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card service-wrapper rounded border-0 shadow px-4 py-5\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/author\"</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"icon text-center text-primary h1 shadow rounded bg-white\"</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"uim uim-flip-h-alt\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content mt-4\"</span>&gt;</span>\n							<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h5</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"title\"</span>&gt;</span>作者信息<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h5</span>&gt;</span>\n						<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end col--&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end row--&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end container--&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end section--&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-dark footer-bar py-4\"</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row justify-content-center\"</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-12 text-center\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"foot-color mb-0\"</span>&gt;</span>persistenthuang@163.com<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- javascript --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/bootstrap.bundle.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/jquery.easing.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/scrollspy.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Magnific popup --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/jquery.magnific-popup.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/magnific.init.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Parallax --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/parallax.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- 图标库 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/feather.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Contact --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/contact.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Main Js --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"static/js/app.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></div></pre>\n<ul>\n<li>move.html</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-comment\">&lt;!-- Start 评分 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"section\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"price\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background: #E4E7ED;min-height: 600px\"</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row justify-content-center\"</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-12\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"section-title text-center mb-4 pb-2\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h4</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"title mb-4\"</span>&gt;</span>豆瓣电影Top250电影<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h4</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end col--&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end row--&gt;</span>\n		<span class=\"hljs-comment\">&lt;!--表格--&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"table table-hover table-light\"</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>排名<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>中文名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>外文名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>评分<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>人数<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>一句话描述<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>其他信息<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n			{%for movie in movies%}\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{movie[0]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"{{movie[1]}}\"</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">\"_blank\"</span>&gt;</span>\n						{{movie[3]}}\n					<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{movie[4]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{movie[5]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{movie[6]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{movie[7]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>{{movie[8]}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n			{%endfor%}\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end container--&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end section--&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-dark footer-bar py-4\"</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row justify-content-center\"</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-12 text-center\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"foot-color mb-0\"</span>&gt;</span>persistenthuang@163.com<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>\n</code></div></pre>\n<ul>\n<li>score.html</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-comment\">&lt;!-- Start 评分 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"section\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"price\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background: #E4E7ED;min-height: 600px\"</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row justify-content-center\"</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-12\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"section-title text-center mb-4 pb-2\"</span>&gt;</span>\n					<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h4</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"title mb-4\"</span>&gt;</span>豆瓣电影Top250评分分布图<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h4</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end col--&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end row--&gt;</span>\n\n		<span class=\"hljs-comment\">&lt;!-- 为 ECharts 准备一个具备大小（宽高）的 DOM --&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"main\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width: 100%;height:450px;margin: 0 auto;\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end container--&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span><span class=\"hljs-comment\">&lt;!--end section--&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-dark footer-bar py-4\"</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row justify-content-center\"</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-12 text-center\"</span>&gt;</span>\n				<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"foot-color mb-0\"</span>&gt;</span>persistenthuang@163.com<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n			<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">\n	<span class=\"hljs-comment\">// 基于准备好的dom，初始化echarts实例</span>\n	<span class=\"hljs-keyword\">var</span> myChart = echarts.init( <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\'main\'</span>));\n	<span class=\"hljs-keyword\">var</span> dataAxis = {{ score }};\n	<span class=\"hljs-keyword\">var</span> data = {{ number }};\n	<span class=\"hljs-keyword\">var</span> yMax = <span class=\"hljs-number\">50</span>;\n	<span class=\"hljs-keyword\">var</span> dataShadow = [];\n\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; data.length; i++) {\n		dataShadow.push(yMax);\n	}\n\n	option = {\n		<span class=\"hljs-attr\">xAxis</span>: {\n			<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'category\'</span>,\n			<span class=\"hljs-attr\">data</span>: dataAxis,\n			<span class=\"hljs-attr\">axisLabel</span>: {\n				<span class=\"hljs-attr\">inside</span>: <span class=\"hljs-literal\">true</span>,\n				<span class=\"hljs-attr\">textStyle</span>: {\n					<span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#1c1b1b\'</span>\n				}\n			},\n			<span class=\"hljs-attr\">axisTick</span>: {\n				<span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">false</span>\n			},\n			<span class=\"hljs-attr\">axisLine</span>: {\n				<span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">false</span>\n			},\n			<span class=\"hljs-attr\">z</span>: <span class=\"hljs-number\">10</span>\n		},\n		<span class=\"hljs-attr\">yAxis</span>: {\n			<span class=\"hljs-attr\">axisLine</span>: {\n				<span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">false</span>\n			},\n			<span class=\"hljs-attr\">axisTick</span>: {\n				<span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">false</span>\n			},\n			<span class=\"hljs-attr\">axisLabel</span>: {\n				<span class=\"hljs-attr\">textStyle</span>: {\n					<span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#999\'</span>\n				}\n			}\n		},\n		<span class=\"hljs-attr\">dataZoom</span>: [\n			{\n				<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'inside\'</span>\n			}\n		],\n		<span class=\"hljs-attr\">series</span>: [\n			{ <span class=\"hljs-comment\">// For shadow</span>\n				type: <span class=\"hljs-string\">\'bar\'</span>,\n				<span class=\"hljs-attr\">itemStyle</span>: {\n					<span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'rgba(0,0,0,0.05)\'</span>\n				},\n				<span class=\"hljs-attr\">barGap</span>: <span class=\"hljs-string\">\'-100%\'</span>,\n				<span class=\"hljs-attr\">barCategoryGap</span>: <span class=\"hljs-string\">\'40%\'</span>,\n				<span class=\"hljs-attr\">data</span>: dataShadow,\n				<span class=\"hljs-attr\">animation</span>: <span class=\"hljs-literal\">false</span>\n			},\n			{\n				<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'bar\'</span>,\n				<span class=\"hljs-attr\">itemStyle</span>: {\n					<span class=\"hljs-attr\">color</span>: <span class=\"hljs-keyword\">new</span> echarts.graphic.LinearGradient(\n							<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>,\n							[\n								{<span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#83bff6\'</span>},\n								{<span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#188df0\'</span>},\n								{<span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#188df0\'</span>}\n							]\n					)\n				},\n				<span class=\"hljs-attr\">emphasis</span>: {\n					<span class=\"hljs-attr\">itemStyle</span>: {\n						<span class=\"hljs-attr\">color</span>: <span class=\"hljs-keyword\">new</span> echarts.graphic.LinearGradient(\n								<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>,\n								[\n									{<span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#2378f7\'</span>},\n									{<span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0.7</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#2378f7\'</span>},\n									{<span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#83bff6\'</span>}\n								]\n						)\n					}\n				},\n				<span class=\"hljs-attr\">data</span>: data\n			}\n		]\n	};\n\n	<span class=\"hljs-comment\">// Enable data zoom when user click bar.</span>\n	<span class=\"hljs-keyword\">var</span> zoomSize = <span class=\"hljs-number\">6</span>;\n	myChart.on(<span class=\"hljs-string\">\'click\'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">params</span>) </span>{\n		<span class=\"hljs-built_in\">console</span>.log(dataAxis[<span class=\"hljs-built_in\">Math</span>.max(params.dataIndex - zoomSize / <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)]);\n		myChart.dispatchAction({\n			<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'dataZoom\'</span>,\n			<span class=\"hljs-attr\">startValue</span>: dataAxis[<span class=\"hljs-built_in\">Math</span>.max(params.dataIndex - zoomSize / <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)],\n			<span class=\"hljs-attr\">endValue</span>: dataAxis[<span class=\"hljs-built_in\">Math</span>.min(params.dataIndex + zoomSize / <span class=\"hljs-number\">2</span>, data.length - <span class=\"hljs-number\">1</span>)]\n		});\n	});\n	<span class=\"hljs-comment\">// 使用刚指定的配置项和数据显示图表。</span>\n	myChart.setOption(option);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></div></pre>\n<ul>\n<li>word.html</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-python\">&lt;section <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">section</span>\" <span class=\"hljs-title\">id</span>=\"<span class=\"hljs-title\">service</span>\" <span class=\"hljs-title\">style</span>=\"<span class=\"hljs-title\">background</span>:</span> <span class=\"hljs-comment\">#E4E7ED;min-height: 600px\"&gt;</span>\n	&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">container</span> <span class=\"hljs-title\">mt</span>-60 <span class=\"hljs-title\">mt</span>-5\"&gt;\n		&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">row</span> <span class=\"hljs-title\">align</span>-<span class=\"hljs-title\">items</span>-<span class=\"hljs-title\">center</span>\"&gt;\n			&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">col</span>-<span class=\"hljs-title\">lg</span>-8 <span class=\"hljs-title\">col</span>-<span class=\"hljs-title\">md</span>-8\"&gt;\n				&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">mr</span>-<span class=\"hljs-title\">lg</span>-5\"&gt;\n					&lt;<span class=\"hljs-title\">img</span> <span class=\"hljs-title\">src</span>=\"./../<span class=\"hljs-title\">static</span>/<span class=\"hljs-title\">word</span>.<span class=\"hljs-title\">jpg</span>\" <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">img</span>-<span class=\"hljs-title\">fluid</span>\" <span class=\"hljs-title\">alt</span>=\"\"&gt;\n				&lt;/<span class=\"hljs-title\">div</span>&gt;\n			&lt;/<span class=\"hljs-title\">div</span>&gt;&lt;!--<span class=\"hljs-title\">end</span> <span class=\"hljs-title\">col</span>--&gt;\n\n			&lt;div class=\"col-lg-4 col-md-4 mt-4 mt-sm-0 pt-2 pt-sm-0\"&gt;\n				&lt;div class=\"section-title\"&gt;\n					&lt;h2 class=\"text-primary\"&gt;\n						&lt;i class=\"uim uim-google-play\"&gt;&lt;/i&gt;\n					&lt;/h2&gt;\n					&lt;h4 class=\"title mt-3 mb-4\"&gt;词频统计&lt;/h4&gt;\n					&lt;p class=\"text-blue para-desc\"&gt;根据250部电影的一句话概述，提取的词云树，让我们了解一下经典电影都有什么相同点&lt;/p&gt;\n				&lt;/div&gt;\n			&lt;/div&gt;&lt;!--end col--&gt;\n		&lt;/div&gt;&lt;!--end row--&gt;\n	&lt;/div&gt;&lt;!--end container--&gt;\n&lt;/section&gt;&lt;!--end section--&gt;\n&lt;!-- Services End --&gt;\n\n\n&lt;footer class=\"bg-dark footer-bar py-4\"&gt;\n	&lt;div class=\"container\"&gt;\n		&lt;div class=\"row justify-content-center\"&gt;\n			&lt;div class=\"col-12 text-center\"&gt;\n				&lt;p class=\"foot-color mb-0\"&gt;persistenthuang@163.com&lt;/p&gt;\n			&lt;/div&gt;\n		&lt;/div&gt;\n	&lt;/div&gt;\n&lt;/footer&gt;\n</span></code></div></pre>\n','@[toc](目录)\n\n# python爬虫\n- 网络爬虫：按照一定规则，自动抓取互联网信息的程序或者脚本\n[学习视频地址：https://www.bilibili.com/video/BV12E411A7ZQ/?p=28](https://www.bilibili.com/video/BV12E411A7ZQ/?p=28)\n\n\n## 环境准备\n- 导入包配置\n\n~~~python\nimport sys\nfrom bs4 import BeautifulSoup  # 网页解析，获取数据\nimport re  # 正则表达式，进行文字匹配\nimport urllib.request, urllib.error  # 制定URl，获取网页数据\nimport xlwt  # 进行excel操作\nimport sqlite3  # 进行sqlLite数据库操作\n~~~\n\n- 基础文件结构\n\n~~~python\n\"\"\"\n爬取豆瓣电影排名250电影\n\"\"\"\ndef main():\n    url = \'https://movie.douban.com/top250?start=0\'\n    savepath=\'.\\\\doubanTop250.xls\'\n    # 1.爬取网页\n    datalist = get_data(url)\n\n    # 3.保存数据\n    sava_data()\n\n\ndef get_data(url):\n    datalist = []\n    # 2.逐一解析数据\n    return datalist\n\n\ndef sava_data(savepath):\n    print(\"save\")\n\n\nif __name__ == \'__main__\':\n    main()\n\n~~~\n\n## 预备知识\n### Urllib\n\n```python\nimport urllib.request\nimport urllib.parse\n\n# 通过get请求访问\nresponse = urllib.request.urlopen(\"http://www.baidu.com\")\nprint(response.read().decode(\'utf-8\'))  # 对获取到的源码进行utf-8解码\n\n\n# 通过post请求访问:http://httpbin.org\ndata = bytes(urllib.parse.urlencode({\"hello\": \"word\"}), encoding=\"utf-8\")\nresponse = urllib.request.urlopen(\"http://httpbin.org/post\",data=data)\nprint(response.read().decode(\'utf-8\'))\n\n\n# 超时处理\ntry:\n    response = urllib.request.urlopen(\"http://httpbin.org/get\",timeout=1)\n    print(response.read().decode(\'utf-8\'))\nexcept Exception as error:\n    print(error)\n\n# 响应头\nurl = \"http://douban.com\"\nheaders = {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36 Edg/85.0.564.68\"\n}\nreq = urllib.request.Request(url=url, headers=headers, method=\"POST\")\nresponse = urllib.request.urlopen(req, timeout=3)\nprint(response.status)\nprint(response.read().decode(\'utf-8\'))\n```\n\n### BeautifulSoup\n- 将复杂的html转换成一个复杂的树形结构，每个节点都是python对象\n- 所有对象可以分文四种：\n  - Tag:标签及其内容:(但是只是第一个标签)\n  - NavigableString:标签里的内容\n  - BeautifulSoup:自身，整个文档\n  - Comment:注释:是一个特殊的NavigableString输出的内容不包含注释符号\n\n```python\nfrom bs4 import BeautifulSoup\nfile = open(\"./../baidu.html\", \"rb\")\nhtml = file.read()\nbs = BeautifulSoup(html, \"html.parser\")\n\n# 1. tag:标签及其内容:(但是只是第一个标签)\nprint(bs.title)\nprint(bs.a)\nprint(bs.a.attrs)   # 得到标签的属性以字典的格式储存\nprint(type(bs.a))\n\n\n# 2.NavigableString:标签里的内容\nprint(bs.title.string)\nprint(type(bs.title.string))\n\n# 3.BeautifulSoup:自身，整个文档\nprint(bs.name)\nprint(type(bs))\n\n# 4.Comment:注释:是一个特殊的NavigableString输出的内容不包含注释符号\nprint(bs.a.string)\n```\n\n - 文档的遍历和查找\n\n~~~python\n# 文档的遍历:contents\nprint(bs.head.contents[1])\n\nprint(\"---------------------------------\")\n# 文档的搜索\n# 字符串过滤:查找与字符串完全匹配的内容\na_list = bs.find_all(\"a\")  # 查找所有的a标签\nprint(a_list)\n\n\nprint(\"---------------------------------\")\n\n# 正则表达式搜索:使用search()方法来匹配\nimport re\n\na_list1 = bs.find_all(re.compile(\"a\"))\nprint(a_list1)\n\nprint(\"---------------------------------\")\n\n# 使用方法来搜索:传入一个函数，根据函数的要求来搜索\ndef name_is_exists(tag):\n    return tag.has_attr(\"name\")\n\n\na_list2 = bs.find_all(name_is_exists)\nprint(a_list2)\n\nprint(\"---------------------------------\")\n\n# keywords:参数搜索\n# a_list3 = bs.find_all(class_=True)\na_list3 = bs.find_all(text=\"新闻\")\na_list3 = bs.find_all(text=re.compile(\"\\d\"),limit=2)    # 根据正则表达式匹配内容，limit限制查找个数\nfor item in a_list3:\n    print(item)\n\n\nprint(\"---------------------------------\")\n# 选择器类似css中的选择器\nprint(bs.select(\"title\"))        # 通过标签\nprint(bs.select(\".classname\"))   # 通过类名\nprint(bs.select(\"#idname\"))      # 通过id查找\nprint(bs.select(\"a[class=\'classname\']\"))      # 通过属性查找\nprint(bs.select(\"head>title\"))      # 通过子标签\n~~~\n\n\n### 正则表达式\n参考文档链接：[https://www.runoob.com/regexp/regexp-syntax.html](https://www.runoob.com/regexp/regexp-syntax.html)\n\n- python中的re库\n![123](https://img-blog.csdnimg.cn/20201004203732333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n```python\n# 正则表达式：字符串匹配（判断字符串是否符合一定的标准）\nimport re\n# 创建模式对象\npat = re.compile(\"AA\")  # 此处的AA是正则表达式\na = pat.search(\"AAA\")            # search字符串被校验的内容\nprint(a)\n\na = re.search(\"abc\", \"aabcc\")    # 前面的字符串是规则，后面的字符串是被匹配的对象\nprint(a)\n\na = re.findall(\"[a-z]+\", \"aABCXabuhua\")  # 找到所有的匹配项\nprint(a)\n\na = re.sub(\"a\", \"A\", \"abcdefg\")   #找到a用A替换\nprint(a)\n# 建议在正则表达式中，被比较的字符串前面加上r，不用担心转义字符的问题\n```\n\n\n### xlwt表格操作\n- 简单操作\n\n```python\nimport xlwt\nwork_book = xlwt.Workbook(encoding=\"utf-8\")\nwork_sheet = work_book.add_sheet(\"sheet1\")\nwork_sheet.write(0, 0, \'hello\') # 参数：行、列、内容\nwork_book.save(\'student.xls\')\n```\n\n## sqlite3数据库操作\n- 建表语句\n\n~~~python\nimport sqlite3\nconnet = sqlite3.connect(\"test.db\") # 打开或创建文件\n# 建表\nc = connet.cursor()  # 获取游标\nsql = \'\'\'\n    create table if not exists doubanTop250 (\n        id integer not null primary key autoincrement,\n        find_link text not null,\n        find_image text,\n        find_ctitle char(100),\n        find_otitle  char(100),\n        find_score int(4),\n        find_judge_number int(10),\n        find_sign char(200),\n        find_description text\n    )\n\'\'\'\nc.execute(sql)      # 执行sql语句\nconnet.commit()     # 提交\nconnet.close()      # 关闭数据库\n\n~~~\n\n- 插入语句\n\n~~~python\nimport sqlite3\nconnet = sqlite3.connect(\"test.db\") # 打开或创建文件\n# 建表\nc = connet.cursor()  # 获取游标\nsql = \'\'\'\n    insert into doubanTop250 (find_link,find_image,find_ctitle,find_otitle,find_score,find_judge_number,find_sign,find_description)\n    values (\"1\",\"1\",\"1\",\"1\",1,1,\"1\",\"1\");\n\'\'\'\nc.execute(sql)      # 执行sql语句\nconnet.commit()     # 提交\nconnet.close()      # 关闭数据库\n~~~\n\n- 查询语句\n\n~~~python\nimport sqlite3\nconnet = sqlite3.connect(\"test.db\") # 打开或创建文件\n# 建表\nc = connet.cursor()  # 获取游标\nsql = \'\'\'\n    select * from doubanTop250;\n\'\'\'\nresponse = c.execute(sql)      # 执行sql语句\nfor i in response:\n    for j in  range(0,8):\n        print(i[j])\n\nconnet.commit()     # 提交\nconnet.close()      # 关闭数据库\n~~~\n\n## 获取数据\n- 根据一个URL获取一个页面的html数据\n\n```python\n# 得到一个指定页面的信息\ndef ask_url(url):\n    head = {\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0\"\n    }\n    \"\"\"\n    head:模拟浏览器头部信息\n    \"User-Agent\":用户代理\n    \"\"\"\n    request = urllib.request.Request(url=url, headers=head)\n    html = \"\"\n    try:\n        response = urllib.request.urlopen(request)\n        html = response.read().decode(\"utf-8\")\n    except Exception as e:\n        if hasattr(e,\"code\"):\n            print(e.code)\n        if hasattr(e,\"reason\"):\n            print(e.reason)\n    return html\n\n```\n\n## 解析数据\n- 豆瓣排名分析\n![123123](https://img-blog.csdnimg.cn/20201004211017864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n```python\n# 定义一些全局变量\n# 电影链接正则表达式\nfind_link = re.compile(r\'<a href=\"(.*?)\">\')\n# 电影图片链接正则表达式,re.S忽略换行符\n# find_image = re.compile(r\'<img(.*)src=\"(.*?)\" class=\"\">\', re.S)\nfind_image = re.compile(r\'<img.*src=\"(.*?)\"\', re.S)\n# 电影标题\nfind_title = re.compile(r\'<span class=\"title\">(.*)</span>\')\n# 影片评分\nfind_score = re.compile(r\'<span class=\"rating_num\" property=\"v:average\">(.*)</span>\')\n# 评价人数\nfind_judge_number = re.compile(r\'<span>(\\d*)人评价</span>\')\n# 概况\nfind_sign = re.compile(r\'<span class=\"inq\">(.*)</span>\')\n# 影片相关内容\nfind_description = re.compile(r\'<p class=\"\">(.*?)</p>\', re.S)\n```\n\n```python\ndef get_data(url):\n    datalist = []\n    for i in range(0, 10):      # 循环获取10个页面数据\n        urls = url + str(i*25)\n        html = ask_url(urls)    # 保存网页信息\n        # 2.逐一解析数据\n        soup = BeautifulSoup(html, \"html.parser\")\n        for item in soup.find_all(\'div\', class_=\"item\"):  # 查找符合要求的字符串，形成列表\n            data = []   # 保存一部电影的所有信息\n            item = str(item)\n\n            # 获取影片详情链接\n            link = re.findall(find_link, item)[0]  # re库通过正则表达式查找指定字符串\n            data.append(link)\n\n            img = re.findall(find_image, item)[0]\n            data.append(img)\n\n            title = re.findall(find_title, item)\n            # 判断中文外文名\n            if len(title) == 2:\n                ctitle = title[0]\n                data.append(ctitle)\n                otitle = title[1].replace(\"/\",\"\")   # 去掉名称前的斜杠\n                data.append(otitle)\n            else:\n                data.append(title)\n                data.append(\" \")    # 留空\n\n            score = re.findall(find_score, item)[0]\n            data.append(score)\n\n            judge_number = re.findall(find_judge_number, item)[0]\n            data.append(judge_number)\n\n            sign = re.findall(find_sign, item)\n            if len(sign) != 0:\n                data.append(sign[0].replace(\"。\", \"\"))\n            else:\n                data.append(\" \")\n\n            description = re.findall(find_description, item)[0]\n            description = re.sub(\'<br(\\s+)?/>(\\s+)?\',\"\",description)    # 去掉<br/>\n            description = re.sub(\'/\',\"\",description)\n            data.append(description.strip())    # 去掉前后的空格\n            print(data)\n            datalist.append(data)   # 处理好的\n\n    return datalist\n```\n\n\n## 保存数据到表格中\n\n```python\n# 保存数据\ndef sava_data(savepath, datalist):\n    print(\'------------save------------\')\n    work_book = xlwt.Workbook(encoding=\"utf-8\", style_compression=0)\n    work_sheet = work_book.add_sheet(\"doubanTop250\", cell_overwrite_ok=True)\n    col = (\"电影详情链接\", \"图片链接\" , \"影片中文名\", \"影片外文名\", \"评分\", \"评价数\", \"概况\", \"详情\")\n    for i in range(0, 8):\n        work_sheet.write(0, i, col[i])\n    for i in range(0, 250):\n        print(\"第%d条\" %i)\n        data = datalist[i]\n        for j in range(0, 8):\n            work_sheet.write(i+1, j, data[j])\n    work_book.save(savepath)    # 保存数据\n```\n\n## 保存数据到数据库中\n- 保存数据到数据库中\n\n~~~python\n\n# 保存数据到sqlite\ndef sava_data_sqlite(datalist):\n    print(\"------------SQLite------------\")\n    init_sqlite()   # 初始化数控库\n    # 插入数据\n    connet = sqlite3.connect(\"test.db\")  # 打开或创建文件\n    c = connet.cursor()  # 获取游标\n    for data in datalist:\n        for index in range(0, 8):\n            if index not in (4, 5):\n                data[index] = \'\"\'+data[index]+\'\"\'\n        sql = \'\'\'\n            insert into doubanTop250(find_link,find_image,find_ctitle,find_otitle,find_score,find_judge_number,find_sign,find_description)\n            values(%s)\'\'\'%\",\".join(data)\n        print(sql)\n        c.execute(sql)\n        connet.commit()\n\n    c.close()\n    connet.close()\n\n\n# 建表语句\ndef init_sqlite():\n    connet = sqlite3.connect(\"test.db\")  # 打开或创建文件\n    # 建表\n    c = connet.cursor()  # 获取游标\n    sql = \'\'\'\n        create table if not exists doubanTop250 (\n            id integer not null primary key autoincrement,\n            find_link text not null,\n            find_image text,\n            find_ctitle char(100),\n            find_otitle  char(100),\n            find_score int(4),\n            find_judge_number int(10),\n            find_sign char(200),\n            find_description text\n        )\n    \'\'\'\n    c.execute(sql)  # 执行sql语句\n    connet.commit()  # 提交\n    connet.close()  # 关闭数据库\n~~~\n\n\n## 数据可视化\n\n### Flask框架\n- web框架\n\n新建一个flask框架\n- app.py的测试文件：\n\n```python\nfrom flask import Flask, render_template, request\nimport datetime\n\napp = Flask(__name__)\n\n\n# 通过访问路径，获取用户的字符串参数\n@app.route(\'/index/<name>\')\ndef hello_word(name):\n    return \'hello word %s\'%name\n\n\n# 通过访问路径，获取用户的字符串参数\n@app.route(\'/index/<int:id>\')\ndef hello_word2(id):\n    return \'hello %d\'%id\n\n\n# 返回给用户渲染后的网页文件\n@app.route(\'/\')\ndef index():\n    time = datetime.date.today()        # 向网页页面传递的参数\n    name = [1, 2, 3]                    # 列表类型\n    dic = {\"name\": \"黄耀辉\", \"age\": \"18\"}  # 字典类型\n    return render_template(\"index.html\", time=time, name=name, dic=dic)\n\n\n@app.route(\'/register\')\ndef register():\n    return render_template(\"register.html\")\n\n\n@app.route(\'/result\', methods=[\'POST\'])\ndef register_result():\n    if request.method == \'POST\':\n        result = request.form\n        return render_template(\"result.html\", result=result)\n    else:\n        return render_template(\"error.html\")\n\n\nif __name__ == \'__main__\':\n    app.run(debug=True)\n\n```\n\n- html中的数据操作\n\n```html\n<body>\n<div>豆瓣爬虫</div>\n<div>时间:{{time}}</div>\n<div>\n    测试列表：\n    {%for i in name%}\n    <li>\n        {{i}}\n    </li>\n    {% endfor %}\n</div>\n<div>\n    测试字典：\n    <table>\n        {% for key,value in dic.items() %}\n        <tr>\n            <td>{{key}}</td>\n            <td>{{value}}</td>\n        </tr>\n        {% endfor %}\n    </table>\n</div>\n</body>\n```\n\n\n\n- 表单提交\n\n~~~html\n<form action=\"{{url_for(\'result\')}}\" method=\"post\">\n    <p>姓名: <input type=\"text\" name=\"name\"></p>\n    <p>性别: <input type=\"text\" name=\"sex\"></p>\n    <p>年龄: <input type=\"text\" name=\"age\"></p>\n    <p>地址: <input type=\"text\" name=\"address\"></p>\n    <p><input type=\"submit\"></p>\n</form>\n~~~\n\n\n### Echarts应用\n- 百度数据可视化应用\n[官网地址链接](https://echarts.apache.org/examples/zh/index.html#chart-type-drag)\n\n\n### WorldCloud应用\n- 词云\n[官网地址地址](https://amueller.github.io/word_cloud/)\n\n## 完整代码\n\n- app.py\n\n~~~python\nfrom flask import Flask, render_template, request\nimport sqlite3\nimport jieba    # 分词\nfrom matplotlib import pyplot as plt    # 绘图，数据可视化\nfrom wordcloud import WordCloud         # 词云\nfrom PIL import Image                   # 图片处理\nimport numpy as np                      # 矩阵运算\n\n\napp = Flask(__name__)\n\n\n@app.route(\'/\')\ndef home():\n    return render_template(\"home.html\")\n\n\n@app.route(\'/movie\')\ndef movie():\n    movies = []\n    con = sqlite3.connect(\"./douban/test.db\")\n    cur = con.cursor()\n    sql = \"select * from doubanTop250\"\n    data = cur.execute(sql)\n    for item in data:\n        movies.append(item)\n\n    cur.close()\n    con.close()\n    return render_template(\"movie.html\", movies=movies)\n\n\n@app.route(\'/score\')\ndef score():\n    find_score = []\n    find_number = []\n    con = sqlite3.connect(\"./douban/test.db\")\n    cur = con.cursor()\n    sql = \"select find_score,count(find_score) from doubanTop250 group by find_score\"\n    data = cur.execute(sql)\n    for item in data:\n        find_score.append(item[0])\n        find_number.append(item[1])\n    cur.close()\n    con.close()\n    return render_template(\"score.html\", score=find_score, number=find_number)\n\n\n@app.route(\'/word\')\ndef word():\n    # 获取数据\n    con = sqlite3.connect(\"./douban/test.db\")\n    cur = con.cursor()\n    sql=\"select find_sign from doubanTop250\"\n    data = con.execute(sql)\n    # 拼接\n    text = \"\"\n    for item in data:\n        text = text + item[0]\n    cut = jieba.cut(text)\n    string = \" \".join(cut)\n    cur.close()\n    con.close()\n    # 找到一张图片\n    img = Image.open(\"./static/timg.jpg\")    # 打开遮罩图片\n    img_array = np.array(img)                # 将图片转换为数组\n    wold_cloud = WordCloud(\n        background_color=\"#E4E7ED\",\n        mask=img_array,\n        font_path=\"STKAITI.TTF\",    # 字体所在位置\n    ).generate_from_text(string)    # 放入词\n    # 绘制图片\n    fig = plt.figure(1)\n    plt.imshow(wold_cloud)\n    plt.axis(\'off\')     # 不显示坐标轴\n    # plt.show()  # 显示生成的词云图片\n    plt.savefig(\"./static/word.jpg\", dpi=500)\n\n    return render_template(\"word.html\")\n\n\n@app.route(\'/author\')\ndef author():\n    return render_template(\"author.html\")\n\n\nif __name__ == \'__main__\':\n    app.run(debug=True)\n~~~\n\n- 前端页面\n- home.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n<meta charset=\"utf-8\" />\n<title>豆瓣top260</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<meta name=\"description\" content=\"Premium Bootstrap 4 Landing Page Template\" />\n<meta name=\"keywords\" content=\"bootstrap 4, premium, marketing, multipurpose\" />\n<meta content=\"Shreethemes\" name=\"author\" />\n<!-- favicon -->\n<link rel=\"shortcut icon\" href=\"images/favicon.ico\">\n<!-- Bootstrap css -->\n<link href=\"static/css/bootstrap.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n<!-- 图标库 -->\n<link href=\"static/css/materialdesignicons.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n<link rel=\"stylesheet\" href=\"static/css/unicons.css\" />\n<!-- Pe7 Icon -->\n<link rel=\"stylesheet\" type=\"text/css\" href=\"static/css/pe-icon-7.css\">\n<!-- Icons -->\n<link href=\"static/css/magnific-popup.css\" rel=\"stylesheet\" type=\"text/css\" />\n<!-- Main css File -->\n<link href=\"static/css/style.css\" rel=\"stylesheet\" type=\"text/css\" />\n<link href=\"static/css/default.css\" rel=\"stylesheet\" id=\"color-opt\">\n\n</head>\n\n<body>\n<!-- Navbar STart 导航栏-->\n<header id=\"topnav\" class=\"defaultscroll sticky\" style=\"background: #409EFF\">\n	<div class=\"container\">\n		<!-- Logo container-->\n		<div>\n			<a class=\"logo\" href=\"/\" target=\"_blank\" style=\"color: #0b0b0b\">\n				<!-- Landkey -->\n				豆瓣Top250\n			</a>\n		</div>\n\n		<div id=\"navigation\">\n			<!-- Navigation Menu-->\n			<ul class=\"navigation-menu\">\n				<li class=\"has-submenu\">\n					<a href=\"/\">首页</a>\n				</li>\n				<li class=\"has-submenu\">\n					<a href=\"/movie\">电影</a>\n				</li>\n				<li class=\"has-submenu\">\n					<a href=\"/score\">评分</a>\n				</li>\n				<li class=\"has-submenu\">\n					<a href=\"/word\">词云</a>\n				</li>\n				<li class=\"has-submenu\">\n					<a href=\"/author\">作者</a>\n				</li>\n			</ul><!--end navigation menu-->\n		</div><!--end navigation-->\n	</div><!--end container-->\n</header><!--end header-->\n<!-- Navbar End -->\n\n<section class=\"section\" id=\"price\" style=\"background: #E4E7ED;min-height: 600px\">\n	<div class=\"container\">\n		<div class=\"row justify-content-center\">\n			<div class=\"col-12\">\n				<div class=\"section-title text-center mb-4 pb-2\">\n					<h4 class=\"title mb-4\">豆瓣电影Top250数据分析</h4>\n					<p class=\"text-muted para-desc mx-auto mb-0\">应用Python爬虫、Flask框架、Echarts、Word Cloud等技术实现</p>\n				</div>\n			</div><!--end col-->\n		</div><!--end row-->\n\n		<div class=\"row\">\n			<div class=\"col-lg-3 col-md-6 col-12 mt-4 pt-2\">\n				<a href=\"/movie\">\n					<div class=\"card service-wrapper rounded border-0 shadow px-4 py-5\">\n						<div class=\"icon text-center text-primary h1 shadow rounded bg-white\">\n							<i class=\"uim uim-airplay\"></i>\n						</div>\n						<div class=\"content mt-4\">\n							<h5 class=\"title\">经典电影</h5>\n						</div>\n					</div>\n				</a>\n			</div><!--end col-->\n\n			<div class=\"col-lg-3 col-md-6 col-12 mt-4 pt-2\">\n				<div class=\"card service-wrapper rounded border-0 shadow px-4 py-5\">\n					<a href=\"/score\">\n						<div class=\"icon text-center text-primary h1 shadow rounded bg-white\">\n							<i class=\"uim uim-circle-layer\"></i>\n						</div>\n						<div class=\"content mt-4\">\n							<h5 class=\"title\">评分统计</h5>\n						</div>\n					</a>\n				</div>\n			</div><!--end col-->\n\n			<div class=\"col-lg-3 col-md-6 col-12 mt-4 pt-2\">\n				<div class=\"card service-wrapper rounded border-0 shadow px-4 py-5\">\n					<a href=\"/word\">\n						<div class=\"icon text-center text-primary h1 shadow rounded bg-white\">\n							<i class=\"uim uim-signal-alt-3\"></i>\n						</div>\n						<div class=\"content mt-4\">\n							<h5 class=\"title\">词汇统计</h5>\n						</div>\n					</a>\n				</div>\n			</div><!--end col-->\n\n			<div class=\"col-lg-3 col-md-6 col-12 mt-4 pt-2\">\n				<div class=\"card service-wrapper rounded border-0 shadow px-4 py-5\">\n					<a href=\"/author\">\n						<div class=\"icon text-center text-primary h1 shadow rounded bg-white\">\n							<i class=\"uim uim-flip-h-alt\"></i>\n						</div>\n						<div class=\"content mt-4\">\n							<h5 class=\"title\">作者信息</h5>\n						</div>\n					</a>\n				</div>\n			</div><!--end col-->\n		</div><!--end row-->\n	</div><!--end container-->\n</section><!--end section-->\n\n<footer class=\"bg-dark footer-bar py-4\">\n	<div class=\"container\">\n		<div class=\"row justify-content-center\">\n			<div class=\"col-12 text-center\">\n				<p class=\"foot-color mb-0\">persistenthuang@163.com</p>\n			</div>\n		</div>\n	</div>\n</footer>\n\n<!-- javascript -->\n<script src=\"static/js/jquery.min.js\"></script>\n<script src=\"static/js/bootstrap.bundle.min.js\"></script>\n<script src=\"static/js/jquery.easing.min.js\"></script>\n<script src=\"static/js/scrollspy.min.js\"></script>\n<!-- Magnific popup -->\n<script src=\"static/js/jquery.magnific-popup.min.js\"></script>\n<script src=\"static/js/magnific.init.js\"></script>\n<!-- Parallax -->\n<script src=\"static/js/parallax.js\"></script>\n<!-- 图标库 -->\n<script src=\"static/js/bundle.js\"></script>\n<script src=\"static/js/feather.min.js\"></script>\n<!-- Contact -->\n<script src=\"static/js/contact.js\"></script>\n<!-- Main Js -->\n<script src=\"static/js/app.js\"></script>\n</body>\n</html>\n```\n- move.html\n\n```html\n<!-- Start 评分 -->\n<section class=\"section\" id=\"price\" style=\"background: #E4E7ED;min-height: 600px\">\n	<div class=\"container\">\n		<div class=\"row justify-content-center\">\n			<div class=\"col-12\">\n				<div class=\"section-title text-center mb-4 pb-2\">\n					<h4 class=\"title mb-4\">豆瓣电影Top250电影</h4>\n				</div>\n			</div><!--end col-->\n		</div><!--end row-->\n		<!--表格-->\n		<table class=\"table table-hover table-light\">\n			<tr>\n				<td>排名</td>\n				<td>中文名称</td>\n				<td>外文名称</td>\n				<td>评分</td>\n				<td>人数</td>\n				<td>一句话描述</td>\n				<td>其他信息</td>\n			</tr>\n			{%for movie in movies%}\n			<tr>\n				<td>{{movie[0]}}</td>\n				<td>\n					<a href=\"{{movie[1]}}\" target=\"_blank\">\n						{{movie[3]}}\n					</a>\n				</td>\n				<td>{{movie[4]}}</td>\n				<td>{{movie[5]}}</td>\n				<td>{{movie[6]}}</td>\n				<td>{{movie[7]}}</td>\n				<td>{{movie[8]}}</td>\n			</tr>\n			{%endfor%}\n		</table>\n	</div><!--end container-->\n</section><!--end section-->\n\n<footer class=\"bg-dark footer-bar py-4\">\n	<div class=\"container\">\n		<div class=\"row justify-content-center\">\n			<div class=\"col-12 text-center\">\n				<p class=\"foot-color mb-0\">persistenthuang@163.com</p>\n			</div>\n		</div>\n	</div>\n</footer>\n```\n\n- score.html\n\n~~~html\n<!-- Start 评分 -->\n<section class=\"section\" id=\"price\" style=\"background: #E4E7ED;min-height: 600px\">\n	<div class=\"container\">\n		<div class=\"row justify-content-center\">\n			<div class=\"col-12\">\n				<div class=\"section-title text-center mb-4 pb-2\">\n					<h4 class=\"title mb-4\">豆瓣电影Top250评分分布图</h4>\n				</div>\n			</div><!--end col-->\n		</div><!--end row-->\n\n		<!-- 为 ECharts 准备一个具备大小（宽高）的 DOM -->\n		<div id=\"main\" style=\"width: 100%;height:450px;margin: 0 auto;\"></div>\n	</div><!--end container-->\n</section><!--end section-->\n\n\n<footer class=\"bg-dark footer-bar py-4\">\n	<div class=\"container\">\n		<div class=\"row justify-content-center\">\n			<div class=\"col-12 text-center\">\n				<p class=\"foot-color mb-0\">persistenthuang@163.com</p>\n			</div>\n		</div>\n	</div>\n</footer>\n\n<script type=\"text/javascript\">\n	// 基于准备好的dom，初始化echarts实例\n	var myChart = echarts.init( document.getElementById(\'main\'));\n	var dataAxis = {{ score }};\n	var data = {{ number }};\n	var yMax = 50;\n	var dataShadow = [];\n\n	for (var i = 0; i < data.length; i++) {\n		dataShadow.push(yMax);\n	}\n\n	option = {\n		xAxis: {\n			type: \'category\',\n			data: dataAxis,\n			axisLabel: {\n				inside: true,\n				textStyle: {\n					color: \'#1c1b1b\'\n				}\n			},\n			axisTick: {\n				show: false\n			},\n			axisLine: {\n				show: false\n			},\n			z: 10\n		},\n		yAxis: {\n			axisLine: {\n				show: false\n			},\n			axisTick: {\n				show: false\n			},\n			axisLabel: {\n				textStyle: {\n					color: \'#999\'\n				}\n			}\n		},\n		dataZoom: [\n			{\n				type: \'inside\'\n			}\n		],\n		series: [\n			{ // For shadow\n				type: \'bar\',\n				itemStyle: {\n					color: \'rgba(0,0,0,0.05)\'\n				},\n				barGap: \'-100%\',\n				barCategoryGap: \'40%\',\n				data: dataShadow,\n				animation: false\n			},\n			{\n				type: \'bar\',\n				itemStyle: {\n					color: new echarts.graphic.LinearGradient(\n							0, 0, 0, 1,\n							[\n								{offset: 0, color: \'#83bff6\'},\n								{offset: 0.5, color: \'#188df0\'},\n								{offset: 1, color: \'#188df0\'}\n							]\n					)\n				},\n				emphasis: {\n					itemStyle: {\n						color: new echarts.graphic.LinearGradient(\n								0, 0, 0, 1,\n								[\n									{offset: 0, color: \'#2378f7\'},\n									{offset: 0.7, color: \'#2378f7\'},\n									{offset: 1, color: \'#83bff6\'}\n								]\n						)\n					}\n				},\n				data: data\n			}\n		]\n	};\n\n	// Enable data zoom when user click bar.\n	var zoomSize = 6;\n	myChart.on(\'click\', function (params) {\n		console.log(dataAxis[Math.max(params.dataIndex - zoomSize / 2, 0)]);\n		myChart.dispatchAction({\n			type: \'dataZoom\',\n			startValue: dataAxis[Math.max(params.dataIndex - zoomSize / 2, 0)],\n			endValue: dataAxis[Math.min(params.dataIndex + zoomSize / 2, data.length - 1)]\n		});\n	});\n	// 使用刚指定的配置项和数据显示图表。\n	myChart.setOption(option);\n</script>\n~~~\n\n- word.html\n```python\n<section class=\"section\" id=\"service\" style=\"background: #E4E7ED;min-height: 600px\">\n	<div class=\"container mt-60 mt-5\">\n		<div class=\"row align-items-center\">\n			<div class=\"col-lg-8 col-md-8\">\n				<div class=\"mr-lg-5\">\n					<img src=\"./../static/word.jpg\" class=\"img-fluid\" alt=\"\">\n				</div>\n			</div><!--end col-->\n\n			<div class=\"col-lg-4 col-md-4 mt-4 mt-sm-0 pt-2 pt-sm-0\">\n				<div class=\"section-title\">\n					<h2 class=\"text-primary\">\n						<i class=\"uim uim-google-play\"></i>\n					</h2>\n					<h4 class=\"title mt-3 mb-4\">词频统计</h4>\n					<p class=\"text-blue para-desc\">根据250部电影的一句话概述，提取的词云树，让我们了解一下经典电影都有什么相同点</p>\n				</div>\n			</div><!--end col-->\n		</div><!--end row-->\n	</div><!--end container-->\n</section><!--end section-->\n<!-- Services End -->\n\n\n<footer class=\"bg-dark footer-bar py-4\">\n	<div class=\"container\">\n		<div class=\"row justify-content-center\">\n			<div class=\"col-12 text-center\">\n				<p class=\"foot-color mb-0\">persistenthuang@163.com</p>\n			</div>\n		</div>\n	</div>\n</footer>\n```\n',2,'123456',2),(32,5,'2020-11-24 17:12:35','编译原理（词法分析）','编译原理词法分析的实验（正规式转NFA）','https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2727673415,3958038973&fm=26&gp=0.jpg','<p><h3>目录</h3><ul><ul><li><a href=\"#_2\">【问题描述】</a></li><li><a href=\"#_6\">【基本要求】</a></li><li><a href=\"#_9\">【测试用例】</a></li><li><a href=\"#_21\">【解决步骤】</a></li><ul><li><a href=\"#NFA_23\">正规式转NFA方法步骤：</a></li><li><a href=\"#_30\">图的构建过程：</a></li><li><a href=\"#_243\">完整代码：</a></li></ul></ul></ul></p>\n<h2><a id=\"_2\"></a>【问题描述】</h2>\n<p>正规表达式→NFA问题的一种描述是：<br />\n编写一个程序，输入一个正规表达式，输出与该文法等价的有穷自动机。</p>\n<h2><a id=\"_6\"></a>【基本要求】</h2>\n<p>设置FA初始状态X，终态Y，过程态用数字表示：0 1 2 3………</p>\n<h2><a id=\"_9\"></a>【测试用例】</h2>\n<p>测试数据：</p>\n<blockquote>\n<p>(a|b)*abb</p>\n</blockquote>\n<p>输出结果应为：</p>\n<blockquote>\n<p>X X - ~ -&gt;3<br />\nY<br />\n0 0-a-&gt;1<br />\n1 1-b-&gt;2<br />\n2 2-b-&gt;Y<br />\n3 3-~-&gt;0 3-a-&gt;3 3-b-&gt;3</p>\n</blockquote>\n<h2><a id=\"_21\"></a>【解决步骤】</h2>\n<h3><a id=\"NFA_23\"></a>正规式转NFA方法步骤：</h3>\n<ol>\n<li>判断一下正规式有没有错误，括号对不对，并添加符号“+”</li>\n<li>运算符的优先级为：*&gt;|&gt;+</li>\n<li>根据符号优先级，把中缀表达式转后缀表达式便于计算</li>\n<li>根据后缀表达式依次构建图。有三种运算：*、|、+</li>\n</ol>\n<h3><a id=\"_30\"></a>图的构建过程：</h3>\n<p>（1）	定义边结构体用来储存边：edge</p>\n<pre><div class=\"hljs\"><code class=\"lang-c\"><span class=\"hljs-comment\">//NFA边</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">edge</span>{</span>\n	        <span class=\"hljs-keyword\">int</span> start;\n	        <span class=\"hljs-keyword\">int</span> end;\n	        <span class=\"hljs-keyword\">char</span> accept; \n};\n</code></div></pre>\n<p>（2）	定义一个类用来表示图结构：grup</p>\n<pre><div class=\"hljs\"><code class=\"lang-c\"><span class=\"hljs-comment\">//NFA单元，一个大的NFA单元可以是由很多小单元通过规则拼接起来</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">grup</span>{</span>\n<span class=\"hljs-keyword\">public</span>:\n	       <span class=\"hljs-built_in\">vector</span>&lt;edge&gt; edges;  <span class=\"hljs-comment\">//这个NFA拥有的边</span>\n	      <span class=\"hljs-keyword\">int</span> stateCount; <span class=\"hljs-comment\">//状态数</span>\n	      <span class=\"hljs-keyword\">int</span> StartState;  <span class=\"hljs-comment\">//开始状态</span>\n	      <span class=\"hljs-keyword\">int</span> EndState;  <span class=\"hljs-comment\">//结束状态</span>\n<span class=\"hljs-keyword\">public</span>:\n	       grup() {\n		     <span class=\"hljs-keyword\">this</span>-&gt;stateCount = <span class=\"hljs-number\">2</span>;\n		     <span class=\"hljs-keyword\">this</span>-&gt;StartState = <span class=\"hljs-number\">0</span>;\n		     <span class=\"hljs-keyword\">this</span>-&gt;EndState = <span class=\"hljs-number\">1</span>;\n	        }\n};\n</code></div></pre>\n<p>（3）	构建出的图结构边是从状态是从0开始编号的  构建过程：以(a|b)*abb为例</p>\n<ul>\n<li>\n<p>输入字符串添加+号，并判断是否合法：<br />\n算法：</p>\n<ul>\n<li>定义一个栈s用来匹配括号，判断括号是否符合条件。<br />\n从左往右扫描字符串，如果是字母或数字，则放入输出表达式后<br />\n然后判断后一个是什么符号判断是否要加上+号<br />\n对于类似如下几种情况需要加上+的：AA、A(、<em>A、</em>(、)A、)(。<br />\n完成后(a|b)<em>abb变为：(a|b)</em>+a+b+b</li>\n</ul>\n</li>\n<li>\n<p>中缀表达式转后缀表达式<br />\n算法：</p>\n<ul>\n<li>定义一个栈s，从左忘右扫描表达式，<br />\n遇见字母或数字拼接在输出表达式后<br />\n遇见“（”压入栈中<br />\n遇见“）”弹出栈中元素，直到遇到了“（”<br />\n遇到“<em>、|、+”判断栈顶元素的优先级，把比自己优先级高或等的弹出去<br />\n然后自己再压栈。<br />\n扫描完成后再把栈中元素依次弹出，拼接在输出字符串后<br />\n完成后(a|b)</em>+a+b+b应该变为：ab|*a+b+b+<br />\n核心算法：</li>\n</ul>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-c\"><span class=\"hljs-function\">Void <span class=\"hljs-title\">change_text</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> text)</span> </span>{\n	<span class=\"hljs-built_in\">stack</span>&lt;<span class=\"hljs-keyword\">char</span>&gt; s;\n	<span class=\"hljs-built_in\">string</span> new_text = <span class=\"hljs-string\">\"\"</span>;\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-keyword\">int</span>(text.length()); i++) {\n	<span class=\"hljs-keyword\">if</span> ((text[i] &lt;= <span class=\"hljs-string\">\'z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'a\'</span>) || (text[i] &lt;= <span class=\"hljs-string\">\'Z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'A\'</span>) || (text[i]&lt;= <span class=\"hljs-string\">\'9\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'0\'</span>)) {new_text = new_text + text[i];}\n		<span class=\"hljs-keyword\">else</span> {\n			<span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'(\'</span>) {s.push(text[i]);}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\')\'</span>) {\n				<span class=\"hljs-keyword\">while</span> (s.top() != <span class=\"hljs-string\">\'(\'</span>) {new_text = new_text + s.top();s.pop();}\n				s.pop();}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'*\'</span>) {s.push(text[i]);}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'|\'</span>) {\n				<span class=\"hljs-keyword\">if</span> (s.empty()) {s.push(text[i]);}\n				<span class=\"hljs-keyword\">else</span> {\n					<span class=\"hljs-keyword\">while</span> (!s.empty()) {\n						<span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'*\'</span>) {new_text = new_text + s.top();s.pop();}\n						<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'|\'</span>) {new_text = new_text + s.top();s.pop();}\n						<span class=\"hljs-keyword\">else</span> {<span class=\"hljs-keyword\">break</span>;}\n					}\n					s.push(text[i]);}\n			}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'+\'</span>) {\n				<span class=\"hljs-keyword\">if</span> (s.empty()) {s.push(text[i]);}\n				<span class=\"hljs-keyword\">else</span> {\n					<span class=\"hljs-keyword\">while</span>(!s.empty()){\n						<span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'*\'</span>) {new_text = new_text + s.top();s.pop();}\n<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'+\'</span>) {new_text = new_text + s.top();s.pop();}\n						<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'|\'</span>) {new_text = new_text + s.top();s.pop();}\n						<span class=\"hljs-keyword\">else</span> {<span class=\"hljs-keyword\">break</span>;}}\n					s.push(text[i]);}}}}\n	<span class=\"hljs-keyword\">while</span>(!s.empty()) {new_text += s.top();s.pop();}\n	<span class=\"hljs-keyword\">return</span> new_text;}\n\n</code></div></pre>\n<ul>\n<li>构架图结构：<br />\n算法：\n<ul>\n<li>定义一个栈用来储存图结构，从左向右扫描后缀表达式<br />\n如果遇到的是字母或数字，构建一个如下状态的图：一条边两个状态<br />\n<img src=\"https://img-blog.csdnimg.cn/20201124164429544.png#pic_center\" alt=\"1111\" /></li>\n</ul>\n</li>\n</ul>\n<p>压入栈中<br />\n如果遇到运算符分三种情“<em>、|、+”<br />\n遇到“</em>”，栈顶元素出栈<br />\n<img src=\"https://img-blog.csdnimg.cn/20201124164503754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"1111111\" /></p>\n<p>遇到“+”<br />\n<img src=\"https://img-blog.csdnimg.cn/20201124164530863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<p>遇到“|”<br />\n<img src=\"https://img-blog.csdnimg.cn/20201124164555594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>核心算法：</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-c\">getNFA(<span class=\"hljs-built_in\">string</span> text) {\n	<span class=\"hljs-built_in\">stack</span>&lt;grup&gt; s;\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(text.length()); i++) {\n		<span class=\"hljs-keyword\">if</span> ((text[i] &lt;= <span class=\"hljs-string\">\'z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'a\'</span>) || (text[i] &lt;= <span class=\"hljs-string\">\'Z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'A\'</span>)||(text[i] &lt;= <span class=\"hljs-string\">\'9\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'0\'</span>)) {\n			grup tempG;\n			edge tempE;\n			tempE.accept = text[i];\n			tempE.start = <span class=\"hljs-number\">0</span>;\n			tempE.end = <span class=\"hljs-number\">1</span>;\n			tempG.edges.push_back(tempE);\n			s.push(tempG);\n		}\n		<span class=\"hljs-keyword\">else</span> {\n			<span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'+\'</span>) {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG1 = s.top();\n				s.pop();\n				<span class=\"hljs-comment\">//图和图合成</span>\n				grup tempG = tempG1;\n				tempG.stateCount = tempG1.stateCount + tempG2.stateCount<span class=\"hljs-number\">-1</span>;\n				tempG.StartState = <span class=\"hljs-number\">0</span>;\n				tempG.EndState = tempG.stateCount - <span class=\"hljs-number\">1</span>;\n				<span class=\"hljs-comment\">//获取后一条边</span>\n				<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					e2.start += tempG1.stateCount<span class=\"hljs-number\">-1</span>;\n					e2.end += tempG1.stateCount<span class=\"hljs-number\">-1</span>;\n					tempG.edges.push_back(e2);\n				}\n				<span class=\"hljs-comment\">//合成图压栈</span>\n				s.push(tempG);\n			}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'*\'</span>) {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG;\n				<span class=\"hljs-keyword\">if</span> (tempG2.StartState!=tempG2.EndState) {\n					tempG.stateCount = tempG2.stateCount + <span class=\"hljs-number\">1</span>;\n				}\n				<span class=\"hljs-keyword\">else</span> {\n					tempG.stateCount = tempG2.stateCount + <span class=\"hljs-number\">2</span>;\n				}\n				tempG.EndState = tempG.stateCount<span class=\"hljs-number\">-1</span>;\n				<span class=\"hljs-comment\">//图内的边编号加1</span>\n				<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					<span class=\"hljs-keyword\">if</span> (e2.end==tempG2.EndState) {\n						e2.start += <span class=\"hljs-number\">1</span>;\n						e2.end = e2.start;\n					}\n					<span class=\"hljs-keyword\">else</span> {\n						e2.start += <span class=\"hljs-number\">1</span>;\n						e2.end += <span class=\"hljs-number\">1</span>;\n					}\n					tempG.edges.push_back(e2);\n				}\n				<span class=\"hljs-comment\">//添加两条边</span>\n				edge e1;\n				e1.accept = <span class=\"hljs-string\">\'~\'</span>;\n				e1.start = <span class=\"hljs-number\">0</span>;\n				e1.end = <span class=\"hljs-number\">1</span>;\n				edge e2;\n				e2.accept = <span class=\"hljs-string\">\'~\'</span>;\n				e2.start = tempG.EndState<span class=\"hljs-number\">-1</span>;\n				e2.end = e2.start + <span class=\"hljs-number\">1</span>;\n				tempG.edges.push_back(e1);\n				tempG.edges.push_back(e2);\n				<span class=\"hljs-comment\">//合成图压栈</span>\n				s.push(tempG);\n			}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'|\'</span>) {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG1 = s.top();\n				s.pop();\n				grup tempG;\n				tempG.StartState = <span class=\"hljs-number\">0</span>;\n				tempG.EndState = <span class=\"hljs-number\">0</span>;\n				tempG.stateCount = tempG1.stateCount + tempG2.stateCount<span class=\"hljs-number\">-3</span>;\n				<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(tempG1.edges.size());i++) {\n					edge e1 = tempG1.edges[i];\n					<span class=\"hljs-keyword\">if</span> (e1.end == tempG1.EndState) {\n						e1.end = <span class=\"hljs-number\">0</span>;\n					}\n					tempG.edges.push_back(e1);\n				}\n				<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					<span class=\"hljs-keyword\">if</span> (e2.end == tempG2.EndState) {\n						e2.end = <span class=\"hljs-number\">0</span>;\n					}\n					tempG.edges.push_back(e2);\n				}\n				<span class=\"hljs-comment\">//合成图压栈</span>\n				s.push(tempG);\n			}\n		}\n	}\n	<span class=\"hljs-keyword\">return</span> s.top();\n}\n</code></div></pre>\n<ul>\n<li>输出图结构：<br />\n输出时按照格式输出，构建好的图状态为0到n，把0输出为X最后一个输出为Y中间状态减一就可以了</li>\n</ul>\n<h3><a id=\"_243\"></a>完整代码：</h3>\n<pre><div class=\"hljs\"><code class=\"lang-c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;fstream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stack&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;vector&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;string&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MAX 100</span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-comment\">//NFA边</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">edge</span>{</span>\n	<span class=\"hljs-keyword\">int</span> start;\n	<span class=\"hljs-keyword\">int</span> end;\n	<span class=\"hljs-keyword\">char</span> accept;\n};\n\n<span class=\"hljs-comment\">//NFA单元，一个大的NFA单元可以是由很多小单元通过规则拼接起来</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">grup</span>\n{</span>\n<span class=\"hljs-keyword\">public</span>:\n	<span class=\"hljs-built_in\">vector</span>&lt;edge&gt; edges;  <span class=\"hljs-comment\">//这个NFA拥有的边</span>\n	<span class=\"hljs-keyword\">int</span> stateCount; <span class=\"hljs-comment\">//状态数</span>\n	<span class=\"hljs-keyword\">int</span> StartState;  <span class=\"hljs-comment\">//开始状态</span>\n	<span class=\"hljs-keyword\">int</span> EndState;  <span class=\"hljs-comment\">//结束状态</span>\n<span class=\"hljs-keyword\">public</span>:\n	grup() {\n		<span class=\"hljs-keyword\">this</span>-&gt;stateCount = <span class=\"hljs-number\">2</span>;\n		<span class=\"hljs-keyword\">this</span>-&gt;StartState = <span class=\"hljs-number\">0</span>;\n		<span class=\"hljs-keyword\">this</span>-&gt;EndState = <span class=\"hljs-number\">1</span>;\n	}\n};\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WordAnstary</span> {</span>\n<span class=\"hljs-keyword\">private</span> :\n	<span class=\"hljs-built_in\">string</span> input_file = <span class=\"hljs-string\">\"testfile.txt\"</span>;\n	<span class=\"hljs-built_in\">string</span> output_file = <span class=\"hljs-string\">\"output.txt\"</span>;\n<span class=\"hljs-keyword\">public</span>:\n	<span class=\"hljs-comment\">//主函数</span>\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">start</span><span class=\"hljs-params\">()</span></span>;\n	<span class=\"hljs-comment\">//整理字符串</span>\n	<span class=\"hljs-function\"><span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">clear_text</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> text)</span></span>;\n	<span class=\"hljs-comment\">//中缀表达式转后缀表达式 </span>\n	<span class=\"hljs-function\"><span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">change_text</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> text)</span></span>;\n	<span class=\"hljs-comment\">//根据正规式获得NFA</span>\n	<span class=\"hljs-function\">grup <span class=\"hljs-title\">getNFA</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> text)</span></span>;\n	<span class=\"hljs-comment\">//输出结果</span>\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printNFA</span><span class=\"hljs-params\">(grup out)</span></span>;\n};\n<span class=\"hljs-comment\">//主函数</span>\n<span class=\"hljs-keyword\">int</span> WordAnstary::start() {\n	<span class=\"hljs-comment\">//文件操作工具</span>\n	ifstream read_file;\n	<span class=\"hljs-comment\">//读取文件</span>\n	<span class=\"hljs-built_in\">string</span> text;\n	<span class=\"hljs-comment\">//read_file.open(input_file);</span>\n	<span class=\"hljs-comment\">//read_file &gt;&gt; text;</span>\n	<span class=\"hljs-built_in\">cin</span> &gt;&gt; text;\n	<span class=\"hljs-comment\">//cout &lt;&lt; text;</span>\n	<span class=\"hljs-comment\">//分析正规式，得到有穷自动机</span>\n	<span class=\"hljs-comment\">//cout &lt;&lt; \"原表达式为：\" &lt;&lt; text &lt;&lt; endl;</span>\n	<span class=\"hljs-built_in\">string</span> new_text = <span class=\"hljs-keyword\">this</span>-&gt;clear_text(text);\n	<span class=\"hljs-keyword\">if</span> (new_text != <span class=\"hljs-string\">\"\"</span>) {\n		<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"添加+的表达式：\"</span>&lt;&lt;new_text &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n		new_text = <span class=\"hljs-keyword\">this</span>-&gt;change_text(new_text);\n		<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"后缀表达式：\"</span>&lt;&lt;new_text &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n		grup out = <span class=\"hljs-keyword\">this</span>-&gt;getNFA(new_text);\n		<span class=\"hljs-keyword\">this</span>-&gt;printNFA(out);\n	}\n	<span class=\"hljs-keyword\">else</span> {\n		<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"输入不合法\"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n	}\n	read_file.close();\n	<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n};\n\n<span class=\"hljs-keyword\">void</span> WordAnstary::printNFA(grup out) {\n	<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"X \"</span>;\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-keyword\">int</span>(out.edges.size()); j++) {\n		edge eX = out.edges[j];\n		<span class=\"hljs-keyword\">if</span> (eX.start == <span class=\"hljs-number\">0</span>) {\n			<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"X-\"</span> &lt;&lt; eX.accept &lt;&lt; <span class=\"hljs-string\">\"-&gt;\"</span>;\n			<span class=\"hljs-keyword\">if</span> (eX.end==out.stateCount<span class=\"hljs-number\">-1</span>) {\n				<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Y \"</span>;\n			}\n			<span class=\"hljs-keyword\">else</span> {\n				<span class=\"hljs-built_in\">cout</span> &lt;&lt; eX.end - <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-string\">\" \"</span>;\n			}\n		}\n	}\n	<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n	<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Y \"</span>;\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-keyword\">int</span>(out.edges.size()); j++) {\n		edge eX = out.edges[j];\n		<span class=\"hljs-keyword\">if</span> (eX.start == out.stateCount - <span class=\"hljs-number\">1</span>) {\n			<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Y-\"</span> &lt;&lt; eX.accept &lt;&lt; <span class=\"hljs-string\">\"-&gt;\"</span>;\n			<span class=\"hljs-keyword\">if</span> (eX.end == out.stateCount - <span class=\"hljs-number\">1</span>) {\n				<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Y \"</span>;\n			}\n			<span class=\"hljs-keyword\">else</span> {\n				<span class=\"hljs-built_in\">cout</span> &lt;&lt; eX.end - <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-string\">\" \"</span>;\n			}\n		}\n	}\n	<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; out.stateCount - <span class=\"hljs-number\">1</span>; i++) {\n		<span class=\"hljs-built_in\">cout</span> &lt;&lt; i - <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">\" \"</span>;\n		<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-keyword\">int</span>(out.edges.size()); j++) {\n			edge e = out.edges[j];\n			<span class=\"hljs-keyword\">if</span> (e.start == i&amp;&amp;e.accept==<span class=\"hljs-string\">\'~\'</span>) {\n				<span class=\"hljs-built_in\">cout</span> &lt;&lt; e.start - <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">\"-\"</span> &lt;&lt; e.accept &lt;&lt; <span class=\"hljs-string\">\"-&gt;\"</span>;\n				<span class=\"hljs-keyword\">if</span> (e.end == out.stateCount - <span class=\"hljs-number\">1</span>) {\n					<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Y \"</span>;\n				}\n				<span class=\"hljs-keyword\">else</span> {\n					<span class=\"hljs-built_in\">cout</span> &lt;&lt; e.end - <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">\" \"</span>;\n				}\n			}\n		}\n		<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-keyword\">int</span>(out.edges.size()); j++) {\n			edge e = out.edges[j];\n			<span class=\"hljs-keyword\">if</span> (e.start == i&amp;&amp;e.accept!=<span class=\"hljs-string\">\'~\'</span>) {\n				<span class=\"hljs-built_in\">cout</span> &lt;&lt; e.start - <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">\"-\"</span> &lt;&lt; e.accept &lt;&lt; <span class=\"hljs-string\">\"-&gt;\"</span>;\n				<span class=\"hljs-keyword\">if</span> (e.end == out.stateCount - <span class=\"hljs-number\">1</span>) {\n					<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Y \"</span>;\n				}\n				<span class=\"hljs-keyword\">else</span> {\n					<span class=\"hljs-built_in\">cout</span> &lt;&lt; e.end - <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-string\">\" \"</span>;\n				}\n			}\n		}\n		<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n	}\n}\n\ngrup WordAnstary::getNFA(<span class=\"hljs-built_in\">string</span> text) {\n	<span class=\"hljs-built_in\">stack</span>&lt;grup&gt; s;\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(text.length()); i++) {\n		<span class=\"hljs-keyword\">if</span> ((text[i] &lt;= <span class=\"hljs-string\">\'z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'a\'</span>) || (text[i] &lt;= <span class=\"hljs-string\">\'Z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'A\'</span>)||(text[i] &lt;= <span class=\"hljs-string\">\'9\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'0\'</span>)) {\n			grup tempG;\n			edge tempE;\n			tempE.accept = text[i];\n			tempE.start = <span class=\"hljs-number\">0</span>;\n			tempE.end = <span class=\"hljs-number\">1</span>;\n			tempG.edges.push_back(tempE);\n			s.push(tempG);\n		}\n		<span class=\"hljs-keyword\">else</span> {\n			<span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'+\'</span>) {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG1 = s.top();\n				s.pop();\n				<span class=\"hljs-comment\">//图和图合成</span>\n				grup tempG = tempG1;\n				tempG.stateCount = tempG1.stateCount + tempG2.stateCount<span class=\"hljs-number\">-1</span>;\n				tempG.StartState = <span class=\"hljs-number\">0</span>;\n				tempG.EndState = tempG.stateCount - <span class=\"hljs-number\">1</span>;\n				<span class=\"hljs-comment\">//获取后一条边</span>\n				<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					e2.start += tempG1.stateCount<span class=\"hljs-number\">-1</span>;\n					e2.end += tempG1.stateCount<span class=\"hljs-number\">-1</span>;\n					tempG.edges.push_back(e2);\n				}\n				<span class=\"hljs-comment\">//合成图压栈</span>\n				s.push(tempG);\n			}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'*\'</span>) {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG;\n				<span class=\"hljs-keyword\">if</span> (tempG2.StartState!=tempG2.EndState) {\n					tempG.stateCount = tempG2.stateCount + <span class=\"hljs-number\">1</span>;\n				}\n				<span class=\"hljs-keyword\">else</span> {\n					tempG.stateCount = tempG2.stateCount + <span class=\"hljs-number\">2</span>;\n				}\n				tempG.EndState = tempG.stateCount<span class=\"hljs-number\">-1</span>;\n				<span class=\"hljs-comment\">//图内的边编号加1</span>\n				<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					<span class=\"hljs-keyword\">if</span> (e2.end==tempG2.EndState) {\n						e2.start += <span class=\"hljs-number\">1</span>;\n						e2.end = e2.start;\n					}\n					<span class=\"hljs-keyword\">else</span> {\n						e2.start += <span class=\"hljs-number\">1</span>;\n						e2.end += <span class=\"hljs-number\">1</span>;\n					}\n					tempG.edges.push_back(e2);\n				}\n				<span class=\"hljs-comment\">//添加两条边</span>\n				edge e1;\n				e1.accept = <span class=\"hljs-string\">\'~\'</span>;\n				e1.start = <span class=\"hljs-number\">0</span>;\n				e1.end = <span class=\"hljs-number\">1</span>;\n				edge e2;\n				e2.accept = <span class=\"hljs-string\">\'~\'</span>;\n				e2.start = tempG.EndState<span class=\"hljs-number\">-1</span>;\n				e2.end = e2.start + <span class=\"hljs-number\">1</span>;\n				tempG.edges.push_back(e1);\n				tempG.edges.push_back(e2);\n				<span class=\"hljs-comment\">//合成图压栈</span>\n				s.push(tempG);\n			}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'|\'</span>) {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG1 = s.top();\n				s.pop();\n				grup tempG;\n				tempG.StartState = <span class=\"hljs-number\">0</span>;\n				tempG.EndState = <span class=\"hljs-number\">0</span>;\n				tempG.stateCount = tempG1.stateCount + tempG2.stateCount<span class=\"hljs-number\">-3</span>;\n				<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(tempG1.edges.size());i++) {\n					edge e1 = tempG1.edges[i];\n					<span class=\"hljs-keyword\">if</span> (e1.end == tempG1.EndState) {\n						e1.end = <span class=\"hljs-number\">0</span>;\n					}\n					tempG.edges.push_back(e1);\n				}\n				<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					<span class=\"hljs-keyword\">if</span> (e2.end == tempG2.EndState) {\n						e2.end = <span class=\"hljs-number\">0</span>;\n					}\n					tempG.edges.push_back(e2);\n				}\n				<span class=\"hljs-comment\">//合成图压栈</span>\n				s.push(tempG);\n			}\n		}\n	}\n	<span class=\"hljs-keyword\">return</span> s.top();\n}\n\n<span class=\"hljs-built_in\">string</span> WordAnstary::clear_text(<span class=\"hljs-built_in\">string</span> text) {\n	<span class=\"hljs-comment\">//储存添加好+号的正规式</span>\n	<span class=\"hljs-built_in\">string</span> new_text = <span class=\"hljs-string\">\"\"</span>;\n	<span class=\"hljs-comment\">//分析栈用来分析()匹配</span>\n	<span class=\"hljs-built_in\">stack</span>&lt;<span class=\"hljs-keyword\">char</span>&gt; s;\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(text.length()); i++) {\n		<span class=\"hljs-keyword\">if</span> ((text[i] &lt;= <span class=\"hljs-string\">\'z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'a\'</span>) || (text[i] &lt;= <span class=\"hljs-string\">\'Z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'A\'</span>) || (text[i] &lt;= <span class=\"hljs-string\">\'9\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'0\'</span>)) {\n			new_text = new_text + text[i];\n			<span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-keyword\">int</span>(text.length()) - <span class=\"hljs-number\">1</span>) {\n				<span class=\"hljs-keyword\">if</span> ((text[i + <span class=\"hljs-number\">1</span>] &lt;= <span class=\"hljs-string\">\'z\'</span> &amp;&amp; text[i+<span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-string\">\'a\'</span>) || (text[i + <span class=\"hljs-number\">1</span>] &lt;= <span class=\"hljs-string\">\'Z\'</span> &amp;&amp; text[i + <span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-string\">\'A\'</span>) || (text[i+<span class=\"hljs-number\">1</span>] &lt;= <span class=\"hljs-string\">\'9\'</span> &amp;&amp; text[i+<span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-string\">\'0\'</span>)) {\n					new_text = new_text + <span class=\"hljs-string\">\'+\'</span>;\n				}\n				<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i + <span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">\'(\'</span>) {\n					new_text = new_text + <span class=\"hljs-string\">\'+\'</span>;\n				}\n			}\n		}\n		<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'|\'</span>) {\n			new_text = new_text + text[i];\n			<span class=\"hljs-keyword\">continue</span>;\n		}\n		<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'*\'</span>) {\n			new_text = new_text + text[i];\n			<span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-keyword\">int</span>(text.length()) - <span class=\"hljs-number\">1</span>) {\n				<span class=\"hljs-keyword\">if</span> ((text[i + <span class=\"hljs-number\">1</span>] &lt;= <span class=\"hljs-string\">\'z\'</span> &amp;&amp; text[i+<span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-string\">\'a\'</span>) || (text[i + <span class=\"hljs-number\">1</span>] &lt;= <span class=\"hljs-string\">\'Z\'</span> &amp;&amp; text[i + <span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-string\">\'A\'</span>) || (text[i] &lt;= <span class=\"hljs-string\">\'9\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'0\'</span>))\n					new_text = new_text + <span class=\"hljs-string\">\'+\'</span>;\n				<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i + <span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">\'(\'</span>)\n					new_text = new_text + <span class=\"hljs-string\">\'+\'</span>;\n			}\n		}\n		<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'(\'</span>) {\n			new_text = new_text + text[i];\n			s.push(text[i]);\n		}\n		<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\')\'</span>) {\n			new_text = new_text + text[i];\n			<span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-keyword\">int</span>(text.length()) - <span class=\"hljs-number\">1</span>) {\n				<span class=\"hljs-keyword\">if</span> ((text[i + <span class=\"hljs-number\">1</span>] &lt;= <span class=\"hljs-string\">\'z\'</span> &amp;&amp; text[i+<span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-string\">\'a\'</span>) || (text[i + <span class=\"hljs-number\">1</span>] &lt;= <span class=\"hljs-string\">\'Z\'</span> &amp;&amp; text[i + <span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-string\">\'A\'</span>) || (text[i] &lt;= <span class=\"hljs-string\">\'9\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'0\'</span>))\n					new_text = new_text + <span class=\"hljs-string\">\'+\'</span>;\n				<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i + <span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">\'(\'</span>)\n					new_text = new_text + <span class=\"hljs-string\">\'+\'</span>;\n			}\n			<span class=\"hljs-keyword\">if</span> (s.empty()) {\n				<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>;\n			}\n			<span class=\"hljs-keyword\">else</span> {\n				s.pop();\n			}\n		}\n		<span class=\"hljs-keyword\">else</span>\n			<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>;\n	}\n	<span class=\"hljs-keyword\">if</span> (s.empty())\n		<span class=\"hljs-keyword\">return</span> new_text;\n	<span class=\"hljs-keyword\">else</span>\n		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>;\n}\n\n<span class=\"hljs-built_in\">string</span> WordAnstary::change_text(<span class=\"hljs-built_in\">string</span> text) {\n	<span class=\"hljs-built_in\">stack</span>&lt;<span class=\"hljs-keyword\">char</span>&gt; s;\n	<span class=\"hljs-built_in\">string</span> new_text = <span class=\"hljs-string\">\"\"</span>;\n	<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-keyword\">int</span>(text.length()); i++) {\n		<span class=\"hljs-keyword\">if</span> ((text[i] &lt;= <span class=\"hljs-string\">\'z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'a\'</span>) || (text[i] &lt;= <span class=\"hljs-string\">\'Z\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'A\'</span>) || (text[i] &lt;= <span class=\"hljs-string\">\'9\'</span> &amp;&amp; text[i] &gt;= <span class=\"hljs-string\">\'0\'</span>)) {\n			new_text = new_text + text[i];\n		}\n		<span class=\"hljs-keyword\">else</span> {\n			<span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'(\'</span>) {\n				s.push(text[i]);\n			}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\')\'</span>) {\n				<span class=\"hljs-keyword\">while</span> (s.top() != <span class=\"hljs-string\">\'(\'</span>) {\n					new_text = new_text + s.top();\n					s.pop();\n				}\n				s.pop();\n			}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'*\'</span>) {\n				s.push(text[i]);\n			}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'|\'</span>) {\n				<span class=\"hljs-keyword\">if</span> (s.empty()) {\n					s.push(text[i]);\n				}\n				<span class=\"hljs-keyword\">else</span> {\n					<span class=\"hljs-keyword\">while</span> (!s.empty()) {\n						<span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'*\'</span>) {\n							new_text = new_text + s.top();\n							s.pop();\n						}\n						<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'|\'</span>) {\n							new_text = new_text + s.top();\n							s.pop();\n						}\n						<span class=\"hljs-keyword\">else</span> {\n							<span class=\"hljs-keyword\">break</span>;\n						}\n					}\n					s.push(text[i]);\n				}\n			}\n			<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">\'+\'</span>) {\n				<span class=\"hljs-keyword\">if</span> (s.empty()) {\n					s.push(text[i]);\n				}\n				<span class=\"hljs-keyword\">else</span> {\n					<span class=\"hljs-keyword\">while</span>(!s.empty()){\n						<span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'*\'</span>) {\n							new_text = new_text + s.top();\n							s.pop();\n						}<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'+\'</span>) {\n							new_text = new_text + s.top();\n							s.pop();\n						}\n						<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s.top() == <span class=\"hljs-string\">\'|\'</span>) {\n							new_text = new_text + s.top();\n							s.pop();\n						}\n						<span class=\"hljs-keyword\">else</span> {\n							<span class=\"hljs-keyword\">break</span>;\n						}\n					}\n					s.push(text[i]);\n				}\n			}\n		}\n	}\n	<span class=\"hljs-keyword\">while</span>(!s.empty()) {\n		new_text += s.top();\n		s.pop();\n	}\n	<span class=\"hljs-keyword\">return</span> new_text;\n}\n\n\n<span class=\"hljs-comment\">//int main() {</span>\n<span class=\"hljs-comment\">//	WordAnstary wordAustary;</span>\n<span class=\"hljs-comment\">//	wordAustary.start();</span>\n<span class=\"hljs-comment\">//}```</span>\n</code></div></pre>\n','@[toc](目录)\n\n## 【问题描述】\n正规表达式→NFA问题的一种描述是：\n编写一个程序，输入一个正规表达式，输出与该文法等价的有穷自动机。\n\n## 【基本要求】\n设置FA初始状态X，终态Y，过程态用数字表示：0 1 2 3………\n\n## 【测试用例】\n测试数据：   \n>(a|b)*abb\n\n输出结果应为：\n> X X - ~ ->3\nY  \n0 0-a->1\n1 1-b->2\n2 2-b->Y\n3 3-~->0 3-a->3 3-b->3\n\n## 【解决步骤】\n\n### 正规式转NFA方法步骤：\n1.	判断一下正规式有没有错误，括号对不对，并添加符号“+”\n2.	运算符的优先级为：*>|>+\n3.	根据符号优先级，把中缀表达式转后缀表达式便于计算\n4.	根据后缀表达式依次构建图。有三种运算：*、|、+\n\n\n### 图的构建过程：\n（1）	定义边结构体用来储存边：edge\n~~~c\n//NFA边\nstruct edge{\n	        int start;\n	        int end;\n	        char accept; \n};\n~~~\n（2）	定义一个类用来表示图结构：grup\n~~~c\n//NFA单元，一个大的NFA单元可以是由很多小单元通过规则拼接起来\nclass grup{\npublic:\n	       vector<edge> edges;  //这个NFA拥有的边\n	      int stateCount; //状态数\n	      int StartState;  //开始状态\n	      int EndState;  //结束状态\npublic:\n	       grup() {\n		     this->stateCount = 2;\n		     this->StartState = 0;\n		     this->EndState = 1;\n	        }\n};\n~~~\n\n（3）	构建出的图结构边是从状态是从0开始编号的  构建过程：以(a|b)*abb为例\n- 输入字符串添加+号，并判断是否合法：\n算法：\n    - 定义一个栈s用来匹配括号，判断括号是否符合条件。\n从左往右扫描字符串，如果是字母或数字，则放入输出表达式后\n然后判断后一个是什么符号判断是否要加上+号\n对于类似如下几种情况需要加上+的：AA、A(、*A、*(、)A、)(。\n完成后(a|b)*abb变为：(a|b)*+a+b+b\n\n- 中缀表达式转后缀表达式\n算法：\n   - 定义一个栈s，从左忘右扫描表达式，\n遇见字母或数字拼接在输出表达式后\n遇见“（”压入栈中\n遇见“）”弹出栈中元素，直到遇到了“（”\n遇到“*、|、+”判断栈顶元素的优先级，把比自己优先级高或等的弹出去\n然后自己再压栈。\n扫描完成后再把栈中元素依次弹出，拼接在输出字符串后\n完成后(a|b)*+a+b+b应该变为：ab|*a+b+b+\n   核心算法：\n\n~~~c\nVoid change_text(string text) {\n	stack<char> s;\n	string new_text = \"\";\n	for (int i = 0; i<int(text.length()); i++) {\n	if ((text[i] <= \'z\' && text[i] >= \'a\') || (text[i] <= \'Z\' && text[i] >= \'A\') || (text[i]<= \'9\' && text[i] >= \'0\')) {new_text = new_text + text[i];}\n		else {\n			if (text[i] == \'(\') {s.push(text[i]);}\n			else if (text[i] == \')\') {\n				while (s.top() != \'(\') {new_text = new_text + s.top();s.pop();}\n				s.pop();}\n			else if (text[i] == \'*\') {s.push(text[i]);}\n			else if (text[i] == \'|\') {\n				if (s.empty()) {s.push(text[i]);}\n				else {\n					while (!s.empty()) {\n						if (s.top() == \'*\') {new_text = new_text + s.top();s.pop();}\n						else if (s.top() == \'|\') {new_text = new_text + s.top();s.pop();}\n						else {break;}\n					}\n					s.push(text[i]);}\n			}\n			else if (text[i] == \'+\') {\n				if (s.empty()) {s.push(text[i]);}\n				else {\n					while(!s.empty()){\n						if (s.top() == \'*\') {new_text = new_text + s.top();s.pop();}\nelse if (s.top() == \'+\') {new_text = new_text + s.top();s.pop();}\n						else if (s.top() == \'|\') {new_text = new_text + s.top();s.pop();}\n						else {break;}}\n					s.push(text[i]);}}}}\n	while(!s.empty()) {new_text += s.top();s.pop();}\n	return new_text;}\n\n~~~\n- 构架图结构：\n算法：\n    - 定义一个栈用来储存图结构，从左向右扫描后缀表达式\n    如果遇到的是字母或数字，构建一个如下状态的图：一条边两个状态\n ![1111](https://img-blog.csdnimg.cn/20201124164429544.png#pic_center)\n\n压入栈中\n       如果遇到运算符分三种情“*、|、+”\n遇到“*”，栈顶元素出栈\n![1111111](https://img-blog.csdnimg.cn/20201124164503754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n遇到“+”\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201124164530863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n\n遇到“|”\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201124164555594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzA5OTA3,size_16,color_FFFFFF,t_70#pic_center)\n\n- 核心算法：\n\n~~~c\ngetNFA(string text) {\n	stack<grup> s;\n	for (int i = 0; i < int(text.length()); i++) {\n		if ((text[i] <= \'z\' && text[i] >= \'a\') || (text[i] <= \'Z\' && text[i] >= \'A\')||(text[i] <= \'9\' && text[i] >= \'0\')) {\n			grup tempG;\n			edge tempE;\n			tempE.accept = text[i];\n			tempE.start = 0;\n			tempE.end = 1;\n			tempG.edges.push_back(tempE);\n			s.push(tempG);\n		}\n		else {\n			if (text[i] == \'+\') {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG1 = s.top();\n				s.pop();\n				//图和图合成\n				grup tempG = tempG1;\n				tempG.stateCount = tempG1.stateCount + tempG2.stateCount-1;\n				tempG.StartState = 0;\n				tempG.EndState = tempG.stateCount - 1;\n				//获取后一条边\n				for (int i = 0; i < int(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					e2.start += tempG1.stateCount-1;\n					e2.end += tempG1.stateCount-1;\n					tempG.edges.push_back(e2);\n				}\n				//合成图压栈\n				s.push(tempG);\n			}\n			else if (text[i] == \'*\') {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG;\n				if (tempG2.StartState!=tempG2.EndState) {\n					tempG.stateCount = tempG2.stateCount + 1;\n				}\n				else {\n					tempG.stateCount = tempG2.stateCount + 2;\n				}\n				tempG.EndState = tempG.stateCount-1;\n				//图内的边编号加1\n				for (int i = 0; i < int(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					if (e2.end==tempG2.EndState) {\n						e2.start += 1;\n						e2.end = e2.start;\n					}\n					else {\n						e2.start += 1;\n						e2.end += 1;\n					}\n					tempG.edges.push_back(e2);\n				}\n				//添加两条边\n				edge e1;\n				e1.accept = \'~\';\n				e1.start = 0;\n				e1.end = 1;\n				edge e2;\n				e2.accept = \'~\';\n				e2.start = tempG.EndState-1;\n				e2.end = e2.start + 1;\n				tempG.edges.push_back(e1);\n				tempG.edges.push_back(e2);\n				//合成图压栈\n				s.push(tempG);\n			}\n			else if (text[i] == \'|\') {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG1 = s.top();\n				s.pop();\n				grup tempG;\n				tempG.StartState = 0;\n				tempG.EndState = 0;\n				tempG.stateCount = tempG1.stateCount + tempG2.stateCount-3;\n				for (int i = 0; i < int(tempG1.edges.size());i++) {\n					edge e1 = tempG1.edges[i];\n					if (e1.end == tempG1.EndState) {\n						e1.end = 0;\n					}\n					tempG.edges.push_back(e1);\n				}\n				for (int i = 0; i < int(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					if (e2.end == tempG2.EndState) {\n						e2.end = 0;\n					}\n					tempG.edges.push_back(e2);\n				}\n				//合成图压栈\n				s.push(tempG);\n			}\n		}\n	}\n	return s.top();\n}\n~~~\n- 输出图结构：\n输出时按照格式输出，构建好的图状态为0到n，把0输出为X最后一个输出为Y中间状态减一就可以了\n\n\n\n\n### 完整代码：\n\n```c\n#include<iostream>\n#include<fstream>\n#include<stack>\n#include<vector>\n#include<string>\n#define MAX 100\nusing namespace std;\n\n//NFA边\nstruct edge{\n	int start;\n	int end;\n	char accept;\n};\n\n//NFA单元，一个大的NFA单元可以是由很多小单元通过规则拼接起来\nclass grup\n{\npublic:\n	vector<edge> edges;  //这个NFA拥有的边\n	int stateCount; //状态数\n	int StartState;  //开始状态\n	int EndState;  //结束状态\npublic:\n	grup() {\n		this->stateCount = 2;\n		this->StartState = 0;\n		this->EndState = 1;\n	}\n};\n\nclass WordAnstary {\nprivate :\n	string input_file = \"testfile.txt\";\n	string output_file = \"output.txt\";\npublic:\n	//主函数\n	int start();\n	//整理字符串\n	string clear_text(string text);\n	//中缀表达式转后缀表达式 \n	string change_text(string text);\n	//根据正规式获得NFA\n	grup getNFA(string text);\n	//输出结果\n	void printNFA(grup out);\n};\n//主函数\nint WordAnstary::start() {\n	//文件操作工具\n	ifstream read_file;\n	//读取文件\n	string text;\n	//read_file.open(input_file);\n	//read_file >> text;\n	cin >> text;\n	//cout << text;\n	//分析正规式，得到有穷自动机\n	//cout << \"原表达式为：\" << text << endl;\n	string new_text = this->clear_text(text);\n	if (new_text != \"\") {\n		cout << \"添加+的表达式：\"<<new_text << endl;\n		new_text = this->change_text(new_text);\n		cout << \"后缀表达式：\"<<new_text << endl;\n		grup out = this->getNFA(new_text);\n		this->printNFA(out);\n	}\n	else {\n		cout << \"输入不合法\" << endl;\n	}\n	read_file.close();\n	return 0;\n};\n\nvoid WordAnstary::printNFA(grup out) {\n	cout << \"X \";\n	for (int j = 0; j < int(out.edges.size()); j++) {\n		edge eX = out.edges[j];\n		if (eX.start == 0) {\n			cout << \"X-\" << eX.accept << \"->\";\n			if (eX.end==out.stateCount-1) {\n				cout << \"Y \";\n			}\n			else {\n				cout << eX.end - 1<<\" \";\n			}\n		}\n	}\n	cout << endl;\n	cout << \"Y \";\n	for (int j = 0; j < int(out.edges.size()); j++) {\n		edge eX = out.edges[j];\n		if (eX.start == out.stateCount - 1) {\n			cout << \"Y-\" << eX.accept << \"->\";\n			if (eX.end == out.stateCount - 1) {\n				cout << \"Y \";\n			}\n			else {\n				cout << eX.end - 1<<\" \";\n			}\n		}\n	}\n	cout << endl;\n	for (int i = 1; i < out.stateCount - 1; i++) {\n		cout << i - 1 << \" \";\n		for (int j = 0; j < int(out.edges.size()); j++) {\n			edge e = out.edges[j];\n			if (e.start == i&&e.accept==\'~\') {\n				cout << e.start - 1 << \"-\" << e.accept << \"->\";\n				if (e.end == out.stateCount - 1) {\n					cout << \"Y \";\n				}\n				else {\n					cout << e.end - 1 << \" \";\n				}\n			}\n		}\n		for (int j = 0; j < int(out.edges.size()); j++) {\n			edge e = out.edges[j];\n			if (e.start == i&&e.accept!=\'~\') {\n				cout << e.start - 1 << \"-\" << e.accept << \"->\";\n				if (e.end == out.stateCount - 1) {\n					cout << \"Y \";\n				}\n				else {\n					cout << e.end - 1<<\" \";\n				}\n			}\n		}\n		cout << endl;\n	}\n}\n\ngrup WordAnstary::getNFA(string text) {\n	stack<grup> s;\n	for (int i = 0; i < int(text.length()); i++) {\n		if ((text[i] <= \'z\' && text[i] >= \'a\') || (text[i] <= \'Z\' && text[i] >= \'A\')||(text[i] <= \'9\' && text[i] >= \'0\')) {\n			grup tempG;\n			edge tempE;\n			tempE.accept = text[i];\n			tempE.start = 0;\n			tempE.end = 1;\n			tempG.edges.push_back(tempE);\n			s.push(tempG);\n		}\n		else {\n			if (text[i] == \'+\') {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG1 = s.top();\n				s.pop();\n				//图和图合成\n				grup tempG = tempG1;\n				tempG.stateCount = tempG1.stateCount + tempG2.stateCount-1;\n				tempG.StartState = 0;\n				tempG.EndState = tempG.stateCount - 1;\n				//获取后一条边\n				for (int i = 0; i < int(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					e2.start += tempG1.stateCount-1;\n					e2.end += tempG1.stateCount-1;\n					tempG.edges.push_back(e2);\n				}\n				//合成图压栈\n				s.push(tempG);\n			}\n			else if (text[i] == \'*\') {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG;\n				if (tempG2.StartState!=tempG2.EndState) {\n					tempG.stateCount = tempG2.stateCount + 1;\n				}\n				else {\n					tempG.stateCount = tempG2.stateCount + 2;\n				}\n				tempG.EndState = tempG.stateCount-1;\n				//图内的边编号加1\n				for (int i = 0; i < int(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					if (e2.end==tempG2.EndState) {\n						e2.start += 1;\n						e2.end = e2.start;\n					}\n					else {\n						e2.start += 1;\n						e2.end += 1;\n					}\n					tempG.edges.push_back(e2);\n				}\n				//添加两条边\n				edge e1;\n				e1.accept = \'~\';\n				e1.start = 0;\n				e1.end = 1;\n				edge e2;\n				e2.accept = \'~\';\n				e2.start = tempG.EndState-1;\n				e2.end = e2.start + 1;\n				tempG.edges.push_back(e1);\n				tempG.edges.push_back(e2);\n				//合成图压栈\n				s.push(tempG);\n			}\n			else if (text[i] == \'|\') {\n				grup tempG2 = s.top();\n				s.pop();\n				grup tempG1 = s.top();\n				s.pop();\n				grup tempG;\n				tempG.StartState = 0;\n				tempG.EndState = 0;\n				tempG.stateCount = tempG1.stateCount + tempG2.stateCount-3;\n				for (int i = 0; i < int(tempG1.edges.size());i++) {\n					edge e1 = tempG1.edges[i];\n					if (e1.end == tempG1.EndState) {\n						e1.end = 0;\n					}\n					tempG.edges.push_back(e1);\n				}\n				for (int i = 0; i < int(tempG2.edges.size());i++) {\n					edge e2 = tempG2.edges[i];\n					if (e2.end == tempG2.EndState) {\n						e2.end = 0;\n					}\n					tempG.edges.push_back(e2);\n				}\n				//合成图压栈\n				s.push(tempG);\n			}\n		}\n	}\n	return s.top();\n}\n\nstring WordAnstary::clear_text(string text) {\n	//储存添加好+号的正规式\n	string new_text = \"\";\n	//分析栈用来分析()匹配\n	stack<char> s;\n	for (int i = 0; i < int(text.length()); i++) {\n		if ((text[i] <= \'z\' && text[i] >= \'a\') || (text[i] <= \'Z\' && text[i] >= \'A\') || (text[i] <= \'9\' && text[i] >= \'0\')) {\n			new_text = new_text + text[i];\n			if (i < int(text.length()) - 1) {\n				if ((text[i + 1] <= \'z\' && text[i+1] >= \'a\') || (text[i + 1] <= \'Z\' && text[i + 1] >= \'A\') || (text[i+1] <= \'9\' && text[i+1] >= \'0\')) {\n					new_text = new_text + \'+\';\n				}\n				else if (text[i + 1] == \'(\') {\n					new_text = new_text + \'+\';\n				}\n			}\n		}\n		else if (text[i] == \'|\') {\n			new_text = new_text + text[i];\n			continue;\n		}\n		else if (text[i] == \'*\') {\n			new_text = new_text + text[i];\n			if (i < int(text.length()) - 1) {\n				if ((text[i + 1] <= \'z\' && text[i+1] >= \'a\') || (text[i + 1] <= \'Z\' && text[i + 1] >= \'A\') || (text[i] <= \'9\' && text[i] >= \'0\'))\n					new_text = new_text + \'+\';\n				else if (text[i + 1] == \'(\')\n					new_text = new_text + \'+\';\n			}\n		}\n		else if (text[i] == \'(\') {\n			new_text = new_text + text[i];\n			s.push(text[i]);\n		}\n		else if (text[i] == \')\') {\n			new_text = new_text + text[i];\n			if (i < int(text.length()) - 1) {\n				if ((text[i + 1] <= \'z\' && text[i+1] >= \'a\') || (text[i + 1] <= \'Z\' && text[i + 1] >= \'A\') || (text[i] <= \'9\' && text[i] >= \'0\'))\n					new_text = new_text + \'+\';\n				else if (text[i + 1] == \'(\')\n					new_text = new_text + \'+\';\n			}\n			if (s.empty()) {\n				return \"\";\n			}\n			else {\n				s.pop();\n			}\n		}\n		else\n			return \"\";\n	}\n	if (s.empty())\n		return new_text;\n	else\n		return \"\";\n}\n\nstring WordAnstary::change_text(string text) {\n	stack<char> s;\n	string new_text = \"\";\n	for (int i = 0; i<int(text.length()); i++) {\n		if ((text[i] <= \'z\' && text[i] >= \'a\') || (text[i] <= \'Z\' && text[i] >= \'A\') || (text[i] <= \'9\' && text[i] >= \'0\')) {\n			new_text = new_text + text[i];\n		}\n		else {\n			if (text[i] == \'(\') {\n				s.push(text[i]);\n			}\n			else if (text[i] == \')\') {\n				while (s.top() != \'(\') {\n					new_text = new_text + s.top();\n					s.pop();\n				}\n				s.pop();\n			}\n			else if (text[i] == \'*\') {\n				s.push(text[i]);\n			}\n			else if (text[i] == \'|\') {\n				if (s.empty()) {\n					s.push(text[i]);\n				}\n				else {\n					while (!s.empty()) {\n						if (s.top() == \'*\') {\n							new_text = new_text + s.top();\n							s.pop();\n						}\n						else if (s.top() == \'|\') {\n							new_text = new_text + s.top();\n							s.pop();\n						}\n						else {\n							break;\n						}\n					}\n					s.push(text[i]);\n				}\n			}\n			else if (text[i] == \'+\') {\n				if (s.empty()) {\n					s.push(text[i]);\n				}\n				else {\n					while(!s.empty()){\n						if (s.top() == \'*\') {\n							new_text = new_text + s.top();\n							s.pop();\n						}else if (s.top() == \'+\') {\n							new_text = new_text + s.top();\n							s.pop();\n						}\n						else if (s.top() == \'|\') {\n							new_text = new_text + s.top();\n							s.pop();\n						}\n						else {\n							break;\n						}\n					}\n					s.push(text[i]);\n				}\n			}\n		}\n	}\n	while(!s.empty()) {\n		new_text += s.top();\n		s.pop();\n	}\n	return new_text;\n}\n\n\n//int main() {\n//	WordAnstary wordAustary;\n//	wordAustary.start();\n//}```\n',2,'123456',2);

/*Table structure for table `lan_focus` */

DROP TABLE IF EXISTS `lan_focus`;

CREATE TABLE `lan_focus` (
  `id` int(50) NOT NULL AUTO_INCREMENT COMMENT '唯一id',
  `user_id` int(5) NOT NULL COMMENT '用户id',
  `role_id` int(5) NOT NULL COMMENT '专栏id',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=44 DEFAULT CHARSET=utf8;

/*Data for the table `lan_focus` */

insert  into `lan_focus`(`id`,`user_id`,`role_id`) values (7,6,1),(8,6,2),(13,11,1),(14,11,2),(15,17,1),(16,5,13),(17,19,3),(18,5,3),(19,20,1),(20,20,2),(21,20,3),(22,20,13),(23,5,56),(24,5,4),(28,22,4),(29,22,13),(30,22,56),(31,6,3),(32,22,3),(40,5,2),(41,22,1),(42,22,2),(43,5,1);

/*Table structure for table `lan_massage` */

DROP TABLE IF EXISTS `lan_massage`;

CREATE TABLE `lan_massage` (
  `id` int(100) NOT NULL AUTO_INCREMENT COMMENT '唯一标识',
  `user_id` int(20) NOT NULL COMMENT '用户id',
  `blog_id` int(20) NOT NULL COMMENT '推送id',
  `msg_type` tinyint(1) NOT NULL DEFAULT '0' COMMENT '消息类型',
  `msg_creat_data` datetime NOT NULL COMMENT '发送时间',
  `msg_id_read` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否已阅',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=80 DEFAULT CHARSET=utf8;

/*Data for the table `lan_massage` */

insert  into `lan_massage`(`id`,`user_id`,`blog_id`,`msg_type`,`msg_creat_data`,`msg_id_read`) values (1,5,1,0,'2020-09-12 16:55:12',0),(2,5,2,0,'2020-09-12 17:42:21',1),(3,6,2,0,'2020-09-12 17:42:21',1),(4,6,3,0,'2020-09-14 10:48:10',0),(5,5,3,0,'2020-09-14 10:48:10',0),(6,6,4,0,'2020-09-14 21:51:16',0),(7,5,4,0,'2020-09-14 21:51:16',1),(8,6,5,0,'2020-09-14 21:51:17',0),(9,5,5,0,'2020-09-14 21:51:17',1),(10,6,6,0,'2020-09-15 19:50:09',0),(11,5,6,0,'2020-09-15 19:50:09',1),(12,6,7,0,'2020-09-18 19:59:02',0),(13,5,7,0,'2020-09-18 19:59:02',1),(14,11,7,0,'2020-09-18 19:59:02',0),(15,17,7,0,'2020-09-18 19:59:02',0),(16,20,7,0,'2020-09-18 19:59:02',0),(17,6,8,0,'2020-09-19 21:03:58',0),(18,5,8,0,'2020-09-19 21:03:58',1),(19,11,8,0,'2020-09-19 21:03:58',0),(20,17,8,0,'2020-09-19 21:03:58',0),(21,20,8,0,'2020-09-19 21:03:58',0),(22,6,9,0,'2020-09-20 16:07:48',0),(23,5,9,0,'2020-09-20 16:07:48',1),(24,11,9,0,'2020-09-20 16:07:48',0),(25,20,9,0,'2020-09-20 16:07:48',0),(26,22,9,0,'2020-09-20 16:07:48',1),(27,19,10,0,'2020-09-20 19:01:20',1),(28,5,10,0,'2020-09-20 19:01:20',0),(29,20,10,0,'2020-09-20 19:01:20',0),(30,22,10,0,'2020-09-20 19:01:20',0),(31,19,11,0,'2020-09-20 20:20:12',0),(32,5,11,0,'2020-09-20 20:20:12',0),(33,20,11,0,'2020-09-20 20:20:12',0),(34,22,11,0,'2020-09-20 20:20:12',0),(35,6,12,0,'2020-09-20 20:23:49',0),(36,5,12,0,'2020-09-20 20:23:49',0),(37,11,12,0,'2020-09-20 20:23:49',0),(38,17,12,0,'2020-09-20 20:23:49',0),(39,20,12,0,'2020-09-20 20:23:49',0),(40,22,12,0,'2020-09-20 20:23:49',0),(41,19,13,0,'2020-09-20 20:27:37',0),(42,5,13,0,'2020-09-20 20:27:37',0),(43,20,13,0,'2020-09-20 20:27:37',0),(44,22,13,0,'2020-09-20 20:27:37',0),(45,19,14,0,'2020-09-20 20:32:52',0),(46,5,14,0,'2020-09-20 20:32:52',0),(47,20,14,0,'2020-09-20 20:32:52',0),(48,22,14,0,'2020-09-20 20:32:52',0),(49,6,15,0,'2020-09-20 20:41:53',0),(50,5,15,0,'2020-09-20 20:41:53',1),(51,11,15,0,'2020-09-20 20:41:53',0),(52,17,15,0,'2020-09-20 20:41:53',0),(53,20,15,0,'2020-09-20 20:41:53',0),(54,22,15,0,'2020-09-20 20:41:53',1),(55,6,16,0,'2020-09-23 22:21:58',0),(56,5,16,0,'2020-09-23 22:21:58',1),(57,11,16,0,'2020-09-23 22:21:58',0),(58,20,16,0,'2020-09-23 22:21:58',0),(59,22,16,0,'2020-09-23 22:21:58',1),(60,6,17,0,'2020-10-02 17:09:40',0),(61,5,17,0,'2020-10-02 17:09:40',1),(62,11,17,0,'2020-10-02 17:09:40',0),(63,20,17,0,'2020-10-02 17:09:40',0),(64,22,17,0,'2020-10-02 17:09:40',1),(65,6,18,0,'2020-10-07 11:44:02',0),(66,5,18,0,'2020-10-07 11:44:02',1),(67,11,18,0,'2020-10-07 11:44:02',0),(68,20,18,0,'2020-10-07 11:44:02',0),(69,22,18,0,'2020-10-07 11:44:02',1),(70,6,19,0,'2020-10-18 11:44:35',0),(71,5,19,0,'2020-10-18 11:44:35',1),(72,11,19,0,'2020-10-18 11:44:35',0),(73,20,19,0,'2020-10-18 11:44:35',0),(74,22,19,0,'2020-10-18 11:44:35',1),(75,6,20,0,'2020-11-24 17:13:33',0),(76,11,20,0,'2020-11-24 17:13:33',0),(77,20,20,0,'2020-11-24 17:13:33',0),(78,5,20,0,'2020-11-24 17:13:33',1),(79,22,20,0,'2020-11-24 17:13:33',1);

/*Table structure for table `lan_roles` */

DROP TABLE IF EXISTS `lan_roles`;

CREATE TABLE `lan_roles` (
  `id` int(3) NOT NULL,
  `roles_lan_name` varchar(32) COLLATE utf8_bin NOT NULL COMMENT '专栏名称',
  `roles_state` int(1) DEFAULT '0' COMMENT '专栏状态',
  `roles_starname` varchar(32) COLLATE utf8_bin NOT NULL COMMENT '三十六天罡,七十二地煞,例;天魁星',
  `roles_nickname` varchar(32) COLLATE utf8_bin NOT NULL COMMENT '花名,例:及时雨',
  `roles_truename` varchar(32) COLLATE utf8_bin NOT NULL COMMENT '真实姓名,例:宋江',
  `roles_description` varchar(1024) COLLATE utf8_bin NOT NULL COMMENT '性格描述',
  `roles_img` text COLLATE utf8_bin COMMENT '头像',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

/*Data for the table `lan_roles` */

insert  into `lan_roles`(`id`,`roles_lan_name`,`roles_state`,`roles_starname`,`roles_nickname`,`roles_truename`,`roles_description`,`roles_img`) values (1,'108lan',1,'天魁星','及时雨','宋江','官方专栏:108lan创始人开设专栏，主要用于管理员申请投稿','http://108lan.com:8001/images/2020/09/12/13c48cb836914961b45b1daa504fde6c.png'),(2,'二进制',1,'天罡星','玉麒麟','卢俊义','0和1可以构建世界，你和我可以改变世界。','https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2084251264,3310213264&fm=26&gp=0.jpg'),(3,'数学之美',1,'天机星','智多星','吴用','我们必须知道,我们必将知道','https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=4253899781,2763858275&fm=26&gp=0.jpg'),(4,'头脑风暴',1,'天闲星','入云龙','公孙胜','世界的创作，源自于幻想','https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1600407545441&di=1865194023d57448989eda62edb966e8&imgtype=0&src=http%3A%2F%2Fku.90sjimg.com%2Felement_origin_min_pic%2F00%2F85%2F79%2F8156e9f54e1ac52.jpg'),(5,'test3',0,'天勇星','大刀','关胜','文武双全，赤胆忠心',NULL),(6,'test4',0,'天雄星','豹子头','林冲','为人正直，隐忍善良',NULL),(7,'test5',0,'天猛星','霹雳火','秦明','性格急躁，声如雷霆',NULL),(8,'test6',0,'天威星','双鞭','呼延灼','正直，大气',NULL),(9,'test7',0,'天英星','小李广','花荣','武功高强，为人仗义',NULL),(10,'test8',0,' 天贵星','小旋风','柴进',' 为人慷慨，见义勇为',NULL),(11,'test9',0,'天富星','扑天雕','李应','嫉恶如仇，见义勇为',NULL),(12,'test10',0,'天满星','美髯公','朱仝','仗义疏财，义字当头',NULL),(13,'心情杂货栈',1,'天孤星','花和尚','鲁智深','欢迎投稿你的快乐和想吐槽的事情等等','http://108lan.com:8001/images/2020/09/18/f6c50394f7874db992b24845456f50f6.jpg'),(14,'第十四',0,'天伤星','行者','武松','光明磊落，敢作敢为',NULL),(15,'第十五',0,'天立星','双枪将','董平','冲动 忠肝义胆  好胜',NULL),(16,'第十六',0,'天捷星','没羽箭','张清','性格内向,非常内敛',NULL),(17,'第十七',0,'天暗星','青面兽','杨志','勤快，身手不凡',NULL),(18,'第十八',0,'天佑星','金枪手','徐宁','胆大,有万夫不挡之勇',NULL),(19,'第十九',0,'天空星','急先锋','索超','性子急，执着，鲁莽',NULL),(20,'第二十',0,'天速星','神行太保','戴宗','嫉恶如仇、侠肝义胆、脾气火爆',NULL),(21,'第二十一',0,'天异星','赤发鬼','刘唐','勇猛莽撞',NULL),(22,'第二十二',0,'天杀星','黒旋风','李逵 ','正直粗鲁，勇猛无比',NULL),(23,'第二十三',0,'天微星','九纹龙','史进','武艺高超，嫉恶如仇',NULL),(24,'第二十四',0,'天究星','没遮拦','穆弘','平凡善良、耐心平和、持重端庄',NULL),(25,'第二十五',0,'天退星','插翅虎','雷横','脾气暴躁，为人耿直',NULL),(26,'第二十六',0,'天寿星','混江龙','李俊','为人正直，水中功夫超强',NULL),(27,'第二十七',0,'天剑星','立地太岁','阮小二','武艺出众，英勇善战',NULL),(28,'第二十八',0,'天平星','船火儿','张横','英勇善战',NULL),(29,'第二十九',0,'天罪星','短命二郎','阮小五','水中好汉，奋勇杀敌',NULL),(30,'第三十',0,'天损星','浪里白条','张顺','水中功夫好，豪爽仗义，惩恶济善，有仇必报',NULL),(31,'第三十一',0,'天败星','活阎罗','阮小七','心快口快',NULL),(32,'第三十二',0,'天牢星','病关索','杨雄','为人正直',NULL),(33,'第三十三',0,'天慧星','拼命三郎','石秀','打抱不平',NULL),(34,'第三十四',0,'天暴星','两头蛇','解珍','作战英勇',NULL),(35,'第三十五',0,'天哭星','双尾蝎','解宝','为人灵活，作战英勇',NULL),(36,'第三十六',0,'天巧星','浪子','燕青','武功高强，为人风流',NULL),(37,'第三十七',0,'地魁星','神机军师','朱武','精通阵法，广有谋略',NULL),(38,'第三十八',0,'地煞星','镇三山','黄信','一身好武艺，英勇善战',NULL),(39,'第三十九',0,'地勇星','病尉迟','孙立','精熟弓马，武艺过人，正直',NULL),(40,'第四十',0,'地杰星','丑郡马','宣赞','相貌丑陋，武艺出众',NULL),(41,'第四十一',0,'地雄星','井木犴','郝思文','仗义侠胆，有勇有谋',NULL),(42,'第四十二',0,'地威星','百胜将','韩滔','力大无穷，有勇有谋',NULL),(43,'第四十三',0,'地英星','天目将','彭玘','扶危救困，义气第一',NULL),(44,'第四十四',0,'地奇星','圣水将','单廷圭','风流潇洒，气宇轩昂',NULL),(45,'第四十五',0,'地猛星','神火将','魏定国','风流潇洒，礼貌待人',NULL),(46,'第四十六',0,'地文星','圣手书生','萧让','擅长写字，不爱说话',NULL),(47,'第四十七',0,'地正星','铁面孔目','裴宣','忍辱负重，忠诚憨厚',NULL),(48,'第四十八',0,'地阔星','摩云金翅','欧鹏','武功不低，挫折感强，比较谨慎',NULL),(49,'第四十九',0,'地阖星','火眼狻猊','邓飞','武功不差，舍己为人',NULL),(50,'第五十',0,'地强星','锦毛虎','燕顺','有情有义，重英雄',NULL),(51,'第五十一',0,'地暗星','锦豹子','杨林','聪明，比较谨慎',NULL),(52,'第五十二',0,'地轴星','轰天雷','凌振','精通武艺，是一个非常厉害的人物',NULL),(53,'第五十三',0,'地会星','神算子','蒋敬','武艺高强，胆大',NULL),(54,'第五十四',0,'地佐星','小温侯','吕方','为人忠义 武功高强 不服输',NULL),(55,'第五十五',0,'地佑星','赛仁贵','郭盛','有勇无谋,义气为重',NULL),(56,'柳叶刀',1,'地灵星','神医','安道全','我将非常尊重和学习我们的医学前辈历尽千辛万苦所获得的科学成果及医学知识。 我也将十分乐意去传授这些知识给我的后来者及未来的医生。','https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1601050693845&di=c745760bfc447e129faf6025d87a9b42&imgtype=0&src=http%3A%2F%2Fbpic.588ku.com%2Felement_origin_min_pic%2F00%2F94%2F08%2F7856f2b846babb5.jpg'),(57,'第五十七',0,'地兽星','紫髯伯','皇甫端','医道高明，诊治马病，手到病除，胡须大紫',NULL),(58,'第五十八',0,'地微星','矮脚虎','王英','身材矮小，脾气暴躁',NULL),(59,'第五十九',0,'地慧星','一丈青','扈三娘','机智聪明，为人仗义',NULL),(60,'第六十',0,'地暴星','丧门神','鲍旭','正直粗鲁，勇猛无比',NULL),(61,'第六十一',0,'地然星','混世魔王','樊瑞','阴柔有余、阳刚不足',NULL),(62,'第六十二',0,'地猖星','毛头星','孔明','为人行侠仗义 武艺平平 忠肝义胆',NULL),(63,'第六十三',0,'地狂星','独火星','孔亮','本事低微，武功很差',NULL),(64,'第六十四',0,'地飞星','八臂哪吒','项充','有情有义，武艺高强',NULL),(65,'第六十五',0,'地走星','飞天大圣','李衮',' 武艺高强 四海之内皆兄',NULL),(66,'第六十六',0,'地巧星','玉臂匠','金大坚','技艺高超，善于雕刻',NULL),(67,'第六十七',0,'地明星','铁笛仙','马麟','好勇斗狠，讲义气',NULL),(68,'第六十八',0,'地进星','出洞蛟','童威','能伏水，会驾船',NULL),(69,'第六十九',0,'地退星','翻江蜃','童猛','水性极好',NULL),(70,'第七十',0,'地满星','玉幡竿','孟康','人高马大，善于制造大小船只',NULL),(71,'第七十一',0,'地遂星','通臂猿','侯健','飞针走线，技艺高超',NULL),(72,'第七十二',0,'地周星','跳涧虎','陈达','体魄强健,生性粗鲁',NULL),(73,'第七十三',0,'地隐星','白花蛇','杨春','使一口大杆刀，武艺精熟',NULL),(74,'第七十四',0,'地异星','白面郎君','郑天寿','鲁莽，比较重义气',NULL),(75,'第七十五',0,'地理星','九尾龟','陶宗旺','力大无比，正直勇敢',NULL),(76,'第七十六',0,'地俊星','铁扇子','宋清','为人诚恳，热情好客',NULL),(77,'第七十七',0,'地乐星','铁叫子','乐和','文武全行、且兴趣广泛、聪明绝顶',NULL),(78,'第七十八',0,'地捷星','花项虎','龚旺','一生行侠仗义，性格耿直',NULL),(79,'第七十九',0,'地速星','中箭虎','丁得孙','为人勇猛 武艺高强 艺高 胆大 有义气',NULL),(80,'第八十',0,'地镇星','小遮拦','穆春','武艺高强 崇尚忠义',NULL),(81,'第八十一',0,'地羁星','操刀鬼','曹正','平时像个孩子，性格天真 活泼。但战斗时，不顾一切战斗',NULL),(82,'第八十二',0,'地魔星','云里金刚','宋万','高大威猛，武艺平常',NULL),(83,'第八十三',0,'地妖星','摸着天','杜迁','本事平平，武艺一般',NULL),(84,'第八十四',0,'地幽星','病大虫','薛永','讲义气，重朋友',NULL),(85,'第八十五',0,'地僻星','打虎将','李忠','做事悭吝小气 不慷慨',NULL),(86,'第八十六',0,'地空星','小霸王','周通','鲁莽，粗暴，不仗义',NULL),(87,'第八十七',0,'地孤星','金钱豹子','汤隆','为人义气，性情耿直，为山寨尽心竭力',NULL),(88,'第八十八',0,'地全星','鬼脸儿','杜兴','鲁莽，讲义气',NULL),(89,'第八十九',0,'地短星','出林龙','邹渊','冲动 好赌 贪婪',NULL),(90,'第九十',0,'地角星','独角龙','邹润','慷慨大义',NULL),(91,'第九十一',0,'地囚星','旱地忽律','朱贵','性格直率，善良',NULL),(92,'第九十二',0,'地藏星','笑面虎','朱富','行侠仗义 嫉恶如仇 仔细 谨慎',NULL),(93,'第九十三',0,'地伏星','金眼彪','施恩','使得一身好拳棒，会施展恩惠',NULL),(94,'第九十四',0,'地平星','铁臂膊','蔡福','替天行道，正义',NULL),(95,'第九十五',0,'地损星','一枝花','蔡庆','大义，武功高强',NULL),(96,'第九十六',0,'地奴星','催命判官','李立','武艺高超，为人仗义',NULL),(97,'第九十七',0,'地察星','青眼虎','李云','率直 仗义',NULL),(98,'第九十八',0,'地恶星','没面目','焦挺','拳脚熟练，讲义气',NULL),(99,'第九十九',0,'地丑星','石将军','石勇','武功一般，粗蛮胆大',NULL),(100,'第一百',0,'地数星','小尉迟','孙新','正直勇敢，讲义气',NULL),(101,'第一百零一',0,'地阴星','母大虫','顾大嫂','豪爽急躁，倔强暴躁',NULL),(102,'第一百零二',0,'地刑星','菜园子','张青','性格内向,憨厚老实',NULL),(103,'第一百零三',0,'地壮星','母夜叉','孙二娘','性情暴躁,举止粗鲁',NULL),(104,'第一百零四',0,'地劣星','活闪婆','王定六','嫉恶如仇 识英雄 路见不平拔刀相助',NULL),(105,'第一百零五',0,'地健星','险道神','郁保四','忠义双全 重英雄',NULL),(106,'第一百零六',0,'地耗星','白日鼠','白胜','仗义，坚定',NULL),(107,'第一百零七',0,'地贼星','鼓上蚤','时迁','聪明机智，社会经验丰富 ，善于乔装打扮',NULL),(108,'第一百零八',0,'地狗星','金毛犬','段景住','性格沉稳，脾气好',NULL);

/*Table structure for table `user` */

DROP TABLE IF EXISTS `user`;

CREATE TABLE `user` (
  `id` int(20) NOT NULL AUTO_INCREMENT COMMENT '唯一标识',
  `user_author_id` int(20) DEFAULT '0' COMMENT '作者ID',
  `user_name` varchar(50) NOT NULL COMMENT '用户名',
  `user_password` varchar(250) NOT NULL COMMENT '密码',
  `user_salt` varchar(100) DEFAULT NULL COMMENT '加密盐值',
  `user_sex` tinyint(1) NOT NULL DEFAULT '0' COMMENT '性别',
  `user_email` varchar(50) NOT NULL COMMENT '邮箱',
  `user_level` int(10) NOT NULL DEFAULT '0' COMMENT '用户等级',
  `user_role` int(11) NOT NULL DEFAULT '0' COMMENT 'admin_id',
  `user_register_time` datetime NOT NULL COMMENT '创建时间',
  `user_is_delete` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否注销',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8;

/*Data for the table `user` */

insert  into `user`(`id`,`user_author_id`,`user_name`,`user_password`,`user_salt`,`user_sex`,`user_email`,`user_level`,`user_role`,`user_register_time`,`user_is_delete`) values (5,1,'persistenthuang','cf0f5c71db3d009462a0d3e61401315b','FBJ0O9P10I+EOl59JA5zYg==',1,'persistenthuang@163.com',50,0,'2020-08-28 11:45:25',0),(6,6,'111','fc094fc7bad00f6c026f34c08cbba2d9','0m5Qpush0Z8ZdyjVKwPxQg==',0,'1367786538@qq.com',0,0,'2020-09-12 17:35:00',0),(8,0,'Fao','047d363757cac2145b83b8445d0cc960','XcwJJNMGuTN4LnPXGNi3eg==',1,'1248089327@qq.com',0,109,'2020-09-12 18:00:38',0),(9,0,'medcuit','2be55c3e5c6b235b3fb759fb67b2789a','8My85hlGIfeCE4akDeTbQQ==',1,'2990271700@qq.com',0,109,'2020-09-12 18:16:24',0),(10,0,'a','4700cb71b05fb2ed5072740976801034','6W5mzcLSq9vx7ZsRLwMFQw==',1,'2402901363@qq.com',0,109,'2020-09-12 18:19:08',0),(12,0,'huining','4c3198f9306ac99c84dfccdb3a898341','99OYEup5LK/R6yDIm+GXuQ==',1,'305579164@qq.com',0,109,'2020-09-12 20:29:08',0),(13,0,'Wangergou','ef04dae9432a39122e958c5f48e33d53','NTtOM8ipury9iWDeSiYRmw==',0,'1628829916@qq.com',0,109,'2020-09-13 00:25:37',0),(14,0,'void','a2678a3bedf5df22a94d3eac418112d1','oDhZca8pAKV0mxNTSQQ41Q==',1,'1422731368@qq.com',0,109,'2020-09-15 21:39:32',0),(15,0,'Jenson_Yu','45c73eaebb0bdc9495d39a77b26b7021','5Nb8FMD/4dkm4Z6Gg/xz3w==',1,'yujingshuopublic@163.com',0,109,'2020-09-16 08:19:44',0),(16,0,'本草纲目','101124af5b273fdbc7645b610ca3713c','ciAVu/0m+JPlLqEcUH/zIg==',1,'1439199544@qq.com',0,109,'2020-09-16 20:27:44',0),(17,0,'3091279505@qq.com','d1a30c1d93703f83c3afb195a102835e','6MVmpF8Q2pxkCjtzskUWOA==',1,'3091279505@qq.com',0,109,'2020-09-16 22:17:24',0),(18,0,'duoland','4b7c6e32f93b58042faf7bd890a18a3d','YGHkU8gbvpTEtACZo6H21A==',1,'2252245459@qq.com',0,109,'2020-09-17 19:34:32',0),(19,4,'L7','1a2d140931246969275027d523aedf7a','FzMk1r61P5aRJHBP39CBjA==',0,'1325866027@qq.com',0,0,'2020-09-17 22:16:19',0),(21,0,'18727117186','7c128355fd22a991a8c214f5e1300fa3','Dsn/W0owc2wvt1taIH/nCA==',1,'408952067@qq.com',0,109,'2020-09-17 23:37:57',0),(22,5,'huang','e457b5c366d870a68a163218ecd9f509','1tlPujENbp4B5vobm3H8Ug==',1,'1727449083@qq.com',50,0,'2020-09-20 15:58:11',0),(23,0,'Joyce','d5793a9b7cb1a1ecea5aeec3c61011e4','pGNDaeNbegs6R5UDCmN7Kg==',0,'joycehyh@126.com',0,109,'2020-09-22 13:31:35',0),(24,0,'yuan','f9cc5c15562b65b2b8221122963dbfac','lcyY+IePeF4+n5eDrZ0ViA==',1,'1027126043@qq.com',0,109,'2020-10-03 14:10:57',0),(25,0,'ljh906368483','70c021371e97032d9f031f6c95538691','FtbLdwMG6tEChe/Pzi5cmA==',1,'906368483@qq.com',0,109,'2020-10-03 14:11:00',0),(26,0,'hsing','87aed87d6729b4331c9af4a3592dc7f3','rYBbJURjkjXO4DFZmYXLGg==',1,'xing580608@163.com',0,109,'2020-10-10 22:24:12',0),(27,0,'qwe','acfcb9e51e4a14f605993bb4dc0e1d49','RsS8xokYIqfyeN+HgnBKRA==',1,'1093453695@qq.com',0,109,'2020-12-10 16:09:50',0);

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
